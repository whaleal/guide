{"./":{"url":"./","title":"Whaleal","keywords":"","body":"Whaleal 锦木信息是专业的IT数据咨询与服务提供商，致力于向用户提供优质的信息化产品、咨询及服务。 锦木信息于2015年在上海成立，并于北京、深圳、广州设立分支机构。 锦木信息是MongoDB北亚区核心合作伙伴，Akamai、Zendesk、Vonage、Splunk的中国区核心合作伙伴。 此Guide 主要介绍了 Whaleal团队开发的自研产品介绍及相关部署使用文档。 Whaleal 社区 "},"whalelaPlatform/":{"url":"whalelaPlatform/","title":"Whaleal Platform","keywords":"","body":"Whaleal Platform Introduction Whaleal Platform（WAP）是一款智能运维托管平台，7*24实时监控和管理您的 MongoDB 服务。作为一项开源的 MongoDB 数据库监控解决方案，WAP 提供即时的故障排除和诊断功能，以确保您的 MongoDB 数据库持续稳定运行，并提高工作效率。同时，WAP 还支持自动备份和恢复，为您提供全面的数据保护，确保数据安全可靠。选择 WAP，您将体验到智能化运维的便捷与高效。 Whaleal Platform Architecture Introduction 系统的架构图描绘了系统的整体结构，它反映了系统各个模块之间的关系。 功能模块划分就是经过层层分解，把一个复杂的系统划分成为多个功能单一的功能模块。 根据对系统的功能进行分析整理，总结出数据共享交换系统的具体功能模块. WAP Feature 灵活部署 WAP支持根据业务需求高度定制MongoDB节点，实现快速灵活部署。 全局监控 平台全面监控每个MongoDB节点，智能关联Host监控，并提供直观的故障排除方法。 审计操作日志 记录详尽的审计操作日志，有力支持历史回溯，有助于快速排查和解决问题，缩短故障排障时长。 自动备份与恢复 WAP支持自动备份和恢复功能，为用户提供全面的数据保护，确保数据的安全可靠。 通信加密保障 WAP采用通信加密技术，保证MongoDB服务之间的数据传输安全，有效防止敏感信息泄露。 MongoDB实时诊断 WAP支持实时诊断、LogVis、Performance、ExplainPlan等功能，提供全面而精准的数据库性能监控。 实时告警： WAP具备实时告警系统，能迅速捕捉MongoDB节点的异常，如性能下降、存储不足等，及时通知管理员，确保对潜在问题的敏感感知和快速响应。 "},"whalelaPlatform/00-Overview/01-Introduction.html":{"url":"whalelaPlatform/00-Overview/01-Introduction.html","title":"Introduction","keywords":"","body":"Whaleal Platform Introduction Whaleal Platform（WAP）是一款智能运维托管平台，7*24实时监控和管理您的 MongoDB 服务。作为一项开源的 MongoDB 数据库监控解决方案，WAP 提供即时的故障排除和诊断功能，以确保您的 MongoDB 数据库持续稳定运行，并提高工作效率。同时，WAP 还支持自动备份和恢复，为您提供全面的数据保护，确保数据安全可靠。选择 WAP，您将体验到智能化运维的便捷与高效。 Whaleal Platform Architecture Introduction 系统的架构图描绘了系统的整体结构，它反映了系统各个模块之间的关系。 功能模块划分就是经过层层分解，把一个复杂的系统划分成为多个功能单一的功能模块。 根据对系统的功能进行分析整理，总结出数据共享交换系统的具体功能模块. WAP Feature 灵活部署 WAP支持根据业务需求高度定制MongoDB节点，实现快速灵活部署。 全局监控 平台全面监控每个MongoDB节点，智能关联Host监控，并提供直观的故障排除方法。 审计操作日志 记录详尽的审计操作日志，有力支持历史回溯，有助于快速排查和解决问题，缩短故障排障时长。 自动备份与恢复 WAP支持自动备份和恢复功能，为用户提供全面的数据保护，确保数据的安全可靠。 通信加密保障 WAP采用通信加密技术，保证MongoDB服务之间的数据传输安全，有效防止敏感信息泄露。 MongoDB实时诊断 WAP支持实时诊断、LogVis、Performance、ExplainPlan等功能，提供全面而精准的数据库性能监控。 实时告警： WAP具备实时告警系统，能迅速捕捉MongoDB节点的异常，如性能下降、存储不足等，及时通知管理员，确保对潜在问题的敏感感知和快速响应。 "},"whalelaPlatform/00-Overview/02-Comparison.html":{"url":"whalelaPlatform/00-Overview/02-Comparison.html","title":"Comparison","keywords":"","body":"Popular Solution MongoDB Ops Manager Server 在您自己的环境中安全、可靠、无缝地管理MongoDB。通过MongoDB Enterprise Advanced订阅提供，Ops Manager通过自动化关键的管理任务，如部署、升级等，消除了运维方面的繁琐工作。 监控 对 100 多个性能指标进行监控、可视化和警报 备份 捕获连续增量备份，并进行时间点恢复 Automation 执行单击安装、升级和索引维护，零停机时间 查询优化 通过可视化查询分析器、索引建议以及自动索引发布，无缝识别和解决运行缓慢的查询。 Zabbix Zabbix是一款开源的监控软件工具，用于监控各种it组件，包括网络、服务器、虚拟机（VMs）和云服务。Zabbix提供监控指标，如网络利用率、CPU负载和磁盘空间消耗。 从任何来源收集数据 灵活的度量收集 agent/agent-less监控 自定义采集方式 Percona Monitoring and Management Percona Monitoring and Management（PMM）是一款开源的数据库监控、管理和可观测性解决方案，适用于MySQL、PostgreSQL和MongoDB。 它使您能够观察数据库系统的健康状况，探索其行为中的新模式，进行故障排除，并执行数据库管理操作，无论这些系统位于本地还是云端。 PMM从数据库及其主机中收集数千个即插即用的性能指标。 PMM Web用户界面通过仪表板将数据可视化呈现。 额外的功能包括用于数据库健康评估的顾问。 Homogeneous Comparison 基于如上信息, 进行同类横向对比 Ops Manager Zabbix PMM WAP 变更管理 √ × × √ 监控告警 详细 一般 详细 详细 备份恢复 √ × 其他方案 其他方案 使用限制 企业版 开源 开源 开源 优势点 官方工具、最全面的平台 企业最广泛的监控平台，易集成其他组件； 开源MySQL的监控平台，集成了MongoDB； 多年的排障经验沉淀，更符合国人的使用习惯 劣势点 要求对MongoDB一定了解，使用门槛偏高； 指标不够详细，不易排查诊断； Dashboard过多，很难直观排查； 现阶段仅支持CentOS6/7/8 "},"whalelaPlatform/01-Intstall/00-requirement.html":{"url":"whalelaPlatform/01-Intstall/00-requirement.html","title":"Requirement","keywords":"","body":"Pre-Flight Check 在安装Whaleal Platform (WAP)之前,须阅读如下材料: - Server Requirement - Agent Requirement Server Requirement Hardware Requirement 所有安装以下Whaleal Platform（WAP）组件的主机都必须要满足RAM、Disk要求： Whaleal Platform Application Whaleal Platform Application Databases Whaleal Platform Application Hardware Requirement 所有部署 Whaleal Platform Application 的主机都要满足以下硬件要求： 监控节点数量 CPU 内存 磁盘 50 4+ 8GB+ 10GB + logs storage 200 8+ 16GB+ 10GB + logs storage 200+ 联系Whaleal Team 联系Whaleal Team 联系Whaleal Team Whaleal Platform Application Database Hardware Requirement 所有部署 Whaleal Platform Application Database 的主机都要满足以下硬件要求： 监控节点数量 CPU 内存 磁盘 50 4+ 8GB+ 256GB 200 8+ 16GB+ 512GB 200+ 联系Whaleal Team 联系Whaleal Team 联系Whaleal Team 为了更好的性能，推荐使用： Application Database 磁盘使用SSD Application Database 使用 WiredTiger存储引擎 Software Requirement Java环境要求 JAVA 版本 jdk 1.8.x open-jdk 1.8.x 操作系统兼容 Whaleal Platform Application 必须部署在 64-bit 操作系统上。 操作系统 版本 Red Hat Enterprise Linux 6.x、7.x、8.x CentOS 6.x、7.x、8.x Network Security TCP连接要求 要求所有的 Whaleal Platform Application 服务必须满足与以下服务正常通信： Whaleal Platform Application Database Whaleal Platform Application Agent Monitor MongoDB Hosts 为保证开箱即用的原则，Whaleal Platform Application 使用 cloud.whaleal.com 域名对外提供服务。 所有访问 Whaleal Platform Application 的主机必须配置host解析： Whaleal_Platform_Application_IP cloud.whaleal.com Port Whaleal Platform Application 必须满足以下最基本要求： 用户和 Whaleal Platform Application Agent 必须可以通过HTTP/HTTPS请求访问 Whaleal Platform Application 必须可以访问 Whaleal Platform Application Database 所有的 Whaleal Platform Application 和 Whaleal Platform Application Agent 必须可以访问所监控、纳管的MongoDB服务 Whaleal Platform Application 必须可以通过邮箱、短信、钉钉给用户发送信息 所以 Whaleal Platform Application 必须开通以下端口： Service Default Port Transport Direction Describe HTTP 8080 TCP Inbound HTTPS 8443 TCP Inbound Whaleal Platform 9600 TCP Inbound MongoDB 27017 TCP Outbound SMTP 587 TCP Outbound SMS TCP Outbound dingding TCP Outbound 使用自定义端口，请将自定义端口开放 Port at host Whaleal Platform Application 可以完成大部分操作，但是有些过程需要管理员访问 Whaleal Platform Application 主机去完成，要求必须开通以下端口： Service Default Port Transport Direction Describe ssh 22 TCP Inbound Agent Requirement Hardware Requirement 所有安装以下Whaleal Platform（WAP）组件的主机都必须要满足RAM、Disk要求： Whaleal Platform Application Agent Whaleal Platform Application Agent Hardware Requirement 所有部署 Whaleal Platform Application Agent 的主机都要满足以下硬件要求： 服务器中被纳管、监控节点数量 CPU 内存 磁盘 1 1+ 2GB+ 2GB + logs storage 5 2+ 4GB+ 2GB + logs storage 5+ 联系Whaleal Team 联系Whaleal Team 联系Whaleal Team Software Requirement Java环境要求 JAVA 版本 jdk 1.8.x open-jdk 1.8.x 操作系统兼容 Whaleal Platform Application 必须部署在 64-bit 操作系统上。 操作系统 版本 Red Hat Enterprise Linux 6.x、7.x、8.x CentOS 6.x、7.x、8.x Network Security TCP连接要求 要求所有的 Whaleal Platform Application 服务必须满足与以下服务正常通信： Whaleal Platform Application Database Whaleal Platform Application Agent Monitor MongoDB Hosts 为保证开箱即用的原则，Whaleal Platform Application 使用 cloud.whaleal.com 域名对外提供服务。 所有访问 Whaleal Platform Application 的主机必须配置host解析： Whaleal_Platform_Application_IP cloud.whaleal.com Port Whaleal Platform Application Agent 必须满足以下最基本要求： 用户和 Whaleal Platform Application 必须可以访问服务器与MongoDB 所以 Whaleal Platform Application 必须开通以下端口： Service Default Port Transport Direction Describe Whaleal Platform 9600 TCP Outbound MongoDB 27017 TCP Inbound、Outbound 使用自定义端口，请将自定义端口开放 Port at host Whaleal Platform Application Agent 可以完成大部分操作，但是有些过程需要管理员访问 Whaleal Platform Application 主机去完成，要求必须开通以下端口： Service Default Port Transport Direction Describe ssh 22 TCP Inbound "},"whalelaPlatform/01-Intstall/01-Installation.html":{"url":"whalelaPlatform/01-Intstall/01-Installation.html","title":"Installation","keywords":"","body":"Installation Whaleal Platform（WAP）支持以下安装方式: - VM Appliance VM Appliance Step-1. 安装JDK 1、下载JDK ​ 进入 Oracle 官方网站 下载合适的 JDK 版本，准备安装。 注意： 下面以 jdk-8u151-linux-x64.tar.gz 为例，如果您下载的是其他版本，请注意文件后缀为 .tar.gz 即可。 2、创建目录 执行如下命令，在 /usr/ 目录下创建 java 目录。 mkdir /usr/java cd /usr/java 3、将下载的文件 jdk-8u151-linux-x64.tar.gz 复制到 /usr/java/ 目录下。 4、解压 JDK 执行如下命令，解压文件。 tar -zxvf jdk-8u151-linux-x64.tar.gz 5、设置环境变量 # 编辑 /etc/profile 文件添加如下内容并保存 set java environment JAVA_HOME=/usr/java/jdk1.8.0_151 JRE_HOME=/usr/java/jdk1.8.0_151/jre CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export JAVA_HOME JRE_HOME CLASS_PATH PATH 注意： 其中 JAVA_HOME，JRE_HOME 请根据自己的实际安装路径及 JDK 版本配置。 使之修改生效，执行如下： source /etc/profile 6、测试 # 执行如下命令进行测试。 java -version # 若显示 Java 版本信息，则说明 JDK 安装成功 java version \"1.8.0_151\" Java(TM) SE Runtime Environment (build 1.8.0_151-b12) Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode) Step-2. 安装NACOS NACOS最低版本要求1.4。 下载地址，选择对应版本 1、解压文件 tar zxvf nacos-server-1.4.3.tar.gz mv nacos /usr/local/nacos 2、启动nacos cd /usr/local/nacos/bin ./startup.cmd -m standalone Step-3. 安装MongoDB 下载地址,下载mongodb 安装包 1、安装依赖包 yum install libcurl openssl 2、下载完成后解压 tar -zxvf mongodb-linux-x86_64-ubuntu1604-4.2.8.tgz #将解压包拷贝到指定目录 mv mongodb-src-r4.2.8 /usr/local/mongodb 3、添加环境变量 export PATH=/usr/local/mongodb/bin:$PATH 4、添加配置文件 mkdir -p /data/appdb/{conf,data,log} vi /data/appdb/conf/mongodb.conf net: bindIp: 0.0.0.0 port: 27017 processManagement: fork: \"true\" storage: dbPath: /data/appdb/data journal: enabled: true engine: wiredTiger wiredTiger: engineConfig: cacheSizeGB: 1 systemLog: destination: file path: /data/appdb/log/mongodb.log logAppend: true security: authorization: enabled 5、启动mongodb /usr/local/mongodb/bin/mongod -f /data/appdb/conf/mongodb.conf 6、配置mongodb 密码 # 登陆 mongo --port 27017 use admin # 配置为用户名: root 密码: pass123 db.createUser({user:\"root\",pwd:\"pass123\",roles:[{role:\"root\",db:\"admin\"}]}) # 配置完成后退出,然后重新登陆 exit mongo --port 27017 -uroot -p pass123 Step-4. Whaleal安装 1、网关模块 # 修改项目配置文件 server/ops-gateway-pro.yml spring: cloud: nacos: discovery: server-addr: ****** # 配置 nacos 地址 # 启动网管模块 nohup java -jar /root/whaleal/server/ops-gateway-1.0.0.jar --spring.config.location=ops-gateway-pro.yml > whaleal-geteway.log & 2、数据收集模块 # 修改项目配置文件 server/data-collection-api-dev.yml spring: data: mongodb: uri: mongodb://****** # AppDB 数据库地址 database: ****** application: name: data-os-collection cloud: nacos: discovery: server-addr: ****** # Nacos 地址 # 启动数据收集模块 nohup java -jar /root/whaleal/server/data-collection-api-1.0.0.jar --spring.config.location=data-collection-api-pro.yml > data-collection-api.log & 3、web 模块 # 修改项目配置文件 server/ops-server-web-pro.yml server: port: 9602 spring: cloud: nacos: discovery: server-addr: ****** # Nacos 地址 data: mongodb: uri: mongodb://****** # AppDB 数据库地址 database: ****** file: root: path: /home/whaleal/server/ # Whaleal Platform 数据库介质包存放目录 # logging: # config: classpath:log4j2.yml # 启动 web 模块 nohup java -jar /root/whaleal/server/ops-server-web-1.0.0.jar --spring.config.location=ops-server-web-pro.yml > ops-server-web.log & 4、Agent模块 复制 agent-collection-1.0.0.jar 到 ops-server-web 模块的 file.root.path 目录下 cp /root/whaleal/server/agent-collection-1.0.0.jar /home/whaleal/server/ Step-5. 所有模块启动、终止命令 1、启动 nohup java -jar /root/whaleal/server/ops-gateway-1.0.0.jar --spring.confi g.location=ops-gateway-pro.yml > whaleal-geteway.log & nohup java -jar /root/whaleal/server/data-collection-api-1.0.0.jar --spring.config.location=data-collection-api-pro.yml > data-collection-api.log & nohup java -jar /root/whaleal/server/ops-server-web-1.0.0.jar --spring.config.location=ops-server-web-pro.yml > ops-server-web.log & 2、终止 ps -ef | grep java | grep whaleal-server-web-1.0 | cut -c 9-15 | xargs kill -9 ps -ef | grep java | grep data-collection-api-1.0 | cut -c 9-15 | xargs kill -9 ps -ef | grep java | grep whaleal-gateway-1.0 | cut -c 9-15 | xargs kill -9 Step-6. 前端部署 Nginx 下载地址, 下载nginx安装包 1、安装依赖环境 yum install -y pcre pcre-devel zlib zlib-devel gcc++ gcc make 2、下载后解压nginx 安装包 tar -zxvf nginx-1.21.1.tar.gz 3、编译安装 cd nginx-1.21.1 ./configure --prefix=/usr/local/nginx make && make install ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/ 4、启动nignx nginx # 启动nginx nginx -s reload # 重启 nginx nginx -s stops # 停止nginx 5、配置前端文件 # 执行以下命令,配置 find /usr/local/nginx/html -type f -exec sed -i 's/gateWayServer:8080/:8080/g' {} + # 重启 nginx nginx -s reload Step-7. 浏览器访问 浏览器访问地址：http://ip:8080/ "},"whalelaPlatform/02-Usage/Account/AccountCenter.html":{"url":"whalelaPlatform/02-Usage/Account/AccountCenter.html","title":"AccountCenter","keywords":"","body":"Account Center Account Center 可以配置以下内容： - Email - Phone Number - Dingding URL 个人中心,可以修改个人资料信息包含邮件、电话等信息 a. 进入页面左侧导航栏 b. 点击 Account 选项按钮，选择 个人中心 选项 c. 点击 编辑资料 选项按钮，进行个人信息修改 Email 在编辑资料中修改个人信息中 邮箱地址，在 Whaleal 中配置告警后，告警通知会同步发送至个人邮箱。 Phone Number 在编辑资料中修改个人信息中 电话，在 Whaleal 中配置告警后，告警通知会以短信的形式同步发送至个人手机。 Dingding URL 在钉钉群组中可以添加机器人，添加完成后，会提供Webhook URL，将地址中 access_token 值配置到 Whaleal 个人中心页面，告警通知会同步发送至钉钉群组。 "},"whalelaPlatform/02-Usage/Account/Config.html":{"url":"whalelaPlatform/02-Usage/Account/Config.html","title":"Config","keywords":"","body":"Config Config 提供以下配置项： - Alert - TimeZone 账号配置,WAP账号配置是否接收告警通知,用户时区 a. 进入页面左侧导航栏 b. 点击 Account 选项按钮，选择 账户配置 选项 Alert 用户可以配置是否接收告警信息。 TimeCone 用户可以配置时区，用户监控数据时间展示。 "},"whalelaPlatform/02-Usage/Account/Users.html":{"url":"whalelaPlatform/02-Usage/Account/Users.html","title":"Users","keywords":"","body":"Users Users 提供以下操作： - Operation - Management - Server - MongoDB 用户管理,WAP用户管理可以配置账号权限,修改密码,删除用户等操作 a. 进入页面左侧导航栏 b. 点击 Account 选项按钮，选择 用户管理 选项 Operation WAP 可以为用户配置管理员权限，管理员可以执行删除用户的操作。 Management WAP 可以配置是否有权限创建Server、创建MongoDB。 Server WAP 提供了对服务器资源的访问限制。 MongoDB WAP 提供了对MongoDB资源的访问限制。 "},"whalelaPlatform/02-Usage/Project.html":{"url":"whalelaPlatform/02-Usage/Project.html","title":"Project","keywords":"","body":"Project 项目 MongoDB 的创建必须存在于一个项目中，你可以为每个项目添加用户和群集。一个项目可以包含多个用户和群集。 通过项目，你可以定义权限和访问控制，确保只有授权的用户能够访问和管理项目中的资源。此外，项目还支持多环境管理，使你能够在不同的项目中管理不同的 MongoDB 环境。 新建项目 创建Project,填写项目名称 成员 修改Project配置 可以修改添加相应的群集信息 点击 编辑 可以添加/删除 主机,成员,群集 删除Project 删除Project后,Project中的mongodb群集也会被删除掉 "},"whalelaPlatform/02-Usage/Server/EC2.html":{"url":"whalelaPlatform/02-Usage/Server/EC2.html","title":"EC2","keywords":"","body":"EC2 添加主机可以把mongodb部署到自己的资源环境中 添加主机 添加主机提供有两种方式可以选择,选择项目生成agentid后,按照提示的信息执行后点击确定, 1、方式一: 登陆服务器下载agent 执行脚本后再看agent程序是否启动 登陆WAP平台后查看 2、方式二: 需要手动安装java环境和插件 下载安装java环境 tar -zxvf jdk-11.0.9_linux-x64_bin.tar.gz -C /usr/local/ vi /etc/profile # 最后一行添加以下配置 export JAVA_HOME=/usr/local/jdk-11.0.9 export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin source /etc/profile # 查看当前版本 java --version 安装ioStat插件 yum install sysstat 下载agent包 启动后平台查看 "},"whalelaPlatform/02-Usage/Server/K8S.html":{"url":"whalelaPlatform/02-Usage/Server/K8S.html","title":"K8S","keywords":"","body":"K8S 在添加 k8s 主机之前，请确保已在平台中导入了相应的 Kubernetes 配置文件。 添加K8S 添加K8S主机,选择k8s,pod 名称 pod 个数以及每个pod的平均资源后点击确认 "},"whalelaPlatform/02-Usage/Server/HostInfos.html":{"url":"whalelaPlatform/02-Usage/Server/HostInfos.html","title":"HostInfos","keywords":"","body":"Host information Host information 有以下内容： - 主机基本信息 - 主机更新与移除 - 主机详情与操作 主机基本信息 主机的基本信息展示 a.主机名称 b.系统信息 c.主机内核 d.主机agent存活时长 e.主机状态 f.针对主机的操作 主机更新与移除 对主机进行脱离纳管与更新主机信息 a.脱离纳管即移除主机，详情操作--> RemoveHost b.更新主机信息是将主机信息再次获取，之后更新页面内容。其主要获取内容有主机的静态信息与其监控数据与主机状态。 (由于主机异常宕机，手动重启后前端不会直接更新主机的状态，点击更新主机信息后将刷新主机状态) 主机详情与操作 点击主机名称进入主机信息页面查看主机详情与操作 a.主机信息 主要展示主机的一些基本静态信息 b.监控 监控信息是将 MEMORY,CPU,NET,DISKIO 的一些信息进行图形化的显示。 （1）处可以选择显示不同时间范围内的图形数据，或显示时间范围内不同颗粒度的图形数据。 （2）处可通过点击图形按钮进行数据的隐藏与显示 （3）处点击指标名称右边问号图标,可以查看指标详细信息 c.日志 日志是对主机的活动进行记录，其中包括操作者的操作，定时执行的任务等。显示具体的执行事件、事件执行的状况与执行的具体内容。 （1）处是对日志的筛选功能，比如只看某时间段或某类型或具有某内容的日志信息。 （2）处为搜索到的日志信息在前端页面进行展示。 d.命令 命令即对主机层面的操作或对mongo集群的操作，其操作状态、内容、事件、结果与操作事件等一同显示。 操作MSG：显示操作的功能，包括主机操作与人为操作。 状态：操作不同功能时各阶段的状态（实时更新）。 内容：点击查看详情可以查看到集群的详细内容等。 事件：事件包括主机的操作事件与操作者的操作事件（在前端页面的操作会有事件组日志，可点击查看详情查看事件的执行过程）。 （1）处对是过滤条件的设置，可以模糊查询MSG内容与对时间范围内的命令进行显示。 （2）处点击查看详情可显示JSON格式的命令详细信息。 （3）处点事件组日志可查看详细的事件执行情况。 "},"whalelaPlatform/02-Usage/Server/RemoveHost.html":{"url":"whalelaPlatform/02-Usage/Server/RemoveHost.html","title":"RemoveHost","keywords":"","body":"Remove Host Remove Host 分为以下两部分操作内容： - Prerequisites - Procedure 对主机在平台进行移除，该操作只是不将主机在平台上进行纳管 Prerequisites 在移除主机之前检查平台上是否还有关于该主机的任务没有完成。 Procedure Step-1. 进入导航目录 a.点击Server导航栏进入主机页面 b.右侧操作点击脱离纳管（或直接使用命令行将agent进程kill掉,谨慎操作） Step-2. 脱离完成检查主机agent进程是否关闭 a.脱离纳管后该主机的agent进程将会被关闭，Whaleal平台主机列表将不显示此主机。同时该主机相关的MONGODB节点的状态同步改为“主机脱离纳管” b.agent进程被kill掉后，主机被强制脱离纳管，在平台页面将不显示此主机。 "},"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateReplicaSet.html":{"url":"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateReplicaSet.html","title":"CreateReplicaSet","keywords":"","body":"Create ReplicaSet Create ReplicaSet 分为以下两部分操作内容： - Prerequisites - Procedure MongoDB ReplicaSet 是一组MongoDB实例的集合，其中包括一个主节点和多个从节点。主节点处理写入操作，并将数据复制到从节点，从而提供数据冗余和高可用性。如果主节点不可用，系统会自动选择新的主节点，确保系统的持续运行和故障恢复。ReplicaSet 部署方式提供高可用机制。推荐生产中使用。 使用 WAP 可以创建 ReplicaSet ，可以添加 ReplicaSet 节点，升降级。 Prerequisites 在部署 ReplicaSet 前必须确保 Host 已被 WAP 管理。若没有，请先添加EC2或添加K8S。 在部署 ReplicaSet 前必须确保 WAP 中有可使用的 MongoTar。若没有，请先上传 MongoTar。 Procedure 1、进入导航目录 a. 点击 MongoDB 选项按钮 b. 选择 MongoList 选项，页面展示所有用户可操作 MongoDB Cluster 2、创建 ReplicaSet a. 点击右侧 创建项目 按钮 b. 选择 复制集 选项 3、配置 ReplicaSet 复制集配置 配置项 值 所属项目 选择所属项目的名称 复制集名称 ReplicaSet 配置中 replSetName 是否开启认证 未开启任何认证: 不设置用户密码 账号和密码: 开启认证并设置用户密码 账号和密码且CA证书: 开启认证设置用户密码并使用CA证书 版本号 选择创建 mongodb 版本所对应 MongoTar 成员配置 配置项 值 成员 复制集成员类型：成员节点：复制集中承载数据的节点，具有投票权，可以被选举为主节点隐藏节点：复制集中承载数据的节点，具有投票权，复制集配置参数为 hidden隐藏延迟节点：复制集中承载数据的节点，具有投票权，复制集配置参数为 slaveDelay and hidden 主机名 选择部署 ReplicaSet 节点 所在主机 端口 节点所使用端口 投票 复制集选举期间的投票数 优先级 复制集选举期间的优先级，优先级为0，则节点不能被选举为主节点 延迟 节点落后于主节点的时间（单位：秒），仅用于成员为 隐藏延迟节点 构建索引 true：MongoDB构建索引false：MongoDB不构建索引 数据目录 ReplicaSet 数据文件存储目录（绝对路径） 日志文件 ReplicaSet 日志输出文件 Add 添加新成员 集群配置 配置项 值 Protocol Version 复制集所用复制协议版本 Chaining Allowed true：允许从 secondary 节点复制数据false：不允许从 secondary 节点复制数据 Write Concern Majority Journal Default 是否写入多数节点后返回 Heartbeat Timeout(secs) 成员节点间心跳检测时间 Election Timeout(ms) 成员节点与主节点不可达时，检查时间 CatchUp Timeout(ms) 新选举出的主节点与最近的写操作的追赶时间 CatchUp Takeover Delay(ms) 成员节点领先主节点后，等待主节点时间 高级配置 a. 点击 Add Option 按钮 b. 选择添加启动配置项，点击 确定 按钮添加 c. 设置 配置选项 值 4、创建 点击 创建 按钮，创建 ReplicaSet。 "},"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateShardedCluster.html":{"url":"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateShardedCluster.html","title":"CreateShardedCluster","keywords":"","body":"Create Sharded Cluster Create Sharded Cluster 分为以下两部分操作内容： - Prerequisites - Procedure MongoDB Sharded Cluster是一种用于扩展MongoDB数据库性能和容量的解决方案。它通过将数据分散存储在多个服务器上来实现横向扩展，从而提高了读取和写入操作的性能，并允许存储更大量的数据。Sharded Cluster 部署方式提供高可用机制 与 水平拓展。推荐生产中使用。 使用 Whaleal Platform 可以创建 Sharded Cluster ，可以添加节点，升降级。 Prerequisites 在部署 Sharded Cluster 前必须确保 Host 已被 WAP 管理。若没有，请先添加EC2或添加K8S。 在部署 Sharded Cluster 前必须确保 WAP 中有可使用的 MongoTar。若没有，请先上传 MongoTar。 Procedure 1、进入导航目录 a. 点击 MongoDB 选项按钮 b. 选择 MongoList 选项，页面展示所有用户可操作 MongoDB Cluster 2、创建 ReplicaSet a. 点击右侧 创建项目 按钮 b. 选择 分片 选项 3、配置 Sharded Cluster 分片集群配置 配置项 值 所属项目 选择所属的Project 集群名称 分片集群名 是否开启认证 未开启任何认证: 不设置用户密码 账号和密码: 开启认证并设置用户密码 账号和密码且CA证书: 开启认证设置用户密码并使用CA证书 版本 选择创建 Standalone 版本所对应 MongoTar 成员配置 Shard Settings 配置项 值 成员 成员类型：成员节点：承载数据的节点，具有投票权，可以被选举为主节点隐藏节点：承载数据的节点，具有投票权，配置参数为 hidden隐藏延迟节点：承载数据的节点，具有投票权，配置参数为 slaveDelay and hidden 主机名 选择部署 Sharded Cluster 节点 所在主机 端口 节点所使用端口 投票 复制集选举期间的投票数 优先级 复制集选举期间的优先级，优先级为0，则节点不能被选举为主节点 延迟 节点落后于主节点的时间（单位：秒），仅用于成员为 隐藏延迟节点 构建索引 true：MongoDB构建索引false：MongoDB不构建索引 数据目录 Sharded Cluster 节点数据文件存储目录（绝对路径） 日志文件 Sharded Cluster 节点日志输出文件（绝对路径） add 添加成员节点 add Shard 添加一个的shard集群 config Settings 配置项 值 成员 成员类型：成员节点：承载数据的节点，具有投票权，可以被选举为主节点隐藏节点：承载数据的节点，具有投票权，配置参数为 hidden 主机名 选择部署 Sharded Cluster 节点 所在主机 端口 节点所使用端口 投票 复制集选举期间的投票数 优先级 复制集选举期间的优先级，优先级为0，则节点不能被选举为主节点 延迟 节点落后于主节点的时间（单位：秒），仅用于成员为 隐藏延迟节点 构建索引 true：MongoDB构建索引false：MongoDB不构建索引 数据目录 Sharded Cluster 节点数据文件存储目录（绝对路径） 日志文件 Sharded Cluster 节点日志输出文件（绝对路径） add 添加成员节点 Mongos Settings 配置项 值 主机名 选择部署 mongos 节点 所在主机 端口 节点所使用端口 日志文件 Mongos 日志输出文件（绝对路径） add 添加mongos节点 集群配置 配置项 值 Protocol Version 复制集所用复制协议版本 Chaining Allowed true：允许从 secondary 节点复制数据false：不允许从 secondary 节点复制数据 Write Concern Majority Journal Default 是否写入多数节点后返回 Heartbeat Timeout(secs) 成员节点间心跳检测时间 Election Timeout(ms) 成员节点与主节点不可达时，检查时间 CatchUp Timeout(ms) 新选举出的主节点与最近的写操作的追赶时间 CatchUp Takeover Delay(ms) 成员节点领先主节点后，等待主节点时间 高级配置 a. 点击 Add Option 按钮 b. 选择添加启动配置项，点击 确定 按钮添加 c. 设置 配置选项 值 4、创建 点击 创建 按钮，创建 Sharded Cluster。 "},"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateStandalone.html":{"url":"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/CreateStandalone.html","title":"CreateStandalone","keywords":"","body":"Create Standalone Create Standalone 分为以下两部分操作内容： - Prerequisites - Procedure 使用 WAP 可以创建 Standalone 。Standalone 所有的数据都存储在该单节点上，没有数据分布或数据冗余。可用于测试与开发，不推荐在生产环境中使用 Standalone 部署方式，Standalone 部署方式没有高可用机制。对于生产环境中推荐使用 ReplicaSet 部署方式。 Prerequisites 在部署 Standalone 前必须确保 Host 已被 WAP 管理。若没有，请先添加EC2或添加K8S。 在部署 Standalone 前必须确保 WAP 中有可使用的 MongoTar。若没有，请先上传 MongoTar。 Procedure 1、进入导航目录 a. 点击 MongoDB 选项按钮 b. 页面展示所有用户可操作 MongoDB Cluster 2、创建 Standalone a. 点击右侧 创建项目 按钮 b. 选择 单节点 选项 3、配置 Standalone 在页面配置以下配置项 配置项 值 所属项目 选择所属的Project 主机名 选择主机 端口 Standalone mongodb 使用端口 数据目录 Standalone 数据文件存储目录（绝对路径） 日志文件 Standalone 日志输出文件（绝对路径） 版本 选择创建 Standalone 版本所对应 MongoTar 认证 未开启任何认证: 不设置用户密码 账号和密码: 开启认证并设置用户密码 账号和密码且CA证书: 开启认证设置用户密码并使用CA证书 添加配置选项 可以添加mongodb 的参数配置 4、配置选项 a. 点击 添加配置选项 按钮 b. 选择添加启动配置项，点击 确定 按钮添加 c. 设置 配置选项 值 5、创建 点击 创建 按钮，创建 Standalone。 "},"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/ExistingMongoDBDeployment.html":{"url":"whalelaPlatform/02-Usage/MongoDB/CreateDeployment/ExistingMongoDBDeployment.html","title":"ExistingMongoDBDeployment","keywords":"","body":"Existing MongoDB Deployment Existing MongoDB Deployment 可以执行以下操作： - Existing MongoDB Deployment 纳管主机 WAP 提供了 MongoDB 纳管服务的整解决方案，让用户能够将自己的 MongoDB 群集托管到WAP平台上。WAP提供简化的管理、监控 MongoDB 数据库环境，还包括自动化的备份和告警诊断等功能，以确保数据的安全和可靠性。 进入导航目录 注意: 纳管的MongoDB主机,不能修改主机名称 修改后会影响WAP平台对主机的管理. a. 点击 MongoDB 选项按钮 b. 选择 MongoList 选项，页面展示所有用户可操作 MongoDB Cluster c. 点击 创建项目 选项按钮，选择 纳管 通过配置集群中任意一个节点信息，Whaleal Platform 会发现集群中所有节点，实现对所有节点进行的监控、管理。 配置以下配置项 配置项 值 群集名 mongodb群集名称 所属项目 选择所属项目的名称 主机名 选择部署mongodb节点 所在主机 端口 mongodb 使用端口 用户名 mongodb用户 密码 mongodb用户密码 版本号 mongodb的版本号 配置完成点击 提交 按钮 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Connecttothecluster.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Connecttothecluster.html","title":"Connecttothecluster","keywords":"","body":"Connect to the cluster 连接到MongoDB a. 点击 MongoDB 选项按钮 b. 选择你要连接群集点击 操作 连接集群 c. 提供的3种连接方式案例,你可以选择相应的连接方式 d. 点击测试连接,可以获取连接信息 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Updateclusterinformation.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Updateclusterinformation.html","title":"Updateclusterinformation","keywords":"","body":"Update cluster information 更新群集信息 a. 点击 MongoDB 选项按钮 b. 选择你要连接群集点击 操作 更新群集信息 d. 点击确认 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterstartupshutdown.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterstartupshutdown.html","title":"Clusterstartupshutdown","keywords":"","body":"Cluster startup shutdown 通过操作启动/关闭功能,对整个集群进行启动/关闭操作,针对的是整个集群内的所有节点 如果需要关闭/启动集群中的某个节点请参考节点操作 1、启动MongoDB群集 a. 点击 MongoDB 选项按钮 b. 选择你要启动群集点击 操作 启动 c. 点击确认 ,启动集群内的所有mongodb服务 2、关闭MongoDB群集 a. 点击 MongoDB 选项按钮 b. 选择你要关闭群集点击 操作 关闭 c. 点击确认,关闭集群内的所有mongodb服务 3、重启MongoDB群集 a. 点击 MongoDB 选项按钮 b. 选择你要重启群集点击 操作 重启 c. 点击确认,重启集群内的所有mongodb服务 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/outofmanagement.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/outofmanagement.html","title":"outofmanagement","keywords":"","body":"out of management 脱离纳管 群集脱离纳管后,会从wap平台中删除,服务器主机中的mongodb还存在 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 脱离纳管 c. 点击确认后脱离纳管 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterrename.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterrename.html","title":"Clusterrename","keywords":"","body":"Cluster rename 集群名称重命名 注意: 重命名只是修改WAP平台上的群集名,不修改MongoDB内部群集名称 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 重命名 c. 输入新的集群名称,点击 确认 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Versionchanges.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Versionchanges.html","title":"Versionchanges","keywords":"","body":"Version changes 版本变更 MongoDB 版本升级和降级功能，支持单实例、复制集和分片集群的升级和降级操作 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 版本变更 c. 选择升级或降级,版本号是否开启备份 d. 选择完成后点击提交 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterchanges.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Clusterchanges.html","title":"Clusterchanges","keywords":"","body":"Cluster changes 群集变更 在群集变更中,包括修改配置参数,复制集添加节点,分片集群添加shard 等变更操作 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 群集变更 c. 修改配置选项内的参数 d. 添加配置选项 e. 配置完成后点击 修改 复制集添加/删除成员 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 群集变更 添加复制集成员 点击成员配置 +add 添加新的成员 配置完成后点击 修改 删除复制集成员 点击右边 删除 按钮 配置完成后点击 修改 分片集群添加/删除shard a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 群集变更 添加分片shard 点击成员配置 +add shard 添加新shard群集 配置完成后点击下方 修改 删除分片shard 点击右边 删除 按钮 配置完成后点击下方 修改 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/clusterconversion.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/clusterconversion.html","title":"clusterconversion","keywords":"","body":"cluster conversion 群集转换 WAP 平台支持简便的群集转换功能，用户可以轻松将单实例 MongoDB 转换为 MongoDB 复制集，或者将 MongoDB 复制集转换为分片集群。 单实例转换为复制集 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 转为复制集 c. 输入复制集名称 d. 输入完成后点击 确认 开始转换 复制集转换为分片 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 转为分片集群 c. 填写配置 复制集转换为分片,必须配置一个config和mongos集群 Shard（分片） Shard是MongoDB中存储数据的单个节点或副本集,分片集群中可以有一个或多个Shard Config Config Servers存储了关于分片集群的元数据信息，包括分片键范围和数据的分片位置等信息。分片集群通常包含3个Config 以确保高可用性。 Mongos（MongoDB路由器) Mongos是客户端与分片集群交互的接入点。它接收来自客户端的操作请求，并将这些请求路由到正确的Shard上执行。 d. 配置完成后点击 保存 开始复制集转换为分片 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Turnonmonitoring.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Turnonmonitoring.html","title":"Turnonmonitoring","keywords":"","body":"Turn on monitoring 开启监控 在创建完集群后,默认是开启监控的,开启监控后才能使用mongodb监控功能来监控你的群集 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 开启监控 c. 点击 确认 开启监控 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Enablelogcollection.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/clusteroperations/Enablelogcollection.html","title":"Enablelogcollection","keywords":"","body":"Enable log collection 开启日志收集 a. 点击 MongoDB 选项按钮 b. 选择群集点击 操作 开启日志收集 c. 点击 确认 开启日志收集 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/UserManagement.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/UserManagement.html","title":"UserManagement","keywords":"","body":"User Management 创建MongoDB群集用户 在 MongoDB 中创建用户是为了提供访问控制和安全性，以确保只有经过授权的用户才能访问数据库。 a. 点击 MongoDB 选项按钮 b. 点击你要创建用户的群集名称 c. 点击安全管理 d. 点击用户管理,创建用户 配置以下配置 配置项 值 用户名 添加的用户名 密码 配置密码,可以选择随机生成 角色 db; 认证库role; 选择权限角色 认证机制 选择认证机制,可以选择SCRAM-SHA-1和SCRAM-SHA-256 身份验证限制 客户端来源限制服务器地址限制 e. 配置完成后单击 确认 创建用户 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/Certification.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/Certification.html","title":"Certification","keywords":"","body":"Certification management 修改认证管理 您可以通过修改身份验证方式来改变用户在连接到数据库时的认证方式 a. 点击 MongoDB 选项按钮 b. 点击你要修改认证的群集名称 c. 点击安全管理 d. 点击认证管理 配置项 描述 未开启任何认证 不开启认证,不设置用户密码 账号和密码 开启认证并设置用户密码 账号和密码且CA证书 开启认证设置用户密码并使用CA证书 e. 选择配置项后,点击确认 修改认证方式 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/MonitorMongoDB.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/MonitorMongoDB.html","title":"MonitorMongoDB","keywords":"","body":"Monitor MongoDB 监控MongoDB 监控 MongoDB 是确保数据库系统健康和性能的关键方面之一。通过监控 MongoDB 关键指标和资源利用情况，您可以及时发现潜在问题并采取适当的措施来解决它们，以确保系统的稳定性和可靠性。 使用监控之前要先查看群集是否开启监控 a. 点击 MongoDB 选项按钮 b. 点击你要监控的群集名称 c. 点击查看监控 d. 查看监控 e. 选择监控指标 f. 选择监控时间范围 "},"whalelaPlatform/02-Usage/MongoDB/ManageCluster/Nodeoperations.html":{"url":"whalelaPlatform/02-Usage/MongoDB/ManageCluster/Nodeoperations.html","title":"Nodeoperations","keywords":"","body":"节点操作 针对集群中的某个节点进行操作管理,包括启动关闭重启,脱离纳管,成为主节点等操作 1、更新节点信息 a. 点击 MongoDB 选项按钮 b. 点击你要操作的集群名称名称 c. 点击 操作 选择 更新节点信息 d. 点击 确定 ,进行更新节点信息 2、启动 仅启动当前选择节点 a. 点击 操作 选择启动 b. 点击 确定,进行启动 3、关闭 仅关闭当前选择节点 a. 点击 操作 选择关闭 b. 点击 确定,进行关闭 4、重启 仅重启当前选择的节点 a. 点击 操作 选择重启 b. 点击确定 ,进行重启操作 5、脱离纳管 脱离纳管,针对选择的节点,从平台中脱离管理,不影响服务器中的mongo集群节点 a. 点击 操作 选择脱离纳管 b. 点击确定 ,进行脱离纳管 6、成为主节点 可以把选择的成员节点设置升级成为主节点 a. 点击 操作 选择成为主节点 b. 点击 确定 ,进行升级为主节点 "},"whalelaPlatform/02-Usage/Backuprestore/Backup.html":{"url":"whalelaPlatform/02-Usage/Backuprestore/Backup.html","title":"Backup","keywords":"","body":"Backup 1、开启备份 WAP 可以将 MongoDB 数据备份存储到 Linode S3、Amazon S3 中，以便安全可靠地存储和管理你的数据。 a. 进入页面左侧导航栏 b. 点击 Backup 选项按钮,显示当前所以的备份策略 c. 点击 Create Repository 创建备份 配置项 值 Name 当前备份的名称 cluster 选择你要备份的mongodb集群 Storage Location 选择你要存储备份的位置 Cloud Bucket 你存储的s3桶名 Path Prefix 路径 Access Key 访问密钥 Secret Key 密钥 Endpoint 存储桶的区域名称 Task snapshots every 任务快照间隔 Recover data from 备份数据保存天数 d. 配置完成后,点击 确认 创建备份任务 2、功能介绍 a. 备份记录 点击后 可以看到每次备份的记录 点击 事件日志 可以看到备份的详细日志记录 b. 开启备份 点击 运行备份 后会立即运行一次备份任务 c. 停止备份 点击 stop 后,不再执行此备份任务,如果需要开启点击 start 后会再次开启备份 d. 删除备份 点击 删除备份 后此备份策略会被彻底删除,不会在backup中存在 "},"whalelaPlatform/02-Usage/Backuprestore/Restore.html":{"url":"whalelaPlatform/02-Usage/Backuprestore/Restore.html","title":"Restore","keywords":"","body":"Restore 备份恢复 恢复数据,使用已经备份的数据就行恢复mongodb数据 a. 进入页面左侧导航栏 b. 点击 Backup — Restore 选项按钮,显示当前所有的备份数据 c. 点击右侧 Restore 选择恢复配置 配置信息 配置项 描述 backUpStrategy 选择备份策略 cluster 选择需要恢复到的群集名称 Restore Type 选择恢复类型snapshot: 选择要恢复的快照进行恢复 point in time: 选择要恢复的时间点进行恢复 e. 配置完成后点击 run Restore 开始恢复 f. 快照操作 download 下载快照到本地 delete 删除备份快照文件 "},"whalelaPlatform/02-Usage/Alert.html":{"url":"whalelaPlatform/02-Usage/Alert.html","title":"Alert","keywords":"","body":"Alert 告警 告警,主机和 MongoDB 监控告警确保系统稳定运行的关键措施。通过监控主机资源利用率、服务状态，以及监控 MongoDB 数据库的性能、状态、空间利用率等方面，及时发现异常情况并触发告警，帮助管理员及时采取措施，保障系统和数据库的正常运行。 告警信息 a. 进入页面左侧导航栏 b. 点击 alert 选项按钮,显示当前的告警信息 告警配置 a. 点击 Alert Settings 配置告警 b. 选择你要配置的告警类型 host告警, 可以配置主机层面 资源情况的监控告警 mongo 告警, 可以配置mongo 层面的性能监控告警 Project告警,配置Project中包含的所有主机和mongo进行配置 c. 配置完成点击 保存 "},"whalelaPlatform/02-Usage/Diagnose/Info.html":{"url":"whalelaPlatform/02-Usage/Diagnose/Info.html","title":"Info","keywords":"","body":"Info Info页面 Info页面，提供集群信息、复制集配置和节点状态。管理员可以在此查看集群概要信息、复制集配置（如主从节点设置）以及每个节点的详细信息，帮助管理员全面了解 MongoDB 环境的状态。 群集信息,包含群集中所有的信息 复制集配置,可以看到当前复制集的配置信息 节点状态 "},"whalelaPlatform/02-Usage/Diagnose/Health.html":{"url":"whalelaPlatform/02-Usage/Diagnose/Health.html","title":"Health","keywords":"","body":"Health 快速诊断 快速诊断 包括WAP平台和agent主机的延迟（WhalealLag）、主机的基本信息（HostInfo）、更详细的实时主机资源利用情况（RealHostInfo）、MongoDB 实例的基本信息（MongoInfo）以及更详细的实时 MongoDB 实例信息（RealMongoInfo）。这些信息可以帮助评估 MongoDB 的性能、可用性和健康状况，从而采取相应的优化和调整措施。 开始诊断 a. 点击 开始诊断 , 就开始进行诊断了,等待诊断完成 b. 诊断完成后,下面可以查看诊断结果 "},"whalelaPlatform/02-Usage/Diagnose/Performance.html":{"url":"whalelaPlatform/02-Usage/Diagnose/Performance.html","title":"Performance","keywords":"","body":"Performance 实时监控 Performance 实时监控可以实时跟踪和记录 MongoDB 数据库系统的性能指标,通过实时监控，管理员可以及时发现潜在的性能问题，并采取相应的措施进行优化，确保数据库系统能够持续高效地运行。 a. 选择你的集群,集群节点 b. 点击 实时诊断 监控对比 可以查看一个集群中不同的节点监控指标差异对比 a. 点击 监控对比 b.可以选择监控的时间范围,节点以及指标类型 "},"whalelaPlatform/02-Usage/Diagnose/LogVis.html":{"url":"whalelaPlatform/02-Usage/Diagnose/LogVis.html","title":"LogVis","keywords":"","body":"LogVis LogVis 可以查看选择的MongoDB 的日志信息,包括筛选出的审计日志,慢日志分析等,需要开启日志收集 查看日志 a. 在LogVis选择群集 节点后 点击查询 慢日志分析 a. 点击统计 b. 在下面可以查看慢日志分析信息 下载审计日志 a. 点击 审计日志 下载审计日志到本地 "},"whalelaPlatform/02-Usage/Diagnose/ExplainPlan.html":{"url":"whalelaPlatform/02-Usage/Diagnose/ExplainPlan.html","title":"ExplainPlan","keywords":"","body":"ExplainPlan 执行计划 Explain Plan（执行计划），用于解释查询语句的执行方式和优化策略,通过分析执行计划，管理员可以了解查询的执行情况，发现潜在的性能瓶颈，并进行优化。可以根据执行计划优化查询语句、创建合适的索引或调整集合的存储结构，以提高查询效率和整体性能。 执行explain a. 选择群集和节点 输入数据库表,查询条件后点击Explain b. 可以查看到当前explain的结果 "},"whalelaPlatform/02-Usage/Message.html":{"url":"whalelaPlatform/02-Usage/Message.html","title":"Message","keywords":"","body":"Message 消息通知 消息通知 所有平台相关的信息,包含了用户登陆信息、平台操作信息以及可能的告警信息等关键内容，旨在及时提醒相关方有关系统或平台的重要动态。通过这些通知，用户能够快速了解系统的活动情况，以便及时采取必要的行动。 查看已读的通知信息 "},"whalelaPlatform/02-Usage/Audit.html":{"url":"whalelaPlatform/02-Usage/Audit.html","title":"Audit","keywords":"","body":"Audit 审计列表 平台列表功能详细记录关键信息，包括用户操作、请求方式、群集操作以及用户登录等重要内容，这些记录为管理员提供了全面的数据视图，及时发现任何潜在的安全风险或异常行为。 根据成员筛选 选择审计等级 "},"whalelaPlatform/02-Usage/Settings/UploadMongoDBTARfile.html":{"url":"whalelaPlatform/02-Usage/Settings/UploadMongoDBTARfile.html","title":"UploadMongoDBTARfile","keywords":"","body":"UploadMongoTar 介质包管理 Whaleal Platform 创建集群，需使用 TGZ 文件。其他文件类型暂不支持。 1、查看当前TGZ 文件 a. 点击 Settings 选择 介质包管理 页面展示所有可用于创建集群 TGZ 文件 2、上传文件 a. 点击 点击上传 b. 选择待上传的 TGZ 文件 c. 点击 确定 d. 等待上传进度条完成，上传成功 3、删除文件 a.点击删除文件 b. 点击 确定 "},"whalelaPlatform/02-Usage/Settings/Emailconfiguration.html":{"url":"whalelaPlatform/02-Usage/Settings/Emailconfiguration.html","title":"Emailconfiguration","keywords":"","body":"Email configuration 邮件配置 这里可以配置邮件,告警信息会通过配置的邮箱发送给用户 a. 点击 Settings 选择 邮件配置 b. 点击 编辑 ,修改配置内容后点击 保存 "},"whalelaPlatform/02-Usage/Settings/Collectiongranularityconfiguration.html":{"url":"whalelaPlatform/02-Usage/Settings/Collectiongranularityconfiguration.html","title":"Collectiongranularityconfiguration","keywords":"","body":"Collection granularity configuration 采集颗粒度配置 采集颗粒度配置可以在监控中设定数据采集的频率,修改采集颗粒度配置,可以修改主机、MongoDB的颗粒度配置,以及MongoDB节点日志保留的时间 点击 编辑 ,修改配置后 点击 保存 "},"whalelaPlatform/02-Usage/Settings/Kubernetesconfiguration.html":{"url":"whalelaPlatform/02-Usage/Settings/Kubernetesconfiguration.html","title":"Kubernetesconfiguration","keywords":"","body":"Kubernetes configuration Kubernetes配置 WAP平台支持云平台的Kubernetes,包括 Linode的K8S 、AWS EKS a. 点击 Settings 选择 Kubernetes配置 b. 填写群集名称,选择类型,配置k8s文件 c. 配置完成后点击 保存 "},"whalelaPlatform/02-Usage/Settings/InspectingS3configuration.html":{"url":"whalelaPlatform/02-Usage/Settings/InspectingS3configuration.html","title":"InspectingS3configuration","keywords":"","body":"Inspecting S3 configuration 巡检S3配置 a. 点击 Settings 选择 巡检s3配置 b. 点击 编辑,配置完成后点击 保存 "},"whalelaPlatform/02-Usage/Support/patrolinspection.html":{"url":"whalelaPlatform/02-Usage/Support/patrolinspection.html","title":"patrolinspection","keywords":"","body":"patrol inspection 巡检 对MongoDB数据库系统进行系统性的审查和评估，确保数据库的性能、安全性和可靠性、及时发现潜在问题并采取适当措施，巡检mongodb的文件保存在S3存储中 注意: 巡检前需要配置S3连接信息 a. 点击 巡检 填写巡检备注,和巡检日志时间范围 b. 配置完成后点击 确认 c. 点击 下载 下载巡检日志 "},"whalelaPlatform/03-UseCases/HowToFindBottleNeckinHost.html":{"url":"whalelaPlatform/03-UseCases/HowToFindBottleNeckinHost.html","title":"HowToFindBottleNeckinHost","keywords":"","body":"Find BottleNeck In Host Find BottleNeck In Host 可以通过以下操作完成： - Check the monitor - CPU - RAM - I/O Check the monitor ​ 在 Linux 上，主要瓶颈是内存 (RAM)、计算 (CPU) 或 I/O（磁盘操作）。在内存方面，速度可能是一个因素，如果内存已经用完了这是一个大问题。对于 CPU，如果使用的是较旧的硬件，每个 CPU 内核的工作速度都会慢很多，而且可能还不够。对于 I/O，从机械硬盘读取以及过多的磁盘写入可能是问题所在。 CPU ​ 查看 CPU 监控数据，检查 CPU 的使用情况。在应用提供服务期间，CPU 如果达到95%以上，内存 (Mem) 和交换 (Swp) 在正常使用范围内，证明CPU达到瓶颈。 ​ 如果应用程序或进程没有以正确的性能级别运行，并且看到 95% + CPU 利用率恒定，您可以执行以下操作： 紧急解决：为服务器增加 CPU 个数 排查问题：排查并定位应用程序，并进行相应的问题排查、解决 ​ 如果增加 CPU 个数后，CPU 使用率依旧在 95% 以上，但对应用服务提供了更好的性能、吞吐量，则考虑增加 CPU 解决问题，否则考虑排查应用程序中问题所在。 RAM ​ 查看 RAM 监控数据，如果 Memory 使用100%，而 Swap 使用 50%，则系统几乎肯定会进行大量交换。交换是磁盘与主存交换内容的过程（使用特殊的交换分区），因为Memory 使用 100%，一旦系统启动并继续交换，它将变得异常缓慢。 ​ 例如，可能有20%的内存正在使用，但还有大量的内存剩余。这可能表明操作系统已经将一些低频率使用的内存区域移到了磁盘上，以优化主存。由于仍然有大量内存是空闲的，所以这种情况没有问题。 I/O ​ 当我们观察监控数据时发现，CPU、RAM都没有达到瓶颈，接下来就要看一下 I/O 。 ​ 例如我们看到 SSD 中 I/O 不是很高，但是每秒向 HDD 中的读写 I/O 相当密集，在这种情况下就需要解决 I/O 问题，例如：停止一些重写入、升级 I/O系统、更换读写更快的 I/O 设备、或是更换更快的 SSD。 "},"whalelaPlatform/03-UseCases/HowToFindBottleNeckinMongoDB.html":{"url":"whalelaPlatform/03-UseCases/HowToFindBottleNeckinMongoDB.html","title":"HowToFindBottleNeckinMongoDB","keywords":"","body":"Find BottleNeck In MongoDB Find BottleNeck In MongoDB 分为以下两部分： - Find BottleNeck - Adjust and Optimize Find BottleNeckin 通过MongoDB监控数据查看节点每秒读取数、执行命令、读写等待队列数、网络吞吐、连接数等指标。 通过该性能监控数据可以了解mongodb实例整体连接数、读写请求数及读写比例（有的业务是读请求比重高，有的业务写请求比重较高）。 需要重点关注读写等待队列数量。如果该值超过3或者超过cpu 核数，则代表cpu资源比较吃紧，业务请求已经开始积压。 通过分析MongoDB实时诊断数据，确认请求时间较高的表，根据二八定理，我们可以选择对于占用请求时间超过80%的热表慢查询进行针对性的性能分析和优化。 通过实施诊断数据，查看当前mongodb实例具体执行的慢查询请求。对于聚合分析请求较多业务库，往往不时有超过100秒的聚合分析语句正在执行。导致CPU和IO资源非常紧张。这时为了不影响正常业务的进行，只能暂时选择将很多堆积的慢查询语句先杀掉。 Adjust and Optimize mongodb 分片集群优化思路： 分片集群中出现某个分片负载特别高的情况。（往往是某个分片负载高，如果是多个分片节点负载都高，则需要逐个进行分析） Part-1：首先通过MongoDB监控页面了解系统大致并发负载和读写比例，观察系统具体瓶颈所在。 Part-2：如果负载只是集中出现在某一个节点上，则通过实时诊断数据记录操作比较频繁的表。 Part-3：通过实施诊断数据分析业务高峰期间出现的TOP10慢查询。 Part-4：定位需要优化的目标表,并进行查询优化。 ​ 通常 Part-2 和 Part-3 会出现很多相同的表。因为操作比较频繁和慢查询往往存在相同的一些表。这些表就是我们需要优化的目标。 ​ mongodb 分片优化大致有以下几点： ​ a. 查看表分片键、数据分布、数据总量、数据占用空间等信息。着重看数据分片键设置是否合理、数据分布是否均匀； ​ b. 诊断数据中打印出来的慢查询信息中有每个慢查询的查询条件。确认慢查询表上是否有合适的索引满足查询条件执行。需要结合explain() 分析慢查询的具体执行计划。 ​ c. 选取业务高峰阶段的mongodb实例原始日志，过滤慢查询表相关的原始查询语句。记录这些原始查询语句，方便后续与开发同事沟通，看能否从业务场景上进行相应的优化。 ​ d. 对于日志、事件、会话信息等日志类型的表，可以按照业务需求，根据事件字段，只保留一定时间内的有效数据。通常这要与开发业务沟通清楚。确认保留时间后，可以利用mongodb TTL索引特性，在特定时间字段上创建索引，设置记录过期时限。 Part-5：架构上做读写分离优化。 ​ 如果在 Part-3 找出来的 TOP10 慢查询不少是能有效利用索引的简单查询，正常情况下，执行应该很快（200ms之内）。 ​ 如果不能解决，则需要考虑在架构上做读写分离的优化。因为热点表高并发的读写会让cpu 忙不过来，导致原本正常的查询都出现阻塞。 ​ 总之，mongodb 优化关键之处是找出系统瓶颈和问题根源。定位出需要优化的目标表后，简单地加个索引或者做个读写分离，性能问题往往就迎刃而解。 "},"whalelaPlatform/04-Troubleshooting/AddHostFaild.html":{"url":"whalelaPlatform/04-Troubleshooting/AddHostFaild.html","title":"AddHostFailed","keywords":"","body":"Host Issues agent jar不能运行 当agent jar不能运行时首先检查自己主机有没有安装java环境，如没有安装则进行java环境配置。 主机异常宕机 每个被纳管进来的主机平台都会实时获取其主机状态，当平台显示主机异常宕机时首先查看主机是否正常运行，若主机异常关机等则进行物理主机的维修。 如果主机正常运行并没有宕机则查看agent进程是否正常运行，若进城崩溃或被异常kill进行重新启动即可。 不能连接Server 查看Server端是否正常 查看agent id是否正确并并重新运行 主机内存不足 当在主机创建集群时默认做大可用资源的二分之一，若不进行配置当集群创建过多时则会引起主机的崩溃宕机。 在创建集群时在高级配置中配置合适大小的cache size，以防止资源的占用与浪费。 "},"whalelaPlatform/04-Troubleshooting/LoginFaild.html":{"url":"whalelaPlatform/04-Troubleshooting/LoginFaild.html","title":"LoginFailed","keywords":"","body":"Login Issues 登录页面打不开 确保自身电脑已配置域名解析。在添加主机预配置处有配置域名解析详情。 登陆失败 登陆失败时首先检查网络是否正常，其次检查账号密码是否填写正确，其次若忘记密码可让管理员进行修改密码。 "},"whalelaPlatform/04-Troubleshooting/MongoFaild.html":{"url":"whalelaPlatform/04-Troubleshooting/MongoFaild.html","title":"MongoFailed","keywords":"","body":"Mongo Issues 创建失败 查看主机是否运行正常。 查看节点使用端口是否被占用。 查看数据目录是否有其他集群数据。 复制集初始化失败 当出现复制集初始化失败时，手动初始化即可。 复制集添加节点失败 添加节点时确保使用端口未被占用。 查看数据存放目录是否有其他集群数据内容。 版本升降级失败 升降级时确保目标版本高于当前版本，同理降级时确保目标版本低于当前版本。 版本的升降级不能进行跨版本操作，升降级只能在相邻版本下进行操作。 （例如不能直接将4.2版本升级成5.0，可以将4.2升级为4.4之后4.4升级为5.0，降级同理不能不能直接将5.0降级为4.2版本，可将5.0降级为4.4之后4.4降级为4.2。） 复制集中仲裁节点升级失败，手动更换仲裁节点数据目录。 开关认证失败 当前认证的开关都是关于admin的操作，无其他库的认证开关。 其认证方式有三种未开启任何认证、账号和密码、账号和密码且CA证书 。 分片添加集群失败 一般集群的添加都要确保端口没有重复，同时data的目录内无其他集群的数据信息。 当前分片添加复制集config集群时不能添加仲裁节点与隐藏延时节点。 节点创建后显示无状态 点击操作更新节点信息即可。 集群中成员节点成为主节点后又变了回来 查看节点的优先级是否不同，当某个节点优先级较高时最终优先级较高的节点会成为主节点。 监控显示无数据 一些监控数据是在操作处开启才会进行数据的收集。 当前监控无数据，可进行时间范围的调整查看更多范围内的监控。 添加分片失败 排查原因是否端口或数据目录被专用，若被占用更换即可。 添加的主机与集群不能互通导致添加失败 关闭认证失败 集群不能对外服务，需要人工手动启动。 隐藏延时节点操作异常 当带有隐藏延时节点的集群认证开启时会出现操作异常，原因是主节点的状态需经过延时时间过后才同步至隐藏延时节点之上。 "},"whalelaPlatform/05-ReleaseNotes/releaseNote-2.0.0.html":{"url":"whalelaPlatform/05-ReleaseNotes/releaseNote-2.0.0.html","title":"ReleaseNote-2.0.0","keywords":"","body":"Whaleal Platform ChangeLog Whaleal Platform V2.0.0 Whaleal Platform V2.0.0。 其平台包含功能模块大致如下： 1.登录注册 注册 注册账号：账号注册时，无需验证手机号和邮箱正确性只验证基本格式与是否已存在，一般建议填写手机号（仅支持中国大陆手机号）和邮箱。 登录 登录方式：手机+密码，邮箱+密码，账号+密码。 2.首页 (Home) Host 显示主机、CPU、内存、磁盘的存活状态以扇形图形式展示。 Host Summary 显示CPU、Memory、Disk、NetIn、NetOut 前五的存详情数据，以图表的形式展示。 Mongo 显示Mongo节点、Mongo集群、Mongo集群类型的实时情况，以扇形图形式展示。 MongoDB Summary 显示Cluster 、Collection 、Crashed 、Qps 、Connection、Slowest 前五的存详情数据，以图表的形式展示。 3. 项目 (Project) 项目 你可以定义权限和访问控制，确保只有授权的用户能够访问和管理项目中的资源 4. 主机列表 (Server) 主机统计 页面将已被平台纳管的主机大致信息进行展示，同时可以对主机进行脱离纳管更新数据等操作。 添加主机 EC2 添加 EC2 主机 K8S 创建 k8s 主机,修改添加主机资源配置 主机信息 点击主机名称进入主机的详情页面页面内有主机的基本信息、监控、日志、命令、告警等。详情在HostInfos处有介绍 脱离纳管 对主机在平台进行移除 5.Mongo列表 (MongoDB) Mongo静态信息 页面展示已被纳管进平台的集群信息，也可对想要集群进行搜索定位，同时可以对集群进行不同操作。例如更新节点信息、启动、关闭、重启、脱离纳管、重命名等操作。 创建项目 点击创建项目按钮可以选择不同的集群类型在平台上进行创建。创建类型有单节点、复制集、分片等。也可将未被平台纳管的集群纳管到平台中来。 创建单节点详细步骤-->CreateStandalone 创建复制集详细步骤-->CreateReplicaSet 创建分片详细步骤-->CreateShardedCluster 纳管MongoDB步骤-->ExistingMongoDBDeployment Mongo集群操作 连接集群 更新集群信息 启动/关闭/重启集群 脱离纳管 重命名 版本变更 群集变更 群集转换 单节点转为复制集 复制集转为分片集群 开启监控 开启收集日志 Mongodb监控 点击群集名--> 点击查看监控,可以看到mongodb监控信息 安全管理 用户创建 创建mongodb用户 认证管理 修改mongodb用户的认证方式比如用户名密码,或者ca证书 节点操作 针对集群中的单个节点进行开启/关闭等操作 6.备份 (Backup) Backup 对mongodb进行备份,备份文件存储到S3中 Restore 通过备份文件进行恢复数据 7.告警 (Alert) 告警配置 添加告警配置,可以配置host告警、mongo告警、project告警 8.诊断 (Diagnose) 群集信息 (Info) info页面，提供集群信息、复制集配置和节点状态。管理员可以在此查看集群概要信息、复制集配置（如主从节点设置）以及每个节点的详细信息 快速诊断 (Health) 快速诊断出当前主机和MongoDB的资源以及配置信息,这些信息可以帮助评估 MongoDB 的性能、可用性和健康状况 实时监控 (Performance) 实时监控可以实时跟踪和记录 MongoDB 数据库系统的性能指 日志分析 (LogVis) 查看当前MongoDB群集的慢日志,以及MongoDB审计日志 执行计划 (ExplainPlan) 通过分析执行计划，管理员可以了解查询的执行情况，发现潜在的性能瓶颈，并进行优化。 9.通知 (Message) 平台操作通知 平台中所有的操作信息通知包括告警等 10.审计 (Audit) 审计列表 审计通知,包含用户操作、请求方式、群集操作、用户登陆等信息 11.设置 (Settings) 介质包管理 Mongo介质包管理 在创建集群时选择不同mongo版本进行创建，此版本mongo可通过MongoTars页面进行上传. 上传介质包详情步骤-->UploadMongoTar 邮件配置 配置告警邮件,告警信息会通过这个邮箱发送给用户 采集颗粒度配置 采集颗粒度配置可以在监控中设定数据采集的频率 Kubernetes配置 k8s配置,要添加k8s主机必须把Kubernetes配置文件添加到WAP平台. 巡检S3配置 巡检需要配置,巡检文件存储到的S3, 12.支持 (Support) 巡检 工单 Whaleal Support工单 13.用户中心 个人中心 个人中心页面显示注册时所填写的个人信息，可以在此页面进行更改与添加信息。 用户管理 用管理页面只有admin账号可以进行显示与操作，在页面中可以删除用户与对用户赋权。 点击用户名进入用户资源页面，可以对此用户进行权限管理如添加主机与创建集群功能。在Server与Mongo页面可以对某个主机或集群对此用户显示与隐藏。 账户配置 账户配置页面可以设置时区，同时可以设置是否接受告警通知。 14. Help 文档专栏 Whaleal社区文档专栏 社区地址 Whaleal社区 --- Whaleal Platform Agent V2.0.0 "},"whalelaPlatform/06-FAQ/ForOpsManagerUser.html":{"url":"whalelaPlatform/06-FAQ/ForOpsManagerUser.html","title":"ForOpsManagerUser","keywords":"","body":"For OpsManager User WAP 是否可以通过监控数据排查问题？ WAP 提供了非常丰富的监控指标，并且颗粒度细化至1秒，配合实时诊断中Info、Health、Performance、LogVis、ExplainPlan信息采集，可以帮助用户快速排查、定位问题，快速解决问题。 WAP 支持哪些告警方式？ WAP 不仅提供了邮件告警的方式，为了符合用户使用、交流方式，另外提供了短信、钉钉告警方式，保障用户随时随地的可以接收到告警信息，及时掌握集群状况。 WAP 是否支持集群架构的变更？ WAP 提供了 Standalone 架构变更为 ReplicaSet 架构功能。将架构变更的复杂操作整合成自动化方案，通过页面操作一键完成。 WAP 是否支持集群版本变更？ WAP 提供对集群升降级的功能，通过页面信息配置，完成集群相邻版本间的版本变更，不仅支持升级操作，而且提供了如升级一般简单的降级操作。在应用无感知的状态，以滚动的方式对集群升降级。 WAP 支持哪些 MongoDB 版本？ 在不改变 WAP 版本的状态下，WAP 支持目前市场上 98% 的MongoDB，支持版本为5.0 ～ 7.0。 "},"whalelaPlatform/06-FAQ/ForPMMUser.html":{"url":"whalelaPlatform/06-FAQ/ForPMMUser.html","title":"ForPMMUser","keywords":"","body":"For PMM(Persona Monitoring and Management) User WAP 是否支持用户权限分割？ WAP 管理员用户可以对平台用户进行资源访问限制，限制用户是否可以访问 Server、MongoDB资源。 WAP 是否支持创建 MongoDB 集群？ WAP 支持创建 MongoDB 集群： 创建单节点：CreateStandalone 创建复制集集群：CreateReplicaSet 创建分片集群：CreateShardedCluster 纳管群集：ExistingMongoDBDeployment WAP 是否支持纳管现有 MongoDB 集群？ WAP 支持对现有 MongoDB 集群的监控和管理。通过 ExistingMongoDBDeployment 添加对 MongoDB 集群监控管理。 WAP 支持通过一个节点配置，发现集群中所有节点并进行监控。 WAP 是否支持对 MongoDB 集群进行操作？ WAP 为用户提供了在使用、运维过程中常用的所有操作，促使用户在页面上可以通过配置、点击的方式完成对集群的变更。 WAP 提供了哪些对于 MongoDB 的操作？ 诊断分析 通过实时诊断数据中Info、Health、Performance、LogVis、ExplainPlan结合分析，确认当前节点问题原因，得出解决方案。 告警监控 通过配置告警参数阈值，在节点出现异常导致压力变大时，可以通过用户配置中邮箱、短信、钉钉等方式发送告警信息。 数据管理 WAP 提供了页面展示框，展示用户自定义查询出数据的页面展示，方便、友好的展示数据。 用户管理 展示集群中所有角色及用户，并详细展示角色及用户的权限。 节点管理 用户可以通过 WAP 向复制集集群、分片集群shard/config中一键化添加节点，避免用户命令行方式输入错误导致添加失败。 认证管理 用户可以通过 WAP 一键开启集群认证，WAP 以滚动方式重启集群，不影响服务使用。 版本变更 WAP 提供滚动方式升降级操作，在不影响服务使用的情况下，对集群进行相邻版本之间的版本变更。 架构变更 WAP 提供了 Standalone 架构变更为 ReplicaSet 架构功能。 "},"whalelaPlatform/06-FAQ/ForZabbixUser.html":{"url":"whalelaPlatform/06-FAQ/ForZabbixUser.html","title":"ForZabbixUser","keywords":"","body":"For Zabbix User WAP 是否支持创建 MongoDB 集群？ WAP 支持创建 MongoDB 集群： 创建单节点：CreateStandalone 创建复制集集群：CreateReplicaSet 创建分片集群：CreateShardedCluster 纳管群集：ExistingMongoDBDeployment WAP 是否支持纳管现有 MongoDB 集群？ WAP 支持对现有 MongoDB 集群的监控和管理。通过 ExistingMongoDBDeployment 添加对 MongoDB 集群监控管理。 WAP 支持通过一个节点配置，发现集群中所有节点并进行监控。 WAP 是否支持对 MongoDB 集群进行操作？ WAP 为用户提供了在使用、运维过程中常用的所有操作，促使用户在页面上可以通过配置、点击的方式完成对集群的变更。 WAP 提供了哪些对于 MongoDB 的操作？ 诊断分析 通过实时诊断数据中Info、Health、Performance、LogVis、ExplainPlan结合分析，确认当前节点问题原因，得出解决方案。 告警监控 通过配置告警参数阈值，在节点出现异常导致压力变大时，可以通过用户配置中邮箱、短信、钉钉等方式发送告警信息。 数据管理 WAP 提供了页面展示框，展示用户自定义查询出数据的页面展示，方便、友好的展示数据。 用户管理 展示集群中所有角色及用户，并详细展示角色及用户的权限。 节点管理 用户可以通过 WAP 向复制集集群、分片集群shard/config中一键化添加节点，避免用户命令行方式输入错误导致添加失败。 认证管理 用户可以通过 WAP 一键开启集群认证，WAP 以滚动方式重启集群，不影响服务使用。 版本变更 WAP 提供滚动方式升降级操作，在不影响服务使用的情况下，对集群进行相邻版本之间的版本变更。 架构变更 WAP 提供了 Standalone 架构变更为 ReplicaSet 架构功能。 "},"whalelaPlatform/06-FAQ/QA.html":{"url":"whalelaPlatform/06-FAQ/QA.html","title":"QA","keywords":"","body":"常见问题与解答 WAP平台支持哪些操作系统？ 本平台现阶段仅支持 centos 6，centos 7，centos 8，其余操作系统待开发。 WAP平台支持哪些数据库？ 现阶段仅支持mongoDB，其余数据库待开发。 我可以重置密码吗？ 普通用户不可以，可以找管理员重置密码。 如何添加新主机？ 添加新主机详情参考 AddEC2,Add K8S 如何创建集群？ 创建集群详情参考以下链接 创建单节点CreateStandalone 创建复制集CreateReplicaSet 创建分片CreateShardedCluster 纳管群集ExistingMongoDBDeployment 告警条件意味着什么？ 告警条件是根据自身需求设置CPU、内存、交换、磁盘、带宽等阈值，当阈值被触发时会将异常情况发送给管理员用户。 配置了告警信息，如何接受告警？ 当配置告警条件后告警被触发，告警信息会通过邮件、钉钉、短信等方式进行通知。 配置了告警信息与接受当时，没有收到告警。 在用户页面有配置是否接收告警通知选项，打开即可。 mongo之间支持同步吗？ 暂不支持，待开发。 支持哪些MongoDB认证方式？ 1.未开启任何认证 2.账号和密码 3.账号和密码且CA证书 脱离纳管后节点时被关闭了吗？ 当集群被脱离纳管后只是在本平台不进行管理与显示，其在主机上并没有被关闭。删除节点操作是将节点进行关闭。 添加shard失败怎么办 手动查看mongo日志，根据日志报错查找原因。 根据系统用户的权限对集群做一些监控类的操作，不做update的操作 当前不支持通过低权限用户使WAP平台对Mongodb只进行查看的权限，但是我们可以使用WAP的用户管理去给使用平台的用户只分配读的权限。 告警是否能够先写到某个地方，自己去拉取信息? 支持将告警写到appdb，通过第三方工具去数据库中读取告警信息。 支持麒麟系统吗 首先需要客户将当前使用到的麒麟系统的版本信息内核信息提供给锦木，然后我们进过针对性的测试才能给答复。 平台横向扩展的原理 横向扩展 就是普通的高可用，搭建多个wap服务 共用一个appdb 纳管的agent可以hash分配给不同的wap，减小单个wap压力 当某个wap服务挂掉后，其它wap不受影响。受影响的agent会重新hash分配到健康的wap上 负载管理指的是什么? appdb的负载管理 wap扩展节点的同时，对外提供服务的接口是一个还是多个？ 一个或者多个都可以，取决于配置，wap的所有节点使用的都是一个appdb 压力测试同时能支持多少? EC2下部署4c 8GB wap服务(除MongoDB和nacos服务+数据量)，支持200个主机的并发创建支持/400个MongoDB节点的并发创建 oplog会存多久? 取决于用户配置的恢复天数，最多保留半年 最少一天 主机对应哪几个mongodb，能不能放一个页面上? 后期可以在server中进行添加 每纳管一个节点，就对用户添加一个读的权限? 用户的权限应该和每个集群一对一的进行管理，需要在添加节点的时候对用户赋予读的权限。 Home页面能不能根据集群名搜索显示? 首页相当于一个大屏，不能去选择集群进行显示，只能在MongoDB页面去针对具体的集群查看其监控信息。 如果cpu高了，能看出来那个查询导致的cpu高吗？ 不支持该功能，导致CPU过高往往是多方面的因素导致的，平台不能给出直接导致cpu高的sql 数据过大，当前有两百多个节点（客户画像、用户足迹、汽车直客）一个节点可能1T+ 备份速度会有影响吗? 如果只有一台备份(DDT)服务器，全量备份只支持同时一个集群全量备份，全量备份完成后增量备份支持多个集群同时进行，具体还需根据备份(DDT)服务器的资源进行评估， 如果落盘数据大于1T,全量备份可能会中断，官方mongodb管理工具opsmanager也不能对这样大的数据进行全量备份，opsmanager默认两天会中断没有结束的全量备份任务。 "},"whalelaPlatform/07-APIReference/Agent.html":{"url":"whalelaPlatform/07-APIReference/Agent.html","title":"Agent","keywords":"","body":"Agent接口 接口调用时须在请求头中设置whaleal-Token,返回内容为 JSON 格式的信息. 其参数为时间类型都以时间戳形式传递。 接口调用时需若用到hostId、agentId、eventId通过以下方式获取。 hostId 在“根据主机名模糊查询主机基本信息”接口处获取。 agentId 在\"生成agentId\"接口处获取。 eventId 在\"获取集群日志信息\"接口处找到所需事件的id 请求头默认格式,特殊情况特殊声明 whaleal-Token在调用\"登录\"接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" 1 根据主机名模糊查询主机基本信息（主机名和主机ID） 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAllAgentHostNameAndHostId 1.2 请求参数 Name Located in Description Required Schema hostName Params 主机名称 No String 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int id 主机id String name 主机名称 String { \"code\": 1000, \"data\": [ { \"id\": \"62b153a344ba1b7771c42df7\", \"name\": \"server100\" }, { \"id\": \"62bbfbe9a46517610435d615\", \"name\": \"chen\" }, { \"id\": \"62cbbd7607bebb71b8429e5e\", \"name\": \"server200\" }, { \"id\": \"62d626969026c712d786e707\", \"name\": \"usdp\" } ] } 2 获取Agent的统计信息 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAgentStatistics 2.2 请求 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 long activeAgentNum Agent存活数 long activeAgentCpuNum Agent CPU存活数 long activeAgentDiskNum Agent 磁盘存活数 long deadAgentMemoryNum Agent 内存死亡数 long deadAgentCpuNum Agent CPU死亡数 long activeAgentMemoryNum Agent 内存存活数 long deadAgentNum Agent 死亡数 long deadAgentDiskNum Agent 磁盘死亡数 long { \"code\": 1000, \"data\": { \"activeAgentNum\": 4, \"activeAgentCpuNum\": 88, \"activeAgentDiskNum\": 23647738, \"deadAgentMemoryNum\": 0, \"deadAgentCpuNum\": 0, \"activeAgentMemoryNum\": 273086, \"deadAgentNum\": 0, \"deadAgentDiskNum\": 0 } } 3 获取所有主机信息 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAllAgentData// 3.2 请求参数 status:true 正常,false 宕机 Name Located in Description Required Schema pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int hostName Params 主机名称 No String ip Params 主机ip No String status Params 主机状态 No boolean 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62b153a344ba1b7771c42df7\", \"createTime\": 1658212423773, \"updateTime\": 1658459349919, \"hostId\": \"62b153a344ba1b7771c42df7\", \"hostName\": \"server100\", \"hostNameLong\": \"server100\", //主机基本信息 \"ipInfo\": [ { \"ip\": \"192.168.3.100\", \"type\": \"ipv4\" } ], \"memory\": 128722, \"osVersion\": \"CentOS Linux release 7.9.2009 (Core)\", \"cpuInfo\": \" Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\", \"cpuNum\": 40, \"swap\": 4095, //内核信息 \"kernelInfo\": \"3.10.0-1160.24.1.el7.x86_64\", \"totalDiskSize\": 7893956, \"run\": true, //系统属性信息 \"systemPropertyInfo\": { \"javaVersion\": \"11.0.9\", \"javaVendor\": \"Oracle Corporation\", \"javaVendorUrl\": null, \"javaHome\": \"/root/jdk-11.0.9\", \"javaVmSpecificationVersion\": \"11\", \"javaVmSpecificationVendor\": null, \"javaVmSpecificationName\": \"Java Virtual Machine Specification\", \"javaVmVersion\": \"11.0.9+7-LTS\", \"javaVmVendor\": \"Oracle Corporation\", \"javaVmName\": \"Java HotSpot(TM) 64-Bit Server VM\", \"javaSpecificationVersion\": null, \"javaSpecificationVendor\": \"Oracle Corporation\", \"javaSpecificationName\": \"Java Platform API Specification\", \"javaClassVersion\": \"55.0\", \"javaClassPath\": \"agent-collection-1.0.0.jar\", \"javaLibraryPath\": \"/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib\", \"javaIoTmpdir\": \"/tmp\", \"javaCompiler\": null, \"javaExtDirs\": null, \"fileSeparator\": \"/\", \"pathSeparator\": \":\", \"lineSeparator\": \"\\n\", \"userName\": \"root\", \"userHome\": \"/root\", \"userDir\": \"/home/jmops\", \"osname\": \"Linux\", \"osarch\": \"amd64\", \"osversion\": \"3.10.0-1160.24.1.el7.x86_64\" } } ] } 4 获取所有主机count 4.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAllAgentCount 4.2 请求参数 status:true 正常,false 宕机 Name Located in Description Required Schema hostName Params 主机名称 No String ip Params 主机ip No String status Params 主机状态 No boolean 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long { \"code\": 1000, \"data\": 1 } 5 获取某主机静态信息 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAgentInfo/ 5.2 请求参数 Name Located in Description Required Schema hostId Path 主机id Yes String 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"id\": \"62bbfbe9a46517610435d615\", \"createTime\": 1658286068557, \"updateTime\": 1658459546253, \"hostId\": \"62bbfbe9a46517610435d615\", \"hostName\": \"chen\", \"hostNameLong\": \"chen\", \"ipInfo\": [ { \"ip\": \"192.168.3.80\", \"type\": \"ipv4\" } ], \"memory\": 7821, \"osVersion\": \"CentOS Linux release 7.7.1908 (Core)\", \"cpuInfo\": \" Intel(R) Xeon(R) CPU L5640 @ 2.27GHz\", \"cpuNum\": 4, \"swap\": 8063, \"kernelInfo\": \"3.10.0-1062.el7.x86_64\", \"totalDiskSize\": 213035, \"run\": true, \"systemPropertyInfo\": { \"javaVersion\": \"1.8.0_172\", \"javaVendor\": \"Oracle Corporation\", \"javaVendorUrl\": null, \"javaHome\": \"/home/docker20220629BAK/java/jre\", \"javaVmSpecificationVersion\": \"1.8\", \"javaVmSpecificationVendor\": null, \"javaVmSpecificationName\": \"Java Virtual Machine Specification\", \"javaVmVersion\": \"25.172-b11\", \"javaVmVendor\": \"Oracle Corporation\", \"javaVmName\": \"Java HotSpot(TM) 64-Bit Server VM\", \"javaSpecificationVersion\": null, \"javaSpecificationVendor\": \"Oracle Corporation\", \"javaSpecificationName\": \"Java Platform API Specification\", \"javaClassVersion\": \"52.0\", \"javaClassPath\": \"agent-collection-1.0.0.jar\", \"javaLibraryPath\": \"/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib\", \"javaIoTmpdir\": \"/tmp\", \"javaCompiler\": null, \"javaExtDirs\": \"/home/docker20220629BAK/java/jre/lib/ext:/usr/java/packages/lib/ext\", \"fileSeparator\": \"/\", \"pathSeparator\": \":\", \"lineSeparator\": \"\\n\", \"userName\": \"root\", \"userHome\": \"/root\", \"userDir\": \"/root\", \"osname\": \"Linux\", \"osarch\": \"amd64\", \"osversion\": \"3.10.0-1062.el7.x86_64\" } } } 6 获取agent的监控信息 6.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getAgentMonitor// 6.2 请求参数 timeType:REAL_TIME,ONE_DAY,ONE_WEEK dataType:netInAndOut,memory,diskInAndOut,cpu Name Located in Description Required Schema hostId Path 主机id Yes String timeType Path 监控类型 Yes String startTimeForTimeInterval Params 某时间段的开始时间 Yes long endTimeForTimeInterval Params 某时间段的结束时间 Yes long timeGranularity Params 时间粒度 Yes long dataType Params 数据类型 Yes String 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"us\": [ 2.51, 2.29, 2.72, ], \"sy\": [ 0.89, 0.84, 1.89, ], \"id\": [ 96.57, 96.83, 94.97, ] }, \"createTime\": [ 1659512400000, 1659512460000, 1659512520000 ], \"name\": \"cpu\", \"message\": { \"id\": \"cpu空闲率 单位百分比%\", \"us\": \"cpu用户使用率 单位百分比%\", \"sy\": \"cpu系统使用率 单位百分比%\" }, \"info\": { \"id\": { \"max\": \"96.83\", \"min\": \"86.81\", \"avg\": \"94.29\" }, \"us\": { \"max\": \"9.58\", \"min\": \"1.72\", \"avg\": \"3.00\" }, \"sy\": { \"max\": \"3.25\", \"min\": \"0.84\", \"avg\": \"2.08\" } } } 7 获取agent的日志信息，结果分页展示 7.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/logData/// 7.2 请求参数 type类型:info,warn,trace,error,mongodb Name Located in Description Required Schema hostId Path 主机id Yes String pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int type Params 日志类别 No String startTime Params 开始时间 No long endTime Params 结束时间 No long content Params 内容 No String 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62c418a8e945184b27fae4c6\", \"createTime\": 1657018536725, \"updateTime\": 0, \"hostId\": \"62b153a344ba1b7771c42df7\", \"type\": \"info\", \"content\": \" [MongodbRealTimeData.run-94] server100:20190开启监控\" } ] } 8 获取agent的日志信息数量 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/logCount/ 8.2 请求参数 type类型:info,warn,trace,error,mongodb Name Located in Description Required Schema hostId Path 主机id Yes String type Params 日志类别 No String startTime Params 开始时间 No long endTime Params 结束时间 No long content Params 关键字 No String 8.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 9 操作agent的命令 9.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/operate// 9.2 请求参数 operateType:delete,updateAgentInfo Name Located in Description Required Schema hostId Path 主机id Yes String operateType Path 操作类别 Yes String 9.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 10 生成agentId 10.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/generateAgentId 10.2 请求 10.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据:agentId String 11 下载agentFile 11.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/downAgentFile//agent-collection-1.0.0.jar 11.2 请求参数 Name Located in Description Required Schema agentId Path agentId Yes String 11.3 返回结果 Description Schema File 二进制流形式返回文件 File 12 获取agent执行命令记录 12.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getExecCommandDataList/// 12.2 请求参数 Status类型:-1为全部,1为已下发,2正在执行,3成功完成,4异常执行,5异常完成 Name Located in Description Required Schema hostId Path 主机名称 Yes String pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int status Params 状态 No Int startTime Params 开始时间 No long endTime Params 结束时间 No long content Params 内容 No String result Params 结果 No String eventId Params 事件id No String 12.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62c51e6ad6ea982573f41e4d\", \"createTime\": 1657085546634, \"updateTime\": 1657085549086, \"hostId\": \"62b153a344ba1b7771c42df7\", \"commandType\": 221, \"status\": 3, \"eventId\": \"62c51e6ad6ea982573f41e4c\", \"commandNote\": \"server100:20190获取集群角色\", \"content\": \"{}\", \"execResult\": \"已完成\" } ] } 13 获取agent执行命令记录数 13.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getExecCommandDataCount/ 13.2 请求参数 Status类型:-1为全部,1为已下发,2正在执行,3成功完成,4异常执行,5异常完成 Name Located in Description Required Schema hostId Path 主机名称 Yes String Status Params 状态 No int startTime Params 开始时间 No long endTime Params 结束时间 No long content Params 命令类型 No String result Params 结果 No String eventId Params 事件id No String 13.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 14 获取主机cpu使用率 14.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getHost/CpuUsage/ 14.2 请求参数 Name Located in Description Required Schema count Path 获取个数 Yes int beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 14.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"630ddf510901ea6464159609\", \"hostId\": \"630ddf510901ea6464159609\", \"hostName\": \"server190\", \"usage\": 100.0 }, { \"_id\": \"6305fa4491c2f64abf18c581\", \"hostId\": \"6305fa4491c2f64abf18c581\", \"hostName\": \"server100\", \"usage\": 100.0 }, { \"_id\": \"631837b0e8f4ff5c079e9c55\", \"hostId\": \"631837b0e8f4ff5c079e9c55\", \"hostName\": \"server14\", \"usage\": 100.0 }, { \"_id\": \"6316dbf322197b14b79a4793\", \"hostId\": \"6316dbf322197b14b79a4793\", \"hostName\": \"server84\", \"usage\": 100.0 }, { \"_id\": \"630eddeff3d9e72e3695ea48\", \"hostId\": \"630eddeff3d9e72e3695ea48\", \"hostName\": \"chen\", \"usage\": 100.0 } ] } 15.获取主机内存使用率 15.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getHost/MemUsage/ 15.2 请求参数 Name Located in Description Required Schema count Path 获取个数 Yes int beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 15.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"63031ffab652427a5bb8a667\", \"hostId\": \"63031ffab652427a5bb8a667\", \"usage\": \"58.68GB\", \"hostName\": \"server200\" }, { \"_id\": \"6305fa4491c2f64abf18c581\", \"hostId\": \"6305fa4491c2f64abf18c581\", \"usage\": \"44.73GB\", \"hostName\": \"server100\" }, { \"_id\": \"630eddeff3d9e72e3695ea48\", \"hostId\": \"630eddeff3d9e72e3695ea48\", \"usage\": \"32.17GB\", \"hostName\": \"chen\" } ] } 16 获取主机磁盘使用率 16.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getHost/DiskUsage/ 16.2 请求参数 Name Located in Description Required Schema count Path 获取个数 Yes int beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 16.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"631837b0e8f4ff5c079e9c55\", \"hostId\": \"631837b0e8f4ff5c079e9c55\", \"hostName\": \"server14\", \"usage\": 22.81 }, { \"_id\": \"63031ffab652427a5bb8a667\", \"hostId\": \"63031ffab652427a5bb8a667\", \"hostName\": \"server200\", \"usage\": 10.01 }, { \"_id\": \"6305fa4491c2f64abf18c581\", \"hostId\": \"6305fa4491c2f64abf18c581\", \"hostName\": \"server100\", \"usage\": 9.49 } ] } 17 获取网卡输入使用率 17.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getHost/NetIn/ 17.2 请求参数 Name Located in Description Required Schema count Path 获取个数 Yes int beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 17.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"63031ffab652427a5bb8a667\", \"usage\": \"121.42MB/s\", \"hostName\": \"server200\" }, { \"_id\": \"630eddeff3d9e72e3695ea48\", \"usage\": \"81.28MB/s\", \"hostName\": \"chen\" }, { \"_id\": \"6316dbf322197b14b79a4793\", \"usage\": \"78.8MB/s\", \"hostName\": \"server84\" } ] } 18 获取网卡输出使用率 18.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/getHost/NetOut/ 18.2 请求参数 Name Located in Description Required Schema count Path 获取个数 Yes int beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 18.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"63031ffab652427a5bb8a667\", \"usage\": \"121.42MB/s\", \"hostName\": \"server200\" }, { \"_id\": \"6322b50f0b810f7b5109403c\", \"usage\": \"6.39MB/s\", \"hostName\": \"server202\" }, { \"_id\": \"630eddeff3d9e72e3695ea48\", \"usage\": \"2.61MB/s\", \"hostName\": \"chen\" } ] } --- "},"whalelaPlatform/07-APIReference/Alert.html":{"url":"whalelaPlatform/07-APIReference/Alert.html","title":"Alert","keywords":"","body":"Alert接口 接口调用时须在请求头中设置whaleal-Token,返回内容为 JSON 格式的信息。 其参数为时间类型都以时间戳形式传递。 接口调用时需用到hostId、objectId hostId 在“根据主机名模糊查询主机基本信息”接口处获取。 objectId 为主机id或mongo节点id，mongo节点id在“查找mongoDB集群信息数据”接口返回结果集中data集合的中mongo集合的“id”。 请求头默认格式，特殊情况特殊声明 KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json 1 判断来自警告信息是否正确 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/alert/judgeAlertMsg 1.2 请求参数 Name Located in Description Required Schema alertMsgEntity Body 告警信息实体对象 Yes AlertMsgEntity EX. 判断来自警告信息是否正确;其中AlertMsgEntity 如下所示： { \"alertStrategyId\": \"62fa15c51bf5144438e5290f\", \"createTime\": 1660556741231, \"endTime\": 1660556741231, \"id\": \"62fa15c51bf5144438e5290d\", \"msg\": \"test_alert\", \"objectId\": \"62fa15c51bf5144438e5290e\", \"objectType\": 1, \"startTime\": 1660556741231, \"updateTime\": 1660556741231 } 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 2 获取告警策略 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/alert/getAlertStrategy 2.2 请求参数 类型:1 agent,2 mongo Name Located in Description Required Schema objectId Params 对象id Yes String type Params 类型 Yes int 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON 3 获取所有成员警告策略(获取一台agent上所有mongodb节点告警策略) 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/alert/getAllMongoMemberAlertStrategy 3.2 请求参数 Name Located in Description Required Schema hostId Params 主机id Yes String 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62fa1679266fb301295fd555\", \"createTime\": 1660556921496, \"updateTime\": 1660556923891, \"name\": \"\", \"objectId\": \"62f5bf10c329264bb2d6deb1\", \"type\": 2, \"timeFrequencyStrategyList\": [], \"continuousGranularityStrategyList\": [ { \"type\": \"qps_insert\", \"cmp\": \">\", \"value\": 80.0, \"count\": 20, \"alarmFrequency\": 30, \"duration\": 60 } ] } ] } 4 更新警告信息 4.1 请求路径 POST: http://{Server-Host}:{端口}/api/alert/update 4.2 请求参数 Name Located in Description Required Schema alertStrategyEntity Body 告警策略实体对象 Yes alertStrategyEntity 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON 5 发送告警信息 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/alert/sendAlertMsg 5.2 请求参数 type: 1 host,2 mongo Name Located in Description Required Schema objectId Params host或mongo的id Yes String msg Params 通知消息 Yes String type Params 通知类型 Yes int 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String "},"whalelaPlatform/07-APIReference/Collection.html":{"url":"whalelaPlatform/07-APIReference/Collection.html","title":"Collection","keywords":"","body":"Collection接口 接口调用时须在请求头中设置agentId,返回内容为 JSON 格式的信息. 其参数为时间类型都以时间戳形式传递。 有些接口调用时需用到hostId、agentId、clusterId、eventId hostId 在“根据主机名模糊查询主机基本信息”接口处获取。 agentId 在\"生成agentId\"接口处获取。 eventId 在\"获取集群日志信息\"接口处找到所需事件的id clusterId 在“查找mongoDB集群信息数据”接口返回结果集中。 请求头默认格式，特殊情况特殊声明 agentId在\"生成agentId\"接口处获取。 KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json agentId \"agentId\" 1 保存agent端的日志记录. 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/host/save/log 1.2 请求参数 Name Located in Description Required Schema agentLogEntity Body 日志信息实体对象 Yes AgentLogEntity 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 2 更新agent的mongo文件信息. 2.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/host/updateAgentMongoFile/ 2.2 请求参数 Name Located in Description Required Schema agentId Path agentId Yes String mongoFileList Body mongo文件集合 Yes List Ex. 更新agent的mongo文件信息;其中MongoFileList 如下所示： [ { \"_id\": \"62d62a9bbfa6b71dad85b68a\",M \"createTime\": \"1658202779363\", \"hostId\": \"62b153a344ba1b7771c42df7\", \"md5\": \"1\", \"name\": \"mongodb-linux-x86_64-enterprise-rhel70-4.4.14.tgz\", \"path\": \"/var/ops/agent/mongodb-linux-x86_64-enterprise-rhel70-4.4.14.tgz\", \"server\": false, \"shortName\": \"mongodb-linux-x86_64-enterprise-rhel70-4.4.14\", \"size\": 133646249, \"updateTime\": \"1658202779363\" } ] 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 3 根据agentId查询该agent待执行的命令. 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/collection/command/getCommand/ 3.2 请求参数 Name Located in Description Required Schema hostId Path 主机id Yes String 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"632bfca83b74be1d9fe7ddb7\", \"createTime\": 1663827112988, \"updateTime\": 1663827112988, \"hostId\": \"630eddeff3d9e72e3695ea48\", \"commandType\": 101, \"status\": 0, \"eventId\": null, \"commandNote\": \"updateHostInfo\", \"content\": \"\\\"updateHostInfo\\\"\", \"execResult\": null } ] } 4 更新命令实体对象的状态. 4.1 请求路径 PUT: http://{Server-Host}:{端口}/api/collection/command/update 4.2 请求参数 Name Located in Description Required Schema commandEntity Body 命令实体对象 Yes CommandEntity Ex. 更新命令实体对象的状态;其中 CommandEntity 如下所示： { \"id\" : \"62c54a395dc04d3d4c13be75\", \"commandNote\" : \"server100:20190获取集群角色\", \"commandType\" : 221, \"content\" : \"{}\", \"createTime\" : \"1657096761802\", \"execResult\" : \"已完成\", \"hostId\" : \"62b153a344ba1b7771c42df7\", \"status\" : 3, \"updateTime\" :\"1657096769089\" } 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 5 更新agent心跳信息. 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/collection/host/updateRunTime// 5.2 请求参数 Name Located in Description Required Schema hostId Path 主机id Yes String timeStamp Path 时间戳 Yes String 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 6 保存主机信息 6.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/hostInfo 6.2 请求参数 Name Located in Description Required Schema hostInfoMongoEntity Body 主机信息实体对象 Yes HostInfoMongoEntity Ex. 保存主机信息;其中 HostInfoMongoEntity 如下所示： { \"_id\" : \"62cbbd7607bebb71b8429e5e\", \"cpuInfo\" : \" Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz\", \"cpuNum\" : 40, \"hostId\" : \"62cbbd7607bebb71b8429e5e\", \"hostName\" : \"server200\", \"hostNameLong\" : \"server200\", \"ipInfo\" : [ { \"ip\" : \"172.17.0.1\", \"type\" : \"ipv4\" } ], \"kernelInfo\" : \"3.10.0-1062.el7.x86_64\", \"osVersion\" : \"CentOS Linux release 7.7.1908 (Core)\", \"run\" : true, \"systemPropertyInfo\" : { \"fileSeparator\" : \"/\", \"javaClassPath\" : \"agent-collection-1.0.0.jar\", \"javaClassVersion\" : \"55.0\", \"javaHome\" : \"/root/jdk-11.0.9\", \"javaIoTmpdir\" : \"/tmp\", \"javaLibraryPath\" : \"/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib\", \"javaSpecificationName\" : \"Java Platform API Specification\", \"javaSpecificationVendor\" : \"Oracle Corporation\", \"javaVendor\" : \"Oracle Corporation\", \"javaVersion\" : \"11.0.9\", \"javaVmName\" : \"Java HotSpot(TM) 64-Bit Server VM\", \"javaVmSpecificationName\" : \"Java Virtual Machine Specification\", \"javaVmSpecificationVersion\" : \"11\", \"javaVmVendor\" : \"Oracle Corporation\", \"javaVmVersion\" : \"11.0.9+7-LTS\", \"lineSeparator\" : \"\\n\", \"oSArch\" : \"amd64\", \"oSName\" : \"Linux\", \"oSVersion\" : \"3.10.0-1062.el7.x86_64\", \"pathSeparator\" : \":\", \"userDir\" : \"/home/jmops\", \"userHome\" : \"/root\", \"userName\" : \"root\" } } 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 7 保存主机实时信息 7.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/host/addHostRealTimeData 7.2 请求参数 Name Located in Description Required Schema hostRealTimeDataMongoEntity Body 主机实时信息实体对象 Yes HostRealTimeDataMongoEntity Ex. 保存主机信息;其中 hostRealTimeDataMongoEntity 如下所示： { \"_id\": \"62c64f99f9872b46f1ce953a\", \"cpuInfo\": { \"hi\": 0, \"id\": 98.1, \"ni\": 0, \"si\": 0, \"st\": 0, \"sy\": 0.9, \"us\": 1, \"wa\": 0 }, \"createTime\": \"1657163672000\", \"diskInAndOutInfoList\": [ { \"avgqu_sz\": 0.05, \"avgrq_sz\": 18.89, \"await\": 0.34, \"device\": \"sda\", \"r_await\": 13.32, \"r_s\": 0.17, \"rkB_s\": 10.82, \"rrqm_s\": 0.06, \"svctm\": 0.05, \"util\": 0.75, \"w_await\": 0.32, \"w_s\": 144.65, \"wkB_s\": 1357.06, \"wrqm_s\": 2.03 } ], \"diskInfoList\": [ { \"fileSystem\": \"devtmpfs\", \"mountedOn\": \"/dev\", \"size\": 64349, \"type\": \"devtmpfs\", \"used\": 0, \"utilization\": 0 } ], \"hostId\": \"62b153a344ba1b7771c42df7\", \"hostName\": \"server100\", \"memoryInfo\": { \"memAvail\": 95150, \"memBuffCache\": 26138, \"memFree\": 69641, \"memTotal\": 128722, \"memUsed\": 32942, \"swapFree\": 1958, \"swapTotal\": 4095, \"swapUsed\": 2137 }, \"netInAndOutInfoList\": [ { \"io\": 0, \"networkCardName\": \"em3:\", \"out\": 0 } ], \"timeGranularity\": 1, \"updateTime\": \"1657163672000\" } 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 8 agent调用此接口来获取server端的时间 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/collection/util/get/server/date 8.2 请求 8.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 时间戳 long 9 agent通过调用此接口来获取请求agent的ip 9.1 请求路径 GET: http://{Server-Host}:{端口}/api/collection/util/get/agent/ip 9.2 请求 9.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据:ip String 10 mongo进行日志记录 10.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/insertMongoClusterLog// 10.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String eventId Path 事件id Yes String logList Body 日志列表 Yes List 10.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 11 插入mongo成员日志 11.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/insertMongoMemberLog/// 11.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String memberInfo Path 成员信息 Yes String eventId Path 事件id Yes String logList Body 日志列表 Yes List 11.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 12 更新mongo节点信息 12.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/updateMongoMember 12.2 请求参数 Name Located in Description Required Schema mongoMember Body mongo集群成员 Yes MongoMember Ex. 更新mongo节点信息;其中 MongoMember 如下所示： { \"id\": \"62f76749e011b442d7c91ec6\", \"createTime\": 0, \"updateTime\": 1660466332000, \"memberName\": \"server200:39801\", \"hostName\": \"server200\", \"hostId\": \"62ecda96dce5916b2b6f1b39\", \"port\": \"39801\", \"version\": \"6.0.1\", \"upgradeVersion\": null, \"userName\": \"root\", \"password\": \"123456\", \"authDbName\": \"admin\", \"currentTimeMillis\": 1660381001974, \"dataDirectory\": \"/var/ops/mongodb1660381001974/data/\", \"logFile\": \"/home/guanfei/data2/sharding8/data/mongos/data1/mongos.log\", \"confPath\": \"/home/guanfei/data2/sharding8/config/mongos/mongos1.conf\", \"authAble\": true, \"runShCmd\": \"/home/guanfei/data2/server/mongodb-linux-x86_64-enterprise-rhel70-6.0.0/bin/mongos -f /home/guanfei/data2/sharding8/config/mongos/mongos1.conf\", \"type\": 61, \"status\": \"正在运行\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"46797\", \"clusterId\": \"62f76747fe07726988b75f6b\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": { \"systemLog_destination\": \"file\", \"systemLog_path\": \"/home/guanfei/data2/sharding8/data/mongos/data1/mongos.log\", \"processManagement_fork\": \"true\", \"systemLog_logAppend\": \"true\", \"security_keyFile\": \"/home/guanfei/data2/sharding8/keyfile\", \"net_bindIp\": \"0.0.0.0\", \"net_port\": \"39801\", \"securityKeyFileValue\": \"BeP6Mbxj23i1jaGsGiRwKmHed2mCqDhlH4ZudHjiftZBoh26OQrCOaX+cAe/28Op\\r\\n5Uwk57104dUFM1nZUuKmC0kPaGzgbIzSyYnam0ypUZn/jP+v7Nf0sd8ZFGxS0FbX\\r\\n5HnYXoZtWYZV5tizC6TlyJCnPqW5TnFQZKSV//Nlm2mcaDI2FciX0XP2hHyv3TVJ\\r\\nwbQgZUMn8JMxgeif+Q0YEiKO+oJSnP1N7gmxlQAZni+6MyphY4e7rjYleNN5JzGr\\r\\nn6Xfy3Fjt5ZmARkw0GhI/Gm1aDCdiuhE+bgNCdRLEfy8USOyTh39aj25jj8YcW0E\\r\\nRHeqKB/emqvi0zeKEu7dr4pxUEttjWWstJv+ZepdUpg0pyTSLw+E23CrQ0AhWbTu\\r\\njx+i36J3CuRiM5Lb2m89/H8lo5NDzbzcd34ENjAhzunGSO4g+owG2+iD7SJIt6A3\\r\\noFU+ONPWuTcAGOOrRsCvinelr+R1K522HjopNzQQHicoMo8CQcU2KLbyud2V2N0/\\r\\n7N46ZwfeCQ27vp9hZn6VpUFAQyUd+9hWcE1VxyMPsVHmoMh+gn1OrPWZiXI/3ejR\\r\\nuasEy+N8dsCNe15nxUFk0Y6Q7hSj26dcxcZzDwNunhLnPALSxiZkzgOPY2l5XT6d\\r\\nbS62uUN2zt4aRxHNSh/e0O7ygz5BF3UDUElJ7610Exg88DOZ2K3MXiBHTH7yl+QV\\r\\nGDjF8h0oO/hHRtXYr0UdVIA5cLwk3Ya6ImNQY3ZK241JCheoLgfOqpi3mJi12q2t\\r\\nBeoqZyUZk6rCaJi79oG1elOTZPEXunipfNvgwysa4jVzTPngSH7qqcMGGSu4lro7\\r\\nnMiHyxc9iyV9d3K4KXoz0pNLFVSi0v3ToteiKtCVxxuIW0Gco9LdS9RRkXJb23/p\\r\\nnGLfrhyT13GhUmm1zF7wdEMTVQ6Ktzu6pccRY7ZnMUFnT5XzlcexZzdEJe2Q6K4e\\r\\n/Dtbr6jjFNL+8iXp0m6k/52IHYYqAMPMk8Z+FzuExSpA+A9o\", \"sharding_configDB\": \"mongo-cfg/192.168.3.190:36821,192.168.3.200:36821\" }, \"operateVersion\": 5723 } 12.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 13 更新复制集信息 13.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/updateMongoRepl/ 13.2 请求参数 Name Located in Description Required Schema isUpdateMemberList Path 是否更新成员列表 Yes boolean mongoReplica Body mongo复制集 Yes MongoReplica 13.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 14 更新集群信息 14.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/updateCluster 14.2 请求参数 Name Located in Description Required Schema mongoClusterInformation Body mongo集群信息实体对象 Yes MongoClusterInformation 14.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 15 保存mongo成员的实时信息 15.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/realtime 15.2 请求参数 Name Located in Description Required Schema tableName Path 表名 Yes String mongodbNodeMetrics Body mongo实时数据对象 Yes MongodbNodeMetrics Ex. 保存mongo成员的实时信息;MongodbNodeMetrics 如下所示： { \"anAssert\" : { \"msg\" : 0, \"regular\" : 0, \"user\" : 0, \"warning\" : 0 }, \"cacheFlow\" : { \"brin\" : 8717624, \"bwfr\" : 6421369 } \"createTime\" : \"1660469450000\", \"databaseLock\" : { \"r\" : 0.00, \"r_i\" : 0.00, \"w\" : 0.00, \"w_i\" : 0.00 }, \"deletedDocument\" : { \"deleted\" : 103, \"deletedByTTL\" : 35 }, \"documentOp\" : { \"inserted\" : 26, \"returned\" : 0, \"updated\" : 0 }, \"hostId\" : \"62cbbd7607bebb71b8429e5e\", \"hostName\" : \"server200\", \"latency\" : { \"r\" : 717.90, \"w\" : 3252.41 } \"timeGranularity\" : 0, \"transactionCondition\" : { \"currActive\" : 0, \"currInactive\" : 0, \"totalAborted\" : 0, \"totalCommitted\" : 0 }, \"updateTime\" : \"1660469450000\" } 15.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String Deprecated 已弃用 16 保存一批监控数据到数据库中 16.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/realtime/save/many 16.2 请求参数 Name Located in Description Required Schema mongoDBRealtimeDataEntityList Body 保存mongo成员的实时信息集合 Yes List 16.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 17 获取agent实例上的mongo节点信息 17.1 请求路径 POST http://{Server-Host}:{端口}/api/collection/mongodb/getAgentMongoMember/ 17.2 请求参数 Name Located in Description Required Schema agentId Path agentId Yes String 17.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62d6506ec5b6206027b99052\", \"createTime\": 1658212462005, \"updateTime\": 1658302192001, \"memberName\": \"chen:56902\", \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"56902\", \"version\": \"4.2.21\", \"upgradeVersion\": null, \"userName\": \"lhp1234\", \"password\": \"123456\", \"authDbName\": \"admin\", \"currentTimeMillis\": 1658212462005, \"dataDirectory\": \"/home/chen/data56902/data/\", \"logFile\": \"/home/chen/data56902/data/log.log\", \"confPath\": \"/home/chen/data56902/data/chen_56902.conf\", \"deleteDataAndLogAble\": false, \"authAble\": true, \"runShCmd\": \"\", \"type\": 45, \"status\": \"正在运行\", \"monitorServerStatus\": true, \"monitorTopAndOp\": true, \"collectMongoLog\": true, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"5599\", \"clusterId\": \"62d65068561b4a25b8339740\", \"replId\": \"62d6506dc5b6206027b99050\", \"clusterName\": null, \"tags\": {}, \"configurationOptions\": { \"sharding_clusterRole\": \"configsvr\", \"security_keyFile\": \"\", \"security_authorization\": \"enabled\", \"systemLog_destination\": \"file\", \"storage_wiredTiger_engineConfig_cacheSizeGB\": \"0.3\", \"systemLog_Path\": \"/home/chen/data56902/data/log.log\", \"processManagement_fork\": \"true\", \"storage_dbPath\": \"/home/chen/data56902/data/\", \"systemLog_logAppend\": \"true\", \"net_bindIp\": \"0.0.0.0\", \"net_port\": \"56902\", \"replication_replSetName\": \"test_lhp_shard_config\", \"securityKeyFileValue\":\"\" }, \"operateVersion\": 8168 } ] } 18 保存mongo.log日志 18.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/save/mongoLog// 18.2 请求参数 Name Located in Description Required Schema mongoMemberId Path mongo成员id Yes String fileOffset Path 文件偏移 Yes long logList Body 日志列表 Yes List 18.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 文件偏移量 long 19 保存 mongo top and op 19.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/save/mongoTopAndOp 19.2 请求参数 Name Located in Description Required Schema documentList Body Document列表 Yes List 19.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 20 更新fcv 20.1 请求路径 GET: http://{Server-Host}:{端口}/api/collection/mongodb/updateFCV// 20.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String fcv Path fcv Yes String 20.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 21 保存mongodb集合 21.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/saveMongoDBCollections 21.2 请求参数 Name Located in Description Required Schema mongoDBCollections Body mongo实集合 Yes MongoDBCollections Ex. 保存mongodb集合;其中 MongoDBCollections 如下所示： { \"_id\" : \"62ea1db298c0825187aee96e\", \"clusterId\" : \"62ea1db298c0825187aee96e\", \"createTime\" : \"1659686288006\", \"dbTables\" : [ { \"name\" : \"fs.files\", \"type\" : \"collection\", \"options\" : { }, \"info\" : { \"readOnly\" : false, \"uuid\" : { \"type\" : 4, \"data\" : \"q/X3q+2aQVC9dGCnS4wKZA==\" } }, \"idIndex\" : { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\", \"ns\" : \"record.fs.files\" }, \"storageSize\" : 20, \"size\" : 16, \"ns\" : \"record.fs.files\" } ], \"fromServerExe\" : false, \"updateTime\" : 0 } 21.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 22 保存mongo成员用户 22.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/saveMongoDBClusterUser/ 22.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String list Body document列表 Yes List Ex. 保存mongo成员用户;其中 List 如下所示： [{ \"name\" : \"hostRealTimeDataMongoEntity\", \"type\" : \"collection\", \"options\" : { }, \"storageSize\" : 8836, \"size\" : 44721, \"ns\" : \"ops.hostRealTimeDataMongoEntity\", \"indexSizes\" : { \"_id_\" : 248, \"createTime_1\" : 152, \"hostId_1\" : 84, \"hostId_1_createTime_1_timeGranularity_1\" : 172 } }] 22.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 23 保存mongo成员角色 23.1 请求路径 POST: http://{Server-Host}:{端口}/api/collection/mongodb/saveMongoDBClusterRole/ 23.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String list Body document列表 Yes List 23.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 24 保存诊断数据. 24.1 请求路径 POST: http://{Server-Host}:9601/api/collection/mdiag/saveMdiagLog 24.2 请求参数 Name Located in Description Required Schema document Body 巡检日志 Yes Document 24.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 24 获取config信息. 24.1 请求路径 GET http://{Server-Host}:9601/api/collection/config/getConfig 24.2 请求参 24.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ConfigEntity --- "},"whalelaPlatform/07-APIReference/MongoDbData.html":{"url":"whalelaPlatform/07-APIReference/MongoDbData.html","title":"DBData","keywords":"","body":"MongoDBData接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 其参数为时间的都以时间戳形式传递。 有些接口调用时需用到nodeId、mongoMemberId、clusterId、eventId nodeId即mongoMemberId 在“查找mongoDB集群信息数据”接口返回结果集中data集合的中mongo集合的“id” eventId在\"获取集群日志信息\"接口处找到所需事件的id clusterId在“查找mongoDB集群信息数据”接口返回结果集中。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip, deflate, br Connection keep-alive Content-Type application/json whaleal-token \"token\" --- 1 获取mongodb集群信息 Deprecated 已弃用 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/project/data// 1.2 请求参数 Name Located in Description Required Schema clusterName Path 集群名称 Yes String projectType Path 类型 Yes String 2 获取群集大小前五名 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/cluster/size/top/five 2.2 请求参数 Name Located in Description Required Schema beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"62d666c50f57845ee4c76090\", \"clusterSize\": 0, \"size\": \"0.00KB\", \"clusterName\": \"test_repl\" }, { \"_id\": \"62d65068561b4a25b8339740\", \"clusterSize\": 0, \"size\": \"0.00KB\", \"clusterName\": \"shard\" } ] } 3 获取集合大小前五名 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/collection/size/top/five 3.2 请求参数 Name Located in Description Required Schema beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"62d67d21239d00094230b08f\", \"clusterId\": \"62d67d21239d00094230b08f\", \"createTime\": 1658394516783, \"dbTables\": { \"name\": \"fs.chunks\", \"type\": \"collection\", \"options\": {}, \"info\": { \"readOnly\": false, \"uuid\": { \"type\": 4, \"data\": \"8MfjmDBFR5q9BYztGFDJQQ==\" } }, \"idIndex\": { \"v\": 2, \"key\": { \"_id\": 1 }, \"name\": \"_id_\", \"ns\": \"test.testColl\" }, \"storageSize\": 20, \"size\": 0, \"ns\": \"test.testColl\" }, \"fromServerExe\": false, \"updateTime\": 0, \"clusterName\": \"shard\", \"dbName\": \"test\", \"collectionName\": \"testColl\", \"size\": \"0.00KB\" } ] } 4 获取QPS大小前五 4.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/QPS/size/top/five 4.2 请求参数 Name Located in Description Required Schema beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": { \"hostId\": \"62cbbd7607bebb71b8429e5e\", \"port\": \"47018\" }, \"host\": \"server200\", \"port\": \"47018\", \"QPS\": 5520, \"instance\": \"server200:47018\" } ] } 5 获取连接实例前五 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/connection/instance/top/five 5.2 请求参数 Name Located in Description Required Schema beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": { \"hostId\": \"62cbbd7607bebb71b8429e5e\", \"port\": \"47018\" }, \"host\": \"server200\", \"port\": \"47018\", \"Conn\": 76, \"instance\": \"server200:47018\" } ] } 6 获取慢查询前五 6.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/slowest/instance/top/five 6.2 请求参数 Name Located in Description Required Schema beginTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"62d66d3cc5b6206027b993b0\", \"slow count\": 8, \"instance\": \"server200:47018\" } ] } 7 节点实时监控信息 7.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/monitor/data// 7.2 请求参数 timeType:REAL_TIME,ONE_DAY,ONE_WEEK dataType:qps,conn,pageFaults,memory,net,anAssert,cacheFlow,cacheUsage,latency,tickets,targetQ,scanAndOrder,collectionScan documentOp,lockCondition,databaseLock,collectionLock,transactionCondition,deletedDocument Name Located in Description Required Schema nodeId Path 节点id Yes String timeType Path 查询时间类型 Yes String timeGranularity Params 时间粒度 No long startTimeForTimeInterval Params 开始时间间隔 No long endTimeForTimeInterval Params 结束时间间隔 No long dataType Params 数据类型 Yes long 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": { \"delete\": [ 0.0, 0.0, 0.0 ], \"insert\": [ 8.0, 15.0, 2.0 ], \"query\": [ 0.0, 0.0, 0.0 ], \"cmd\": [ 6.0, 5.0, 3.0 ], \"getMore\": [ 1.0, 2.0, 2.0 ], \"update\": [ 0.0, 0.0, 0.0 ] }, \"createTime\": [ 1659511920000, 1659511980000, 1659512040000 ], \"name\": \"qps\", \"message\": { \"insert\": \"The average rate of inserts performed per second over the selected sample period\", \"delete\": \"The average rate of deletes performed per second over the selected sample period\", \"update\": \"The average rate of updates performed per second over the selected sample period\", \"query\": \"The average rate of queries performed per second over the selected sample period\", \"command\": \"The average rate of commands performed per second over the selected sample period\", \"getMore\": \"The average rate of getMores performed per second on any cursor over the selected sample period. On a primary, this number can be high even if the query count is low as the secondaries \\\"getMore\\\" from the primary often as part of replication.\" }, \"info\": { \"delete\": { \"max\": 10, \"min\": 0, \"avg\": \"0.35\" }, \"insert\": { \"max\": 32, \"min\": 0, \"avg\": \"8.75\" }, \"query\": { \"max\": 0, \"min\": 0, \"avg\": \"0.01\" }, \"cmd\": { \"max\": 10, \"min\": 1, \"avg\": \"4.42\" }, \"getMore\": { \"max\": 2, \"min\": 0, \"avg\": \"0.93\" }, \"update\": { \"max\": 0, \"min\": 0, \"avg\": \"0.05\" } } } 8 根据id查询集群信息 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoCluster/ 8.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String 8.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"id\": \"62d67d21239d00094230b08f\", \"createTime\": 1658223967052, \"updateTime\": 1658223967052, \"clusterName\": \"test\", \"type\": 2, \"mongoMember\": null, \"mongoReplica\": { \"id\": \"62d67d21239d00094230b08f\", \"createTime\": 0, \"updateTime\": 0, \"replicaName\": \"test\", \"memberList\": [ //节点信息 ... ], \"type\": 1, //1:单节点,2:复制集,3:分片 \"clusterId\": \"62d67d21239d00094230b08f\", \"deleteDataAndLogAble\": false, \"status\": \"正在运行\", \"operaLog\": [], \"replicationSettings\": {}, \"replicationOtherSettings\": { \"securityKeyFileValue\": }, \"authAble\": true, \"userName\": \"root\", \"password\": \"123456\", \"authDbName\": \"admin\", \"protocolVersion\": 1, \"writeConcernMajorityJournalDefault\": false }, \"mongoShard\": null, \"status\": \"正常\", \"fcv\": \"4.2\", \"tag\": \"ys\", \"create\": true } } 9 获取集群日志信息 9.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoClusterLogData/// 9.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes int pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes String memberName Params 节点名称 Yes String logContent Params 日志内容 Yes String startTime Params 开始时间 No long endTime Params 结束时间 No long 9.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62d4f0363e50046ce51d44f3\", \"createTime\": 1658122294338, \"updateTime\": 1658122294338, \"memberName\": \"cluster\", \"clusterId\": \"62d4bdfd3e50046ce51d41f6\", \"eventId\": null, \"logInfoList\": [ { \"createTime\": 1658122294338, \"log\": \"rz集群操作[updateMongoMemberInfo]成功\" } ] } ] } 10 获取mongo集群日志数 10.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoClusterLogCount/ 10.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String memberName Params 节点名称 Yes String logContent Params 日志内容 Yes String startTime Params 开始时间 No long endTime Params 结束时间 No long 10.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 11 查询mongoD的日志信息. 11.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDLogData/// 11.2 请求参数 type类型:为空时查询全部,SHARDING,STORAGE,RECOVERY,CONTROL Name Located in Description Required Schema mongoMemberId Path mongo节点id Yes String pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int type Params 类型 No String startTime Params 开始时间 No long endTime Params 结束时间 No long content Params 内容 No String 11.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 MongoMember { \"code\": 1000, \"data\": [ { \"id\": \"62d5037fbb551e67507f9a32\", \"createTime\": 0, \"updateTime\": 0, \"log\": { \"t\": \"2022-07-18T06:53:49.151+00:00\", \"s\": \"I\", \"c\": \"NETWORK\", \"id\": \"[conn3161]\", \"msg\": \"end connection 192.168.3.80:58778 (5 connections now open)\" }, \"nodeId\": \"62d4be9d3e50046ce51d4228\", \"fileOffset\": 0 } ] } 12 查询mongoD的日志信息数 12.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDLogCount/ 12.2 请求参数 type类型:为空时查询全部,STORAGE,RECOVERY,CONTROL Name Located in Description Required Schema mongoMemberId Path mongo节点id Yes String type Params 类型 Yes String startTime Params 开始时间 Yes String endTime Params 结束时间 No String content Params 搜索内容 No String 12.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 13 获取mongo的 top与op 13.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoTopAndOp// 13.2 请求参数 type:1 top,2 op Name Located in Description Required Schema mongoMemberId Path mongo节点id Yes String type Path 类型 Yes int 13.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List 14 更新集群名称 14.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/updateClusterName// 14.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String newClusterName Path 新名称 Yes String 14.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 15 获取mongo统计信息 15.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoStatistics 15.2 请求 15.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON 16 根据事件id查询mongo事件 16.1 请求路径 Get: http://{Server-Host}:{端口}/api/server/mongo/findMongoEventLogByEventId/ 16.2 请求参数 Name Located in Description Required Schema eventId Path 事件id Yes String 16.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"createTime\": 1658131316409, \"log\": \"chen:45463操作[openQPS]成功\" }, { \"createTime\": 1658131317418, \"log\": \"事件组结束\" } ] } 17 获取mongo事件日志数据 17.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoEventLogData/// 17.2 请求参数 status:'初始化','正在运行','暂停','结束','异常结束' '中止' Name Located in Description Required Schema clusterId Path 集群id Yes String pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int status Params 状态 No String eventName Params 事件名称 No String operatorName Params 操作者 No String 17.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62d5281602d41247cf3741d0\", \"createTime\": 1658136598663, \"updateTime\": 1658136704891, \"clusterId\": \"62d4bdfd3e50046ce51d41f6\", \"eventName\": \"集群进行操作:delete\", \"operatorId\": \"62b2d434e0869c777c439867\", \"operatorName\": \"lhp1234\", \"status\": \"结束\", \"logList\": null } ] } 18 获取mongo事件日志数据数 18.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoEventLogCount/ 18.2 请求参数 status:'初始化','正在运行','暂停','结束','异常结束' '中止' Name Located in Description Required Schema clusterId Path 集群id Yes String eventName Params 事件名称 No String status Params 状态 No String operatorName params 操作者 No String 18.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 19 查找mongoDB集群信息数据 19.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/findMongoDBClusterInfoData// 19.2 请求参数 type:1 单节点,2 复制集,3 分片 Name Located in Description Required Schema pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int type params 集群类型 No int clusterName params 集群名称 No String mongoMemberName params mongo成员名称 No String fcv params fcv No String 19.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62fa2017fe07726988b761fa\", \"createTime\": 1660559406829, \"updateTime\": 1660559406829, \"clusterName\": \"server100:36398\", \"type\": 1, \"mongoMember\": { \"id\": \"62fa2017fe07726988b761fa\", \"createTime\": 0, \"updateTime\": 1660618121809, \"memberName\": \"server100:36398\", \"hostName\": \"server100\", \"hostId\": \"62ecdb15dce5916b2b6f1b3c\", \"port\": \"36398\", \"version\": \"4.0.25\", \"upgradeVersion\": null, \"userName\": \"\", \"password\": \"\", \"authDbName\": \"admin\", \"currentTimeMillis\": 1660559383622, \"dataDirectory\": \"/home/chen/data36398\", \"logFile\": \"/home/chen/data36398/log.log\", \"confPath\": \"/home/chen/data36398/server100_36398.conf\", \"authAble\": false, \"runShCmd\": \"/var/whaleal/agent//mongodb-linux-x86_64-enterprise-rhel70-4.0.25/bin/mongod -f /home/chen/data36398/server100_36398.conf\", \"type\": 11, \"status\": \"正在运行\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"46031\", \"clusterId\": \"62fa2017fe07726988b761fa\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": { \"systemLog_destination\": \"file\", \"storage_wiredTiger_engineConfig_cacheSizeGB\": \"0.3\", \"systemLog_path\": \"/home/chen/data36398/log.log\", \"processManagement_fork\": \"true\", \"storage_dbPath\": \"/home/chen/data36398\", \"systemLog_logAppend\": \"true\", \"net_bindIp\": \"0.0.0.0\", \"net_port\": \"36398\" }, \"operateVersion\": 3916 }, \"mongoReplica\": null, \"mongoShard\": null, \"status\": \"正常\", \"fcv\": \"4.0\", \"tag\": \"\", \"create\": true } ] } 20 查找mongoDB集群信息数据数 20.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/findMongoDBClusterInfoCount 20.2 请求参数 type:1 单节点,2 复制集,3 分片 Name Located in Description Required Schema fcv Params fcv Yes String clusterName Params 集群名称 No String type Params 集群类型 No int mongoMemberName Params mongo成员名称 No String 20.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 21 获取mongo db 集合 21.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDBCollections// 21.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String eventId Path 事件id Yes String 21.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"name\": \"coll\", \"type\": \"collection\", \"options\": {}, \"info\": { \"readOnly\": false, \"uuid\": { \"type\": 4, \"data\": \"OSkYm+PbSX6DaTsGUrU4rQ==\" } }, \"idIndex\": { \"v\": 2, \"key\": { \"_id\": 1 }, \"name\": \"_id_\", \"ns\": \"cc.coll\" }, \"storageSize\": 156, \"size\": 335, \"ns\": \"cc.coll\" } ] } 22 获取用户mongodb集群 22.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDBClusterUser/ 22.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String 22.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"admin.16581342589211\", \"userId\": { \"type\": 4, \"data\": \"LMMiWU2KT5GVoDCbkt3B4g==\" }, \"user\": \"16581342589211\", \"db\": \"admin\", \"credentials\": { \"SCRAM-SHA-1\": { \"iterationCount\": 10000, \"salt\": \"EtUoKxhxaN78GCaQVKduRg==\", \"storedKey\": \"pZma/HuyZVNFzSB1PU9ROxMvblc=\", \"serverKey\": \"av4+YbsNnwRnb1RKeFewS5ocHIo=\" } }, \"authenticationRestrictions\": [ { \"clientSource\": [ \"192.168.3.200\" ] } ], \"roles\": [ { \"role\": \"root\", \"db\": \"admin\" } ] } ] } 23 获取mongodb角色数据 23.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDBClusterRole/ 23.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String 23.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"role\": \"__queryableBackup\", \"db\": \"admin\", \"isBuiltin\": true, \"roles\": [], \"inheritedRoles\": [], \"privileges\": [ { \"resource\": { \"db\": \"config\", \"collection\": \"settings\" }, \"actions\": [ \"find\" ] } ] } } 24 执行一个计划 24.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/exeExplainPlan// 24.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String mongoMemberId Path mongo成员id Yes String document Body 请求参数 Yes Map 24.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"explain\": { \"queryPlanner\": { \"plannerVersion\": 1, \"namespace\": \"test.order\", \"indexFilterSet\": false, \"parsedQuery\": {}, \"winningPlan\": { \"stage\": \"EOF\" }, \"rejectedPlans\": [] }, \"executionStats\": { \"executionSuccess\": true, \"nReturned\": 0, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 0, \"executionStages\": { \"stage\": \"EOF\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1 }, \"allPlansExecution\": [] }, \"serverInfo\": { \"host\": \"server121\", \"port\": 47018, \"version\": \"4.4.12\", \"gitVersion\": \"51475a8c4d9856eb1461137e7539a0a763cc85dc\" }, \"ok\": 1.0, \"$clusterTime\": { \"clusterTime\": { \"array\": false, \"binary\": false, \"boolean\": false, \"bsonType\": \"TIMESTAMP\", \"dBPointer\": false, \"dateTime\": false, \"decimal128\": false, \"document\": false, \"double\": false, \"inc\": 85, \"int32\": false, \"int64\": false, \"javaScript\": false, \"javaScriptWithScope\": false, \"null\": false, \"number\": false, \"objectId\": false, \"regularExpression\": false, \"string\": false, \"symbol\": false, \"time\": 1660618654, \"timestamp\": true, \"value\": 7132302810057539669 }, \"signature\": { \"hash\": { \"data\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\", \"type\": 0 }, \"keyId\": 0 } }, \"operationTime\": { \"array\": false, \"binary\": false, \"boolean\": false, \"bsonType\": \"TIMESTAMP\", \"dBPointer\": false, \"dateTime\": false, \"decimal128\": false, \"document\": false, \"double\": false, \"inc\": 85, \"int32\": false, \"int64\": false, \"javaScript\": false, \"javaScriptWithScope\": false, \"null\": false, \"number\": false, \"objectId\": false, \"regularExpression\": false, \"string\": false, \"symbol\": false, \"time\": 1660618654, \"timestamp\": true, \"value\": 7132302810057539669 } }, \"documentsReturned\": 0, \"queryExecutionTime\": 0, \"indexKeysExamined\": 0, \"documentsExamined\": 0, \"stagList\": [ { \"stage\": \"EOF\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1 } ] } } 25 获取所有mongo配置参数. 25.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDBProcessArgument 25.2 请求 25.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62faf2bcd0810e3aeace6dae\", \"createTime\": 0, \"updateTime\": 0, \"maxVersion\": null, \"minVersion\": null, \"name\": \"SYSTEM_LOG_VERBOSITY\", \"options\": [ { \"label\": \"1 (v)\", \"value\": \"1\" }, { \"label\": \"2 (vv)\", \"value\": \"2\" }, { \"label\": \"3 (vvv)\", \"value\": \"3\" }, { \"label\": \"4 (vvvv)\", \"value\": \"4\" }, { \"label\": \"5 (vvvvv)\", \"value\": \"5\" } ], \"path\": \"systemLog.verbosity\", \"processTypes\": \"ALL\", \"shortName\": \"verbosity\", \"type\": \"INTEGER\", \"credential\": false }, { \"id\": \"62faf2bcd0810e3aeace6daf\", \"createTime\": 0, \"updateTime\": 0, \"maxVersion\": null, \"minVersion\": null, \"name\": \"SYSTEM_LOG_QUIET\", \"options\": [ { \"label\": \"TRUE\", \"value\": \"true\" }, { \"label\": \"FALSE\", \"value\": \"false\" } ], \"path\": \"systemLog.quiet\", \"processTypes\": \"ALL\", \"shortName\": \"quiet\", \"type\": \"BOOLEAN\", \"credential\": false } ] } 26 获取mongodb集合 26.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMongoDBCollections// 26.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String eventId Path 事件id Yes String 26.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"name\": \"test\", \"sub\": [ { \"name\": \"a\", \"type\": \"collection\", \"options\": {}, \"info\": { \"readOnly\": false, \"uuid\": { \"type\": 4, \"data\": \"g6tXU8InRwCFt85bofFJHQ==\" } }, \"idIndex\": { \"v\": 2, \"key\": { \"_id\": 1 }, \"name\": \"_id_\", \"ns\": \"test.a\" }, \"storageSize\": 1444, \"size\": 3222, \"ns\": \"test.a\" } ] } ] } 27 查询集群库数据 27.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/queryClusterDbData// 27.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String eventId Path 事件id Yes String map Body 查询条件 Yes Map Ex. 查询集群库数据;其中 Map 如下所示: { \"ns\": \"test.a\", \"query\": \"{}\", \"pageSize\": 10, \"pageIndex\": 1 } 27.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": { \"date\": 1659684764000, \"timestamp\": 1659684764 }, \"a\": 1.0 }, { \"_id\": { \"date\": 1659684764000, \"timestamp\": 1659684764 }, \"a\": 2.0 }, { \"_id\": { \"date\": 1659684764000, \"timestamp\": 1659684764 }, \"a\": 3.0 } ] } 28 创建索引 28.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createIndex// 28.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String eventId Path 事件id Yes String map Body 索引配置 Yes Map Ex. 创建索引;其中 Map 如下所示: { \"indexName\": \"chen\", \"ns\": \"test.coll\", \"index\": \"{a:1}\", //前三项配置即可添加，其余为选项内容 \"buildIndexInTheBackground\": false, \"createUniqueIndex\": false, \"createTTL\": \"\", \"partialFilterExpression\": \"\", \"wildcardProjection\": \"\", \"useCustomCollationLocale\": \"\", \"useCustomCollationStrength\": \"\", \"useCustomCollationCaseLevel\": \"\", \"useCustomCollationCaseFirst\": \"\", \"useCustomCollationNumericOrdering\": \"\", \"useCustomCollationAlternate\": \"\", \"useCustomCollationMaxVariable\": \"\", \"useCustomCollationBackwards\": \"\", \"useCustomCollationNormalization\": \"\" } 28.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 29 诊断数据 29.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/mdiagData/// 29.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String pageIndex Path 第几页 Yes int pageSize Path 每页大小 Yes int 29.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"62ecf7a2a3a6e138ea1f00b0\", \"filename\": \"mdiag_server100_1659696513419.gz\", \"length\": 1733449, \"chunkSize\": 261120, \"uploadDate\": \"2022-08-05T10:57:38.925+00:00\", \"metadata\": { \"clusterId\": \"62ece46bdce25353bdcf32a4\", \"createTime\": 1659697058890 }, \"id\": \"62ecf7a2a3a6e138ea1f00b0\" } ] } 30 获取诊断数 30.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/mdiagCount/ 30.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String 30.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 31 更新事件状态 31.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/updateEventStatus// 31.2 请求参数 Name Located in Description Required Schema eventId Path 事件id Yes String clusterId Path 状态 Yes String 31.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 32 获巡检日志 32.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getMdiagLog// 32.2 请求参数 Name Located in Description Required Schema eventId Path 事件id Yes String clusterId Path 状态 Yes String 32.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List 33 获取所有集群id与名称 33.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/getAllClusterIdAndName 33.2 请求参数 Name Located in Description Required Schema clusterName Params 集群名称 false String 33.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long --- "},"whalelaPlatform/07-APIReference/ErrorCodes.html":{"url":"whalelaPlatform/07-APIReference/ErrorCodes.html","title":"ErrorCodes","keywords":"","body":"ErrorCodes 当你向接口发送请求遇到错误时，接口将返回以下错误码之一 错误码列表： 9: 通用 开头的code的msg不进行前端展示 10 ：标识正常执行的代码 无msg 11: 用户 12: agent Error HTTP Code Description UNKNOWN_EXCEPTION 901 系统未知异常 ERROR_SYSTEM 902 系统错误 LIMIT_GATEWAY 903 网关限制 ERROR_EXE_COMMAND 903 更新命令状态失败 SUCCESS_CODE 1000 正常执行 NOT_EXIST_ACCOUNT 1101 账号不存在 ERROR_PASSWORD 1102 密码错误 BLANK_ACCOUNT 1103 账号不可为空 EXIST_PHONE 1104 手机号已存在 EXIST_EMAIL 1105 邮箱已存在 EXIST_ACCOUNT 1106 账号已存在 NOT_EXIST_TOKEN 1107 TOKEN不存在 ERROR_UPDATE_MEMBER 1108 更新信息失败 NOT_EXIST_AGENT_ID 1201 agentId不存在 ERROR_SAVE_AGENT_LOG 1202 日志信息保存失败 ERROR_DOWN_LOAD_FILE 1203 文件下载失败 OPS_COMMON_EXCEPTION 1900 OPS常见异常 NOT_EXIST_DATA 1901 数据不存在 "},"whalelaPlatform/07-APIReference/Files.html":{"url":"whalelaPlatform/07-APIReference/Files.html","title":"Files","keywords":"","body":"File接口 此接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type multipart/form-data; boundary=\\ whaleal-token \"token\" 1 上传文件到Server端 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/file/web/upload/file 1.2 请求参数 Name Located in Description Required Schema File Body 上传的文件 Yes MultipartFile whaleal-Token Params token Yes String 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 2 删除server端文件 此处请求头的Content-Type为application/json 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/deleteFile/ 2.2 请求参数 Name Located in Description Required Schema filename Path 文件名称 Yes String 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 3 获取server端的文件信息. 此处请求头的Content-Type为application/json 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/getAllMongoFile 3.2 请求 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": [ { \"createTime\": 1658484806756, \"updateTime\": 1658484806756, \"name\": \"mongodb-linux-x86_64-rhel70-4.2.17.tgz\", \"shortName\": \"mongodb-linux-x86_64-rhel70-4.2.17\", \"size\": 133396543, \"md5\": \"1\", \"version\": null, \"path\": \"/home/whaleal/server/mongodb-linux-x86_64-rhel70-4.2.17.tgz\", \"hostId\": \"\", \"server\": true } ] } 4 agent可以下载server端的文件 4.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/agent/download/ 4.2 请求参数 Name Located in Description Required Schema filename Path 文件名称 Yes String agentId Header agentId Yes String 4.3 返回结果 Description Schema 文件 返回文件 File 5 更新server端的文件信息 此处请求头的Content-Type为application/json 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/agent/updateAllMongoFileToAgent 5.2 请求 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 6 下载巡检日志 6.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/download/mdiag/// 6.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String fileID Path 文件id Yes String filename Path 文件名称 Yes String whaleal-Token Params token Yes String 6.3 返回结果 Description Schema mdiag 返回文件下载 File 7 下载mongo集群文件 7.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/file/download/mongoClusterFile// 7.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String filename Path 文件名称 Yes String fileIdList Params 文件id列表 Yes List whaleal-Token Params token Yes String 7.3 返回结果 Description Schema file 返回文件下载 File 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/agent/downAgentFile// 8.2 请求参数 Name Located in Description Required Schema agentId Path agentId Yes String fileName Path 文件名称 Yes String 8.3 返回结果 Description Schema File 二进制流形式返回文件 File "},"whalelaPlatform/07-APIReference/Member.html":{"url":"whalelaPlatform/07-APIReference/Member.html","title":"Member","keywords":"","body":"Member接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 有些接口调用时需用到ID、memberId、messageId Id为用户ID，在“保存新用户信息”接口处返回data里的id为用户ID。 memberId为用户ID，在“保存新用户信息”接口处返回data里的id为用户ID。 messageId为消息id，在“获取信息数据”接口处返回的实体类中的id。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将whaleal-Token放置请求头中。 KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" 1 登录 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/member/login 1.2 请求参数 Name Located in Description Required Schema account Body 账户名 Yes String password Body 密码 Yes String 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON generateAgentIdAble 是否有权限生成agentId boolean token Token令牌 String createMongoDBAble 是否有权限创建mongo集群 boolean { \"code\": 1000, \"data\": { \"id\": \"62be61c7cbeff906da28f6ff\", \"createTime\": 1656644040004, \"updateTime\": 1657690356662, \"account\": \"chen123\", \"password\": \"\", \"email\": \"1q@q.com\", \"areaCode\": \"86\", \"phone\": \"17698999999\", \"role\": \"admin\", \"timezone\": \"Asia/Shanghai\", \"receiveAlert\": true, \"dingDingList\": [] }, \"createMongoDBAble\": true, \"generateAgentIdAble\": true, \"token\": \"\" } 2 保存新用户信息. 2.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/member/register 2.2 请求参数 Name Located in Description Required Schema memberMongoEntity Body 用户实体对象 Yes MemberMongoEntity Ex. 保存新用户信息;其中 MemberMongoEntity 如下所示: { \"account\": \"chen123556\", \"password\": \"123456\", \"email\": \"123356789@qq.com\", \"phone\": \"17699969999\" } 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"id\": \"62da7bd6239d00094230b525\", \"createTime\": 1658485718459, \"updateTime\": 1658485718459, \"account\": \"chen123556\", \"password\": \"\", \"email\": \"123356789@qq.com\", \"areaCode\": \"86\", \"phone\": \"17699969999\", \"role\": \"admin\", \"timezone\": \"Asia/Shanghai\", \"receiveAlert\": true, \"dingDingList\": [] } } 3 更新用户信息 3.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/member/update 3.2 请求参数 Name Located in Description Required Schema memberMongoEntity Body 用户实体对象 Yes MemberMongoEntity Ex. 更新用户信息;其中 MemberMongoEntity 如下所示: { \"id\": \"62be61c7cbeff906da28f6ff\", \"createTime\": 1659602792412, \"updateTime\": 1659605792412, \"account\": \"chen123\", \"password\": \"\", \"email\": \"110236111@qq.com\", \"areaCode\": \"86\", \"phone\": \"17699999999\", \"role\": \"admin\", \"timezone\": \"A1\", \"receiveAlert\": true, \"dingDingList\": [ \"_\" ], \"avatar\": \"\" } 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"id\": \"62da7bd6239d00094230b525\", \"createTime\": 1658485718459, \"updateTime\": 1658486089634, \"account\": \"chen123556\", \"password\": \"\", \"email\": \"98765221@qq.com\", \"areaCode\": \"86\", \"phone\": \"17699954999\", \"role\": \"admin\", \"timezone\": \"Asia/Shanghai\", \"receiveAlert\": true, \"dingDingList\": [] } } 4 搜索用户 4.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/member/findMemberData// 4.2 请求参数 Name Located in Description Required Schema pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int map Body 用户信息 Yes Map Ex. 搜索用户;其中 Map 如下所示: { \"account\": \"chen\", \"phone\": \"176\", \"email\": \"11\" } 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62d8b50b239d00094230b37c\", \"createTime\": 1658369291763, \"updateTime\": 1658369291763, \"account\": \"chen123456\", \"password\": null, \"email\": \"123456789@qq.com\", \"areaCode\": \"86\", \"phone\": \"17699999999\", \"role\": \"admin\", \"timezone\": \"Asia/Shanghai\", \"receiveAlert\": true, \"dingDingList\": [] } ] } 5 查询用户数量 5.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/member/findMemberCount 5.2 请求参数 Name Located in Description Required Schema map Body 用户信息 Yes Map Ex. 搜索用户;其中 Map 如下所示: { \"account\": \"chen\", \"phone\": \"\", \"email\": \"\" } 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 6 更新接收警报 6.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/receiveAlert// 6.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String value Path 是否开启 Yes boolean 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 7 更新时区 7.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/timezone/ 7.2 请求参数 timezone:Asia/Shanghai Name Located in Description Required Schema memberId Path 用户id Yes String timezone Params 时区 Yes String 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 8 更新角色 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/role// 8.2 请求参数 value:user,admin Name Located in Description Required Schema memberId Path 用户id Yes String value Path 角色 Yes String 8.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 9 更新是否可以创建mongodb 9.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/createMongoDBAble// 9.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String value Path 是否开启 Yes boolean 9.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 10 更新是否可以创建agentId权限 10.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/generateAgentIdAble// 10.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String value Path 是否开启 Yes boolean 10.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 11 更新用户资源信息 11.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/userResourceInfo//// 11.2 请求参数 value:read,write,null type:mongodb,host Name Located in Description Required Schema memberId Path 用户id Yes String objectId Path 根据type类型提供id Yes String type Path 类型 Yes String value Path 权限 Yes String 11.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 12 删除用户 12.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/delete/user/ 12.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String 12.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 13 获取用户资源 13.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getUserResource/ 13.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String 13.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"id\": \"62eb99cdca0e230d4a13c423\", \"createTime\": 1659607501509, \"updateTime\": 1660121964509, \"createMongoDBAble\": true, \"generateAgentIdAble\": true, \"mongoDBClusterList\": [ { \"id\": \"62eb915e32f3671236d6a0be\", \"competence\": \"write\" }, { \"id\": \"62ec7ac2ca0e230d4a13c490\", \"competence\": \"write\" } ], \"hostList\": [ { \"id\": \"62ecaf96ca0e230d4a13c75f\", \"competence\": \"write\" }, { \"id\": \"62ecb027ca0e230d4a13c764\", \"competence\": \"write\" } ] } } 14 获取用户服务数据 14.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getUserServerResourceData//// 14.2 请求参数 competence:write,read,null Name Located in Description Required Schema memberId Path 用户id Yes String competence Path 权限 Yes String pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int hostName Params 主机名称 No String 14.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"_id\": \"62eb906a32f3671236d6a0af\", \"hostName\": \"server121\", \"osVersion\": \"CentOS Linux release 7.7.1908 (Core)\" }, { \"_id\": \"62eb90ea32f3671236d6a0b7\", \"hostName\": \"server90\", \"osVersion\": \"CentOS Linux release 7.7.1908 (Core)\" } ] } 15 获取用户服务数 15.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getUserServerResourceCount// 15.2 请求参数 competence:write,read,null Name Located in Description Required Schema memberId Path 用户id Yes String competence Path 权限 Yes String 15.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 16 获取用户mongoDB集群资源数据 16.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getUserMongoDBClusterResourceData//// 16.2 请求参数 competence:write,read,null Name Located in Description Required Schema memberId Path 用户id Yes String competence Path 权限 Yes String pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int clusterName Params 集群名称 No String 16.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data.clusterName 集群名称 String data.type 类型:单节点,复制集,分片,纳管 String 17 获取用户mongoDB集群数 17.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getUserMongoDBClusterResourceCount// 17.2 请求参数 competence:write,read,null Name Located in Description Required Schema memberId Path 用户id Yes String competence Path 权限 Yes String clusterName Params 集群名称 No String 17.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 18 获取信息数据 18.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getMessageData// 18.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int operatorName Params 操作者名称 No String objectName Params 被操作的对象名称 No String status Params 状态 No boolean message Params 消息 No String startTime Params 开始时间 No long endTime Params 结束时间 No long 18.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"62fb00088e34f36c92fb013d\", \"createTime\": 1660616712771, \"updateTime\": 1660616712771, \"message\": \"主机:server190已宕机\\r\\n\\t告警时间UTC:2022-08-16 02:22:56\", \"type\": \"alert\", \"objectId\": \"62f343406ccc6972abb87818\", \"objectName\": \"server190\", \"operatorId\": null, \"operatorName\": null, \"eventId\": null, \"list\": [] } ] } 19 获取消息数量 19.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getMessageCount 19.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String operatorName Params 操作者名称 No String objectName Params 被操作的对象名称 No String status Params 状态 No boolean message Params 消息 No String startTime Params 开始时间 No long endTime Params 结束时间 No long 19.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 long 20 更新消息状态 20.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/messageStatus// 20.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String messageId Path 消息id Yes String 20.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 21 更新所有消息状态 21.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/update/allMessageStatus/ 21.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String 21.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 22 获取所有成员id与名称 22.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/getAllMemberIdAndName 22.2 请求参数 Name Located in Description Required Schema memberName Params 用户名称 Yes String 22.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List { \"code\": 1000, \"data\": [ { \"id\": \"63031cb149d5ad2d50af5d15\", \"name\": \"admin\" }, { \"id\": \"630321262ef5221f75e9f0c6\", \"name\": \"chen\" } ] } 23 获取所有成员id与名称 23.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/member/resetPassword/ 23.2 请求参数 Name Located in Description Required Schema memberId Path 用户id Yes String 23.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List "},"whalelaPlatform/07-APIReference/MongoOperate.html":{"url":"whalelaPlatform/07-APIReference/MongoOperate.html","title":"Mongo","keywords":"","body":"MongoOperate接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 其参数为时间的都以时间戳形式传递。 有些接口调用时需用到clusterId、replicateId、eventId、mongoMemberId eventId在\"获取集群日志信息\"接口处找到所需事件的id mongoMemberId在“查找mongoDB集群信息数据”接口返回结果集中mongoMember集合中。 replicateId在“查找mongoDB集群信息数据”接口返回结果集中replicate集合中。 clusterId在“查找mongoDB集群信息数据”接口返回结果集中。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" Deprecated 已弃用 1 创建mongodb单例 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createMongoStandalone/// 1.2 请求参数 Name Located in Description Required Schema isNewCluster Path 是否时新集群 Yes boolean clusterId Path 集群id Yes String replicateId Path 复制集id Yes String mongoMember Body 实体对象 Yes MongoMember tag Params 标签 No String Ex. 创建mongodb单例;其中 MongoMember 如下所示: { \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"25567\", \"dataDirectory\": \"/home/chen/data25567\", \"logFile\": \"/home/chen/log25567.log\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"deleteDataAndLogAble\": \"false\", \"authAble\": \"false\", \"userName\": \"\", \"password\": \"\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String data 返回数据 JSON { \"msg\": \"正在执行\", \"eventId\": \"62ce9a7ded494511782ff392\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"memberName\": \"null:27017\", \"hostName\": null, \"hostId\": null, \"port\": \"27017\", \"version\": null, \"upgradeVersion\": null, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"currentTimeMillis\": 1657707133455, \"dataDirectory\": \"/var/ops/mongodb1657707133455/data/\", \"logFile\": \"/var/ops/mongodb1657707133455/log/log.log\", \"confPath\": \"/var/ops/mongodb1657707133455/mongo.conf\", \"deleteDataAndLogAble\": false, \"authAble\": false, \"runShCmd\": null, \"type\": 11, \"status\": \"无状态\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"\", \"clusterId\": \"62ce9a7ded494511782ff393\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": {}, \"operateVersion\": 0 } } 2 单节点转为复制集. 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/standaloneToReplicate// 2.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String replName Path 复制集名称 Yes String 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 3 创建mongodb复制集 3.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createMongoReplica 3.2 请求参数 Name Located in Description Required Schema mongoReplica Body mongo复制集实体对象 Yes MongoReplica tag Params 标签 No String Ex. 创建mongodb复制集;MongoReplica 如下所示： { \"userName\": \"\", \"password\": \"\", \"type\": 1, \"clusterId\": \"\", \"replicaName\": \"qaq\", \"deleteDataAndLogAble\": false, \"status\": \"\", \"authAble\": \"false\", \"operaLog\": [], \"memberList\": [ { \"type\": 31, \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"25025\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"votes\": \"1\", \"priority\": \"1\", \"delay\": \"\", \"buildIndexes\": true, \"dataDirectory\": \"/home/chen/data25025\", \"logFile\": \"/home/chen/log25025.log\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } ], \"replicationSettings\": { \"protocolVersion\": null, \"chainingAllowed\": null, \"writeConcernMajorityJournalDefault\": null, \"heartbeatTimeoutSecs\": null, \"electionTimeoutMillis\": null, \"catchUpTimeoutMillis\": null, \"catchUpTakeoverDelayMillis\": null, \"getLastErrorDefaults\": null, \"forceReconfigure\": null } } 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON msg 返回消息 String eventId 事件ID String { \"msg\": \"正在执行\", \"eventId\": \"62da7357239d00094230b51a\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"replicaName\": null, \"memberList\": [], \"type\": 1, \"clusterId\": \"62cf7903ed494511782ff4f9\", \"deleteDataAndLogAble\": false, \"status\": null, \"operaLog\": [], \"replicationSettings\": {}, \"replicationOtherSettings\": {}, \"authAble\": false, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"protocolVersion\": 1, \"writeConcernMajorityJournalDefault\": false } } 4 创建mongodb分片 4.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createMongoSharded 4.2 请求参数 Name Located in Description Required Schema mongoShard Body 实体对象 Yes MongoShard tag Params 文件名称 No String Ex. 创建mongodb分片;其中 MongoShard 如下所示: { \"clusterName\": \"fenpian\", \"deleteDataAndLogAble\": \"false\", \"authAble\": \"false\", \"userName\": \"\", \"password\": \"\", \"shardingMap\": { \"shard1\": { \"memberList\": [ { \"type\": 1, \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"44567\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"votes\": \"1\", \"priority\": \"1\", \"delay\": \"\", \"buildIndexes\": \"true\", \"dataDirectory\": \"/home/chen/data44567\", \"logFile\": \"/home/chen/log44567.log\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } ], \"replicationSettings\": { \"replicaSetId\": \"shard1\", \"protocolVersion\": null, \"chainingAllowed\": null, \"writeConcernMajorityJournalDefault\": null, \"heartbeatTimeoutSecs\": null, \"electionTimeoutMillis\": null, \"catchUpTimeoutMillis\": null, \"catchUpTakeoverDelayMillis\": null, \"getLastErrorDefaults\": null, \"forceReconfigure\": null } } }, \"config\": { \"memberList\": [ { \"type\": 1, \"hostName\": \"server100\", \"hostId\": \"62b153a344ba1b7771c42df7\", \"port\": \"44567\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"votes\": \"1\", \"priority\": \"1\", \"delay\": \"\", \"buildIndexes\": \"true\", \"dataDirectory\": \"/home/chen/data44567\", \"logFile\": \"/home/chen/log44567.log\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } ], \"replicationSettings\": { \"replicaSetId\": \"config\", \"protocolVersion\": \"\", \"chainingAllowed\": \"\", \"writeConcernMajorityJournalDefault\": \"\", \"heartbeatTimeoutSecs\": \"\", \"electionTimeoutMillis\": \"\", \"catchUpTimeoutMillis\": \"\", \"catchUpTakeoverDelayMillis\": \"\", \"getLastErrorDefaults\": \"\", \"forceReconfigure\": \"\" } }, \"mongoS\": [ { \"logFile\": \"/home/chen/log44567.log\", \"dataDirectory\": \"/home/chen/data44567\", \"hostName\": \"server200\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"port\": \"44567\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" }, \"hostId\": \"62cbbd7607bebb71b8429e5e\" } ] } 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String data 返回数据 JSON { \"msg\": \"正在执行\", \"eventId\": \"62da73c4239d00094230b51c\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"clusterName\": null, \"clusterId\": \"62cf8e51ed494511782ff6c8\", \"config\": null, \"mongoS\": [], \"shardingMap\": {}, \"operaLog\": [], \"deleteDataAndLogAble\": false, \"authAble\": false, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"status\": null } } 5 操作开启认证的集群 5.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/operateClusterAbleAuth/ 5.2 请求参数 Name Located in Description Required Schema clusterId Path 文件名称 Yes String map Body 传参 Yes Map Ex. 操作开启认证的集群;其中map 如下所示: { \"authAble\": \"true\", //false 时 不需要其余参数 \"userName\": \"123\", \"password\": \"123\" } 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String 6 添加shard 6.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/addShard/ 6.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String mongoReplica Body mongo复制集实体对象 Yes MongoReplica Ex. 添加shard;其中 MongoReplica 如下所示: { \"type\": 3, \"clusterId\": \"\", \"replicaName\": \"qwe\", \"authAble\": \"true\", \"userName\": \"\", \"password\": \"\", \"deleteDataAndLogAble\": false, \"status\": \"\", \"operaLog\": [], \"memberList\": [ { \"type\": 51, \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"44453\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"votes\": \"1\", \"priority\": \"1\", \"delay\": \"\", \"buildIndexes\": true, \"dataDirectory\": \"/home/chen/data44453\", \"logFile\": \"/home/chen/log44453.log\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } ] } 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 7 纳管集群信息 7.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/mongoManaged 7.2 请求参数 Name Located in Description Required Schema mongoMember Body mongo成员实体对象 Yes MongoMember Ex. 纳管集群信息;其中 MongoMember 如下所示: { \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"27017\", \"authAble\": \"false\", \"userName\": \"\", \"password\": \"\", \"authDBName\": \"\", \"clusterName\": \"fp\" } 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String data 返回数据 JSON { \"msg\": \"正在执行\", \"code\": 1000, \"data\": { \"id\": \"62cfa41fed494511782ff7a2\", \"createTime\": 1657775135326, \"updateTime\": 1657775135326, \"clusterName\": \"fp\", \"type\": 1, \"mongoMember\": { ... }, \"mongoReplica\": null, \"mongoShard\": null, \"status\": null, \"fcv\": null, \"tag\": null, \"create\": true } } 8 升降级 8.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/upgrade/// 8.2 请求参数 type: 1 升级,-1 降级 Name Located in Description Required Schema clusterId Path 集群id Yes String version Path 版本 Yes String type Path 集群类型 Yes String 8.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 9 针对节点进行操作. 9.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/operate/// 9.2 请求参数 operateType:updateMongoMemberInfo,startUp,shuntDown,restart,delete,canalQPS,openQPS,canalTopAndOP,openTopAndOP,canalCollectMongoLog,openColletMongoLog ,becomePrimary ,removeMember Name Located in Description Required Schema clusterId Path 集群id Yes String mongoMemberId Path mongo集群id Yes String operateType Path 操作类型 Yes String 9.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 10 针对集群进行操作 10.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/operate// 10.2 请求参数 operateType:updateMongoMemberInfo,startUp,shuntDown,restart,delete,mdiag Name Located in Description Required Schema clusterId Path 集群id Yes String operateType Path 操作类型 Yes String 10.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 11 更新集群信息 11.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/updateClusterInfo 11.2 请求参数 Name Located in Description Required Schema mongoClusterInformation Body Mongo集群信息实体对象 Yes JSON Ex. 更新集群信息;其中MongoClusterInformation 如下所示: { \"id\": \"62cfa574ed494511782ff7c1\", \"createTime\": 1657775520238, \"updateTime\": 1657775520238, \"clusterName\": \"chen:63343\", \"type\": 1, \"mongoMember\": { \"id\": \"62cfa574ed494511782ff7c1\", \"createTime\": 1657775520238, \"updateTime\": 1657776654587, \"memberName\": \"chen:63343\", \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"63343\", \"version\": \"4.2.21\", \"upgradeVersion\": null, \"userName\": \"\", \"password\": \"\", \"authDbName\": \"admin\", \"currentTimeMillis\": 1657775476157, \"dataDirectory\": \"/home/chen/data63343\", \"logFile\": \"/home/chen/log63343.log\", \"confPath\": \"/home/chen/data63343/chen_63343.conf\", \"deleteDataAndLogAble\": false, \"authAble\": false, \"runShCmd\": \"\", \"type\": 11, \"status\": \"正在运行\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"10654\", \"clusterId\": \"62cfa574ed494511782ff7c1\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": { }, \"operateVersion\": 80 }, \"mongoReplica\": null, \"mongoShard\": null, \"status\": \"正常\", \"fcv\": \"4.2\", \"tag\": \"\", \"create\": true } 11.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String --- 12 创建单节点 12.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createMongoStandalone 12.2 请求参数 Name Located in Description Required Schema mongoMember Body Mongo对象 Yes MongoMember tag Params 标签 No String Ex. 创建单节点;mongoMember 如下所示: { \"hostName\": \"chen\", \"hostId\": \"62bbfbe9a46517610435d615\", \"port\": \"25567\", \"dataDirectory\": \"/home/chen/data25567\", \"logFile\": \"/home/chen/log25567.log\", \"version\": \"mongodb-linux-x86_64-rhel70-4.2.21\", \"deleteDataAndLogAble\": \"false\", \"authAble\": \"false\", \"userName\": \"\", \"password\": \"\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } 12.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String data 返回数据 JSON { \"msg\": \"正在执行\", \"eventId\": \"62fb0d67fe07726988b7621b\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"memberName\": \"null:27017\", \"hostName\": null, \"hostId\": null, \"port\": \"27017\", \"version\": null, \"upgradeVersion\": null, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"currentTimeMillis\": 1660620135962, \"dataDirectory\": \"/var/ops/mongodb1660620135962/data/\", \"logFile\": \"/var/ops/mongodb1660620135962/log/log.log\", \"confPath\": \"/var/ops/mongodb1660620135962/mongo.conf\", \"authAble\": false, \"runShCmd\": null, \"type\": 11, \"status\": \"无状态\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"\", \"clusterId\": \"62fb0d67fe07726988b7621c\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": {}, \"operateVersion\": 0 } } 13 复制集添加节点 13.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/replAddMember// 13.2 请求参数 Name Located in Description Required Schema mongoMember Body Mongo对象 Yes MongoMember clusterId Path 集群id Yes String replicateId Path 复制集id Yes String Ex. 创建单节点;mongoMember 如下所示: { \"authAble\": \"true\", \"userName\": \"\", \"password\": \"\", \"type\": 1, \"hostName\": \"server100\", \"hostId\": \"62ecdb15dce5916b2b6f1b3c\", \"votes\": 1, \"delay\": 10000, \"priority\": 1, \"port\": \"34535\", \"dataDirectory\": \"/home/chen/data34535\", \"logFile\": \"/home/chen/data34535/log.log\", \"version\": \"mongodb-linux-x86_64-enterprise-rhel70-4.0.25\", \"deleteDataAndLogAble\": \"\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"0.3\" } } 13.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String data 返回数据 JSON { \"msg\": \"正在执行\", \"eventId\": \"62fb0fc8fe07726988b76242\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"memberName\": \"null:27017\", \"hostName\": null, \"hostId\": null, \"port\": \"27017\", \"version\": null, \"upgradeVersion\": null, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"currentTimeMillis\": 1660620744008, \"dataDirectory\": \"/var/ops/mongodb1660620744008/data/\", \"logFile\": \"/var/ops/mongodb1660620744008/log/log.log\", \"confPath\": \"/var/ops/mongodb1660620744008/mongo.conf\", \"authAble\": false, \"runShCmd\": null, \"type\": 11, \"status\": \"无状态\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"\", \"clusterId\": \"62f5bf0ac8b0132564c7d481\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": {}, \"operateVersion\": 0 } } 14 添加mongos 14.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/addMongoS/ 14.2 请求参数 Name Located in Description Required Schema mongoMember Body Mongo对象 Yes MongoMember clusterId Path 集群id Yes String Ex. 创建单节点;mongoMember 如下所示: { \"hostName\": \"usdp\", \"hostId\": \"62f343c86ccc6972abb87835\", \"port\": \"29003\", \"dataDirectory\": \"/home/guanfei/data/sharding3/mongos/data28/\", \"logFile\": \"/home/guanfei/data/sharding3/mongos/data28/mongodb.log\", \"version\": \"mongodb-linux-x86_64-enterprise-rhel70-3.2.21\", \"configurationOptions\": { \"storage.wiredTiger.engineConfig.cacheSizeGB\": \"1\" } } 14.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String eventId 事件id String data 返回数据 JSON { \"msg\": \"正在执行\", \"eventId\": \"62fb1061fe07726988b76246\", \"code\": 1000, \"data\": { \"id\": null, \"createTime\": 0, \"updateTime\": 0, \"memberName\": \"null:27017\", \"hostName\": null, \"hostId\": null, \"port\": \"27017\", \"version\": null, \"upgradeVersion\": null, \"userName\": null, \"password\": null, \"authDbName\": \"admin\", \"currentTimeMillis\": 1660620897087, \"dataDirectory\": \"/var/ops/mongodb1660620897087/data/\", \"logFile\": \"/var/ops/mongodb1660620897087/log/log.log\", \"confPath\": \"/var/ops/mongodb1660620897087/mongo.conf\", \"authAble\": false, \"runShCmd\": null, \"type\": 11, \"status\": \"无状态\", \"monitorServerStatus\": false, \"monitorTopAndOp\": false, \"collectMongoLog\": false, \"mongoLogFileOffset\": 0, \"operaLogTemp\": [], \"votes\": 1, \"priority\": 1.0, \"delay\": 0, \"buildIndexes\": true, \"procId\": \"\", \"clusterId\": \"62f35136bae6034d49b2a0f9\", \"replId\": null, \"clusterName\": null, \"tags\": {}, \"configurationOptions\": {}, \"operateVersion\": 0 } } 15 更新集群名称 15.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/mongo/updateClusterName// 15.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String newClusterName Path 新名称 Yes String 15.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 16 执行一个计划 16.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/exeExplainPlan// 16.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String mongoMemberId Path mongo成员id Yes String document Body 请求参数 Yes Map 16.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON { \"code\": 1000, \"data\": { \"explain\": { \"queryPlanner\": { \"plannerVersion\": 1, \"namespace\": \"test.order\", \"indexFilterSet\": false, \"parsedQuery\": {}, \"winningPlan\": { \"stage\": \"EOF\" }, \"rejectedPlans\": [] }, \"executionStats\": { \"executionSuccess\": true, \"nReturned\": 0, \"executionTimeMillis\": 0, \"totalKeysExamined\": 0, \"totalDocsExamined\": 0, \"executionStages\": { \"stage\": \"EOF\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1 }, \"allPlansExecution\": [] }, \"serverInfo\": { \"host\": \"server121\", \"port\": 47018, \"version\": \"4.4.12\", \"gitVersion\": \"51475a8c4d9856eb1461137e7539a0a763cc85dc\" }, \"ok\": 1.0, \"$clusterTime\": { \"clusterTime\": { \"array\": false, \"binary\": false, \"boolean\": false, \"bsonType\": \"TIMESTAMP\", \"dBPointer\": false, \"dateTime\": false, \"decimal128\": false, \"document\": false, \"double\": false, \"inc\": 85, \"int32\": false, \"int64\": false, \"javaScript\": false, \"javaScriptWithScope\": false, \"null\": false, \"number\": false, \"objectId\": false, \"regularExpression\": false, \"string\": false, \"symbol\": false, \"time\": 1660618654, \"timestamp\": true, \"value\": 7132302810057539669 }, \"signature\": { \"hash\": { \"data\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAA=\", \"type\": 0 }, \"keyId\": 0 } }, \"operationTime\": { \"array\": false, \"binary\": false, \"boolean\": false, \"bsonType\": \"TIMESTAMP\", \"dBPointer\": false, \"dateTime\": false, \"decimal128\": false, \"document\": false, \"double\": false, \"inc\": 85, \"int32\": false, \"int64\": false, \"javaScript\": false, \"javaScriptWithScope\": false, \"null\": false, \"number\": false, \"objectId\": false, \"regularExpression\": false, \"string\": false, \"symbol\": false, \"time\": 1660618654, \"timestamp\": true, \"value\": 7132302810057539669 } }, \"documentsReturned\": 0, \"queryExecutionTime\": 0, \"indexKeysExamined\": 0, \"documentsExamined\": 0, \"stagList\": [ { \"stage\": \"EOF\", \"nReturned\": 0, \"executionTimeMillisEstimate\": 0, \"works\": 1, \"advanced\": 0, \"needTime\": 0, \"needYield\": 0, \"saveState\": 0, \"restoreState\": 0, \"isEOF\": 1 } ] } } 17 复制集初始化 17.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/mongoReplicaInit// 17.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String replicateId Path 复制集id Yes String 17.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 JSON 18 收集mongo集群日志 18.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/collectMongoDLog/ 18.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String startTime Params 开始时间 Yes long endTime Params 结束时间 Yes long 18.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 19 移除节点 19.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/removeShard// 19.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String shardReplId Path 分片复制集id Yes String 19.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 19 创建用户 19.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/mongo/createMongoUser/ 19.2 请求参数 Name Located in Description Required Schema clusterId Path 集群id Yes String map Body 用户信息 Yes Map 19.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String "},"whalelaPlatform/07-APIReference/Other.html":{"url":"whalelaPlatform/07-APIReference/Other.html","title":"Other","keywords":"","body":"Other接口 此接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 请求头默认格式，特殊情况特殊声明 KEY VALUE Accept-Encoding gzip, deflate, br Connection keep-alive Content-Type application/json 1 获取所有mongo版本信息. 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/other/getAllMongoVersion 1.2 请求 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List 2 获取所有whaleal版本信息. 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/other/getWhalealVersion 2.2 请求 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String "},"whalelaPlatform/07-APIReference/Third_party.html":{"url":"whalelaPlatform/07-APIReference/Third_party.html","title":"Third_party","keywords":"","body":"Third_party接口 此接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 请求头默认格式，特殊情况特殊声明 KEY VALUE Accept-Encoding gzip, deflate, br Connection keep-alive Content-Type application/json 1 发送钉钉消息 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/third/ding/sendMsg 1.2 请求参数 Name Located in Description Required Schema accessToken Params 钉钉机器人token Yes String secret Params 钉钉机器人secret Yes String content Params 消息内容 Yes String 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 2 发送邮件消息 2.1 请求路径 GET: http://{Server-Host}:{端口}/api/third/email/sendMsg 2.2 请求参数 Name Located in Description Required Schema email Params 邮箱账号 Yes String content Params 消息内容 Yes String 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String 3 发送短信验证码 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/third/sms/sendMsg 3.2 请求参数 Name Located in Description Required Schema mobile Params 手机号 Yes String content Params 消息内容 Yes String 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回消息 String --- "},"whalelaPlatform/07-APIReference/Configuration.html":{"url":"whalelaPlatform/07-APIReference/Configuration.html","title":"Configuration","keywords":"","body":"Configuration 接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 其参数为时间的都以时间戳形式传递。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" 1 获取smtp设置 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/configuration/getSmtp 1.2 请求 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 SmtpEntity 2 更新 smtp设置. 2.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/configuration/updateSmtp 2.2 请求参数： Name Located in Description Required Schema smtpEntity Body smtp实体类 Yes SmtpEntity Ex. 更新 smtp设置.;SmtpEntity 如下所示： { \"id\": \"630864e29c477153b441b426\", \"createTime\": 0, \"updateTime\": 0, \"port\": \"465\", \"host\": \"smtp.qiye.163.com\", \"from\": \"notifications@jinmuinfo.com\", \"title\": \"whaleal\", \"userName\": \"notifications@jinmuinfo.com\", \"password\": \"89k235Xwma9caArk\", \"default_encoding\": \"utf-8\", \"propertiesMailSmtpSSLEnable\": true, \"propertiesMailSmtpSSLRequired\": true, \"propertiesMailSmtpPort\": null } 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 3 获取设置颗粒度 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/configuration/getConfig 3.2 请求 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ConfigEntity { \"code\": 1000, \"data\": { \"id\": \"whaleal\", \"createTime\": 0, \"updateTime\": 0, \"hostAcquisitionFrequency\": 2, \"mongoAcquisitionFrequency\": 2, \"logSaveTime\": 3600 } } 4 更新配置颗粒度. 4.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/configuration/updateConfig 4.2 请求参数： Name Located in Description Required Schema configEntity Body 设置实体类 Yes ConfigEntity Ex. 更新 smtp设置.;ConfigEntity 如下所示： { \"hostAcquisitionFrequency\": 2, \"mongoAcquisitionFrequency\": 2, \"logSaveTime\": 3600 } 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String "},"whalelaPlatform/07-APIReference/Analysis.html":{"url":"whalelaPlatform/07-APIReference/Analysis.html","title":"Analysis","keywords":"","body":"Analysis接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 其参数为时间的都以时间戳形式传递。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" 1 数据分析 1.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/analysis/analysis// 1.2 请求参数 type: hostAndClusterAndNodeCount,mongoClusterTypeNum,mongoNodeVersionTypeNum,mongoNodeStatusNum,enterpriseAndCommunityNum, mongoClusterQPS,mongoClusterConnUS,mongoClusterDataSize,mongoClusterStorageSize,hostCPU_US,hostDiskIO,hostNetIn, hostNetOut,hostAlert,mongoAlert Name Located in Description Required Schema type Path 类型 Yes String count Path 数量 Yes int 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 Document { \"code\": 1000, \"data\": { \"hostCount\": [ 8 ], \"mongoClusterCount\": [ 4 ], \"mongoNodeCount\": [ 11 ] }, \"createTime\": [ 1664150400000 ], \"name\": \"hostAndClusterAndNodeCount\", \"message\": \"主机,集群,节点数量折线对比图\" } "},"whalelaPlatform/07-APIReference/Project.html":{"url":"whalelaPlatform/07-APIReference/Project.html","title":"Project","keywords":"","body":"Project 接口 接口调用时须在请求头中设置whaleal-Token ，填写参数发起请求，返回内容为 JSON 格式的信息，返回特殊实体类将在最后提供实体类表格。 其参数为时间的都以时间戳形式传递。 请求头默认格式，特殊情况特殊声明 whaleal-Token在调用登录接口时返回，在之后调用接口时将token放置请求头中。 登录接口调用获取whaleal-Token KEY VALUE Accept-Encoding gzip,deflate,br Connection keep-alive Content-Type application/json whaleal-token \"token\" 1 保存project 1.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/project/saveProject 1.2 请求参数： Name Located in Description Required Schema projectMongoEntity Body project实体类 Yes ProjectMongoEntity Ex. 保存project.;projectMongoEntity 如下所示： { \"projectName\": \"test\", \"hostInfo\": [ { \"id\": \"6305fa4491c2f64abf18c581\", \"name\": \"server100\" } ], \"memberInfo\": [ { \"id\": \"630321262ef5221f75e9f0c6\", \"name\": \"chen\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"dingDingList\": [ \"qwe123\" ] } 1.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ProjectMongoEntity { \"msg\": \"保存成功\", \"code\": 1000, \"data\": { \"id\": \"test\", \"createTime\": 1664245657405, \"updateTime\": 1664245657405, \"projectName\": \"test\", \"hostInfo\": [ { \"id\": \"630eddeff3d9e72e3695ea48\", \"name\": \"chen\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"memberInfo\": [ { \"id\": \"63031cb149d5ad2d50af5d15\", \"name\": \"admin\" } ], \"dingDingList\": [ \"qwe123\" ] } } 2 删除project 2.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/project/deleteProject/ 2.2 请求参数： Name Located in Description Required Schema projectId Path 项目id Yes String 2.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int msg 返回消息 String 3 查询所有的project 3.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/project/findAllProject// 3.2 请求参数： Name Located in Description Required Schema pageSize Path 每页大小 Yes int pageIndex Path 第几页 Yes int projectName Params 项目名称 No String hostName Params 主机名称 No String mongoClusterName Params mongo集群名称 No String memberName Params 用户名称 No String 3.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ProjectMongoEntity { \"code\": 1000, \"data\": [ { \"id\": \"project\", \"createTime\": 1664245537831, \"updateTime\": 1664245537831, \"projectName\": \"project\", \"hostInfo\": [ { \"id\": \"630eddeff3d9e72e3695ea48\", \"name\": \"chen\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"memberInfo\": [ { \"id\": \"63031cb149d5ad2d50af5d15\", \"name\": \"admin\" } ], \"dingDingList\": [ \"qwe123\" ] } ] } 4 获取所有的project数量 4.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/project/countAllProject 4.2 请求参数： Name Located in Description Required Schema projectName Params 项目名称 No String hostName Params 主机名称 No String mongoClusterName Params mongo集群名称 No String memberName Params 用户名称 No String 4.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数量 int 5 根据id获取project 5.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/project/findProjectById/ 5.2 请求参数： Name Located in Description Required Schema projectId Path 项目id Yes String 5.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ProjectMongoEntity { \"code\": 1000, \"data\": { \"id\": \"qwe\", \"createTime\": 1663899341009, \"updateTime\": 1663899341009, \"projectName\": \"qwe\", \"hostInfo\": [ { \"id\": \"630eddeff3d9e72e3695ea48\", \"name\": \"chen\" }, { \"id\": \"6305fa4491c2f64abf18c581\", \"name\": \"server100\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"memberInfo\": [ { \"id\": \"632138e2eef4de695d5116db\", \"name\": \"chen123\" }, { \"id\": \"630321262ef5221f75e9f0c6\", \"name\": \"chen\" } ], \"dingDingList\": [] } } 6 更新project 6.1 请求路径 POST: http://{Server-Host}:{端口}/api/server/project/updateProject 6.2 请求参数： Name Located in Description Required Schema projectMongoEntity Body project实体类 Yes ProjectMongoEntity Ex. 更新project.;projectMongoEntity 如下所示： { \"id\": \"qwe\", \"projectName\": \"qwe\", \"hostInfo\": [ { \"id\": \"630eddeff3d9e72e3695ea48\", \"name\": \"chen\" }, { \"id\": \"6305fa4491c2f64abf18c581\", \"name\": \"server100\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"memberInfo\": [ { \"id\": \"632138e2eef4de695d5116db\", \"name\": \"chen123\" }, { \"id\": \"630321262ef5221f75e9f0c6\", \"name\": \"chen\" } ], \"dingDingList\": [] } 6.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 ProjectMongoEntity { \"msg\": \"更新成功\", \"code\": 1000, \"data\": { \"id\": \"qwe\", \"createTime\": 1664248185424, \"updateTime\": 1664248185424, \"projectName\": \"qwe\", \"hostInfo\": [ { \"id\": \"630eddeff3d9e72e3695ea48\", \"name\": \"chen\" }, { \"id\": \"6305fa4491c2f64abf18c581\", \"name\": \"server100\" } ], \"mongoInfo\": [ { \"id\": \"632ae4e496b892559b6a7aab\", \"name\": \"whaleal\" } ], \"memberInfo\": [ { \"id\": \"632138e2eef4de695d5116db\", \"name\": \"chen123\" }, { \"id\": \"630321262ef5221f75e9f0c6\", \"name\": \"chen\" } ], \"dingDingList\": [] } } 7 获取在project中的成员 7.1 请求路径 GET: http://{Server-Host}:{端口}/api/server/project/getMemberInProject 7.2 请求 7.3 返回结果 Description Schema code 状态符:1000成功,其余异常 int data 返回数据 List "},"whalealData/":{"url":"whalealData/","title":"Whaleal Data","keywords":"","body":"Whaleal-data简介 归档平台是一款针对数据的归档软件，归档类型分为冷、热、S3，其中热数据归档支持MYSQL、Oracle、DB2、MongoDB同步数据到MongoDB，MYSQL数据同步到MYSQL。冷数据归档支持MongoDB归档至磁盘文件。S3归档支持MongoDB Gridfs类型上传至目标S3。首页显示任务执行统计、归档容量统计、表作业统计、业务接入数、归档总容量及用户操作。平台可自主配置数据源及目标源在表作业中选择某源端同步至某目标端。表作业配置完成后可在任务配置处配置多个表作业在一个任务中。任务创建完成后在任务调度处可开启作业、禁用作业、立即执行、下线作业，立即执行后可在任务监控处查看对应的任务执行情况。管理员用户可查看各种操作详情等。 平台架构图 软件结构图 "},"whalealData/InstallationDeployment/InstallationRequirements.html":{"url":"whalealData/InstallationDeployment/InstallationRequirements.html","title":"InstallationRequirements","keywords":"","body":"安装要求 硬件要求 操作系统：Windows 10 或更高版本、Linux 发行版（如Ubuntu、CentOS）、MacOS。 处理器：Intel Core i5 或更高级别的处理器。 内存：至少 8GB RAM。 存储空间：至少 100GB 的可用磁盘空间。 网络适配器：支持有线或无线连接的网络适配器。 网络要求 网络访问要求 根据自身需求配置。 端口要求 需要开放指定的端口（如 80 端口用于 HTTP 通信，程序启动所用端口）。 软件要求 操作系统要求 支持 Windows Server 2016 或更高版本。 支持 linux centos 7 及以上版本。 浏览器支持 Google Chrome 版本 80 或更高、Mozilla Firefox 版本 75 或更高。 "},"whalealData/InstallationDeployment/JDKInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/JDKInstallationDeployment.html","title":"JDKInstallationDeployment","keywords":"","body":"JDK 安装部署 Jdk 安装版本建议使用 jdk11. 1.依赖环境 开源 jdk 需字体库支持，Linux 系统中已有则无需安装 yum install fontconfig fc-cache --force fc-cache -f 2.解压 jdk 安装包 tar -zxvf jdk-11.0.9_linux-x64_bin.tar.gz -C /usr/local/ 3.配置环境变量 vi /etc/profile 最后一行添加以下配置 export JAVA_HOME=/usr/local/jdk-11.0.9 export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin source /etc/profile 刷新配置使其生效 4.校验 java –version "},"whalealData/InstallationDeployment/MYSQLInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/MYSQLInstallationDeployment.html","title":"MYSQLInstallationDeployment","keywords":"","body":"Mysql 安装部署 Mysql 推荐使用版本 8.0 开放指定端口或关闭防火墙 1. 查看已经开放的端口 firewall-cmd --list-ports 2.开放指定端口 firewall-cmd --zone=public --add-port=3306/tcp --permanent 2. 重新加载防火墙配置 firewall-cmd --reload 3. 确认端口开放 firewall-cmd --list-ports 4. 关闭防火墙 systemctl stop firewalld 5. 确认防火墙状态 systemctl status firewalld 基础环境准备 1. 创建用户 groupadd mysql useradd -r -g mysql -s /sbin/nologin mysql 2. 安装 MySQL 需要的依赖 yum install -y libncurses* libaio* lrzsz* 3. 解压安装包 tar -xvf mysql-8.0.28-linux-glibc2.12-x86_64.tar -C /usr/local/ 4. 修改文件名称 mv mysql-8.0.28-linux-glibc2.12-x86_64/ mysql 5. 创建所需目录 cd /usr/local/mysql/ 创建数据目录 mkdir data 6. 修改目录权限 chown -R mysql:mysql /usr/local/mysql/ 部署 Mysql 服务 1. 初始化数据库 /usr/local/mysql/bin/mysqld --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --initialize 记录初始化 MySQL 服务密码 2. 编辑 my.cnf [mysqld] basedir=/usr/local/mysql datadir=/usr/local/mysql/data socket=/usr/local/mysql/data/mysql.sock bind-address = 0.0.0.0 user=root port=3306 log-bin=mysql-bin server-id=1 max_connections=2048 character-set-server=utf8 default-storage-engine=INNODB [client] socket=/usr/local/mysql/data/mysql.sock 3. 配置环境变量 echo \"export PATH=$PATH:/usr/local/mysql/bin\">> /etc/profile source /etc/profile 4. 配置启动脚本 复制 mysq 启动文件 cp /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld chmod +x /etc/rc.d/init.d/mysqld 添加启动脚本 cat > /lib/systemd/system/mysqld.service 5.重新加载配置文件 systemctl daemon-reload 6.设置开机自启动 systemctl enable mysqld 7.启动 mysql systemctl start mysqld 8.查看 mysql 端口是否启动 netstat -tunlp | grep 3306 配置密码远程连接 1.输入刚刚打印出来的密码 mysql -u root -p 2.登陆成功后修改 root 密码 ALTER USER 'root'@'localhost' IDENTIFIED BY '123456'; 3.查看用户信息 select user,host,ssl_type from mysql.user; use mysql; 4.修改 host 字段为 % update user set host = '%' where user = 'root'; 5.刷新权限 flush privileges; 添加归档平台字段 1.登录 MySQL 数据库 mysql -u root -p 2.创建数据库 create database filing; 3.添加数据文件 use filing; source /usr/local/filing.sql; 4，查看数据 use filing; show tables; "},"whalealData/InstallationDeployment/NginxInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/NginxInstallationDeployment.html","title":"NginxInstallationDeployment","keywords":"","body":"Nginx 安装部署 开放指定端口或关闭防火墙 1． 查看已经开放的端口 firewall-cmd --list-ports 2.开放指定端口 firewall-cmd --zone=public --add-port=80/tcp --permanent 3.重新加载防火墙配置 firewall-cmd --reload 4.确认端口开放 firewall-cmd --list-ports 5.关闭防火墙 systemctl stop firewalld 6.确认防火墙状态 systemctl status firewalld 安装部署 1. 解压安装包 tar -zxvf nginx-1.16.1.tar.gz -C /usr/local/ 2. 安装依赖 yum install -y pcre pcre-devel yum install -y zlib zlib-devel 3. 配置路径 ./configure --prefix=/usr/local/nginx 4. 编译 make && make install 5. 配置本地主机访问域名解析 vi /etc/hosts ip cloud.whalealMG.com 6. 编辑配置文件 server { listen 80; server_name cloud.whalealmg.com; #本地域名解析 #charset koi8-r; #access_log logs/host.access.log main; location / { root /usr/local/nginx/html/dist/; #前端介质包路径 index index.html index.htm; try_files $uri $uri/ /index.html; } location /filingAdmin/{ proxy_pass http://127.0.0.1:8000/; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; } location ~ .*\\.(js|css|jpg|jpeg|gif|png|ico|pdf|txt)$ { root /usr/local/nginx/html/dist/; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html { root html; } } 7. 启动服务 /usr/local/nginx/sbin/nginx "},"whalealData/InstallationDeployment/RedisInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/RedisInstallationDeployment.html","title":"RedisInstallationDeployment","keywords":"","body":"Redis 安装部署 开放指定端口或关闭防火墙 1． 查看已经开放的端口 firewall-cmd --list-ports 2.开放指定端口 firewall-cmd --zone=public --add-port=6379/tcp --permanent 3.重新加载防火墙配置 firewall-cmd --reload 4.确认端口开放 firewall-cmd --list-ports 5.关闭防火墙 systemctl stop firewalld 6.确认防火墙状态 systemctl status firewalld 安装部署 1. 解压安装包 tar -zxvf redis-4.0.9.tar.gz -C /usr/local/ 2. 重命名 mv redis-4.0.9 redis 3. 安装依赖 yum install gcc -y 4. 编译文件 make && make install 编辑配置文件 vi redis.conf 1. 设置密码 requirepass foobared 修改 requirepass 123456（设置密码为 123456） 2. 后台启动 daemonize no 修改 daemonize yes（设置为后台启动） 3. 远程访问 bind 127.0.0.1 修改 bind 0.0.0.0（设置为远程访问） 4. 启动 redis-server /usr/local/redis/redis.conf 5. 校验 redis-cli "},"whalealData/InstallationDeployment/ZookeeperInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/ZookeeperInstallationDeployment.html","title":"ZookeeperInstallationDeployment","keywords":"","body":"Zookeeper 安装部署 开放指定端口或关闭防火墙 1． 查看已经开放的端口 firewall-cmd --list-ports 2.开放指定端口 firewall-cmd --zone=public --add-port=2181/tcp --permanent 3. 重新加载防火墙配置 firewall-cmd --reload 4. 确认端口开放 firewall-cmd --list-ports 5. 关闭防火墙 systemctl stop firewalld 6. 确认防火墙状态 systemctl status firewalld 安装部署 1. 解压安装包 tar -zxvf apache-zookeeper-3.6.1-bin.tar.gz -C /usr/local/ 2. 重命名文件 mv apache-zookeeper-3.6.1-bin/ zookeeper 3. 启动 /usr/local/zookeeper/bin/zkServer.sh start /usr/local/zookeeper/conf/zoo_sample.cfg 4. 校验 /usr/local/zookeeper/bin/zkServer.sh status /usr/local/zookeeper/conf/zoo_sample.cfg "},"whalealData/InstallationDeployment/Whaleal-dataInstallationDeployment.html":{"url":"whalealData/InstallationDeployment/Whaleal-dataInstallationDeployment.html","title":"Whaleal-dataInstallationDeployment","keywords":"","body":"Whaleal-data安装部署 服务器高可用部署 将服务在多个机器进行部署使用负载均衡器将流量分发到多个服务器上，以实现请求的平衡和分担。常见的负载均衡算法包括轮询、最少连接和哈希算法等。在系统中使用多个相同配置的服务器，以便在一个服务器发生故障时，其他服务器可以接管其工作并保持系统的连续性。常见的冗余备份模式包括主备模式、活动-活动模式和N+1模式等。 程序包部署 前端服务启动 源码编译后生成”dist”介质包。将 dist 介质包发送到服务器上。路径为 nginx 配置的介质包安装路径下 重新启动 nginx 服务 /usr/local/nginx/sbin/nginx -s reload -t 后端服务启动 源码编译后生成”filing-system-0.0.1-SNAPSHOT.jar”介质包。将该介质包上传至服务器。编辑配置文件：application.yml 配置文件内容 server: port: 8000 spring: jackson: time-zone: GMT+8 serialization: fail-on-empty-beans: false datasource: druid: type: com.alibaba.druid.pool.DruidDataSource driverClassName: com.mysql.jdbc.Driver url: jdbc:mysql://IP:3306/filing?characterEncoding=utf-8&useSSL=false username: root password: 123456 initial-size: 5 min-idle: 40 max-active: 100 max-wait: 5000 time-between-eviction-runs-millis: 90000 min-evictable-idle-time-millis: 1800000 test-while-idle: true test-on-borrow: false test-on-return: false validation-query: SELECT 1 filters: stat stat-view-servlet: url-pattern: /druid/* reset-enable: false enabled: true allow: 127.0.0.1 web-stat-filter: url-pattern: /* exclusions: \"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*\" redis: host: 127.0.0.1 port: 6379 timeout: 5000 password: 123456 elasticjob: zookeeper: server-lists: IP:2181 namespace: epanasiashop-job-filing digest: zookeeper:Zkpp.x123 #jwt jwt: header: Authorization secret: filingSecret!@#* expiration: 21600000 online: online-token codeKey: code-key generator: enabled: false sso: clientId: TKDAP clientSecret: B7DuoJeqOGHvVWkPo7Nt # 回调地址 redirectUri: http://:8080/login # 获取验证码 authUri: # 登录第三方认证地址 loginUri: admin: email: test@163.com #该邮箱为归档平台管理员邮箱。 allow-origin: http://127.0.0.1 loginCode: expiration: 2 mybatis-plus: mapper-locations: classpath:mapper/*.xml typeAliasesPackage: com.whaleal.filing.entity,com.whaleal.filing.model type-enums-package: com.whaleal.filing.enums 修改完相应设置后 Java 介质包指定配置文件后台启动 启动命令： nohup java -jar -Xms2048M -Xmx20000M -XX:PermSize=768M -XX:MaxPermSize=1536M -server -jar filing-system-0.0.1-SNAPSHOT.jar --spring.config.location=application.yml --jasypt.encryptor.password=SfXlqZmK4P257 & 查看日志确认启动成功 tail -f nohup.out docker容器快速部署 进入docker-compose.yml同级目录，使用 `docker-compose up -d`启动。 docker服务启动成功后，可通过`docker logs -f root_whaleal-data_1`命令查看whaleal-data服务运行日志。 本地服务器需绑定域名解析登录web端，命令：`sudo sh -c 'echo \"docker服务器ip whaleal-data.com\" >> /etc/hosts'` 登录whaleal-data服务 `http://docker服务器ip` 或者`http://whaleal-data.com` 首次用户登录 user:\"admin\" pwd:\"123456\" 系统强制要求用户修改密码后登录 Tips: 冷数据归档： 冷数据归档默认填写路径为/whalealdb.docker服务映射外部路径为/opt/whalealdb 快速访问 docker容器化启动whaleal-data服务。该服务依赖于mysql,mongodb,redis,zookeeper服务启动，通过nginx服务代理转发在本地浏览器中运行。 "},"whalealData/UserManual/LoginPage/UserFirstLogin.html":{"url":"whalealData/UserManual/LoginPage/UserFirstLogin.html","title":"UserFirstLogin","keywords":"","body":"用户首次登录 ​ 系统初始化设置管理员账号为admin，密码为123456。第一次登录时将提示用户修改密码。首次登录修改密码后重新进行登录即可。 "},"whalealData/UserManual/LoginPage/UserRegistration.html":{"url":"whalealData/UserManual/LoginPage/UserRegistration.html","title":"UserRegistration","keywords":"","body":"用户注册 ​ 平台支持自主注册账号功能，用户注册后管理员用户可对新用户进行资源权限的分配。 "},"whalealData/UserManual/HomepageDisplay/HomepageDisplay.html":{"url":"whalealData/UserManual/HomepageDisplay/HomepageDisplay.html","title":"HomepageDisplay","keywords":"","body":"首页展示 ​ 首页显示任务执行统计、归档容量统计、表作业统计、业务接入数、归档总容量及用户操作的滚动播放，上方时间处可自定义选择某时间段内的数据展示。 任务执行统计 ​ 任务执行统计饼状图显示了在某时间范围内任务执行结果的种类的占比图。其任务执行状态分别有running（正在执行）、successed（成功完成）、failed（执行失败）、other（其余类型）。 归档容量统计 ​ 归档容量统计展示了各数据源类型同步到目标源类型的总大小，第一列为数据源类型第二列为目标源类型，其数据源四种类型都可同步到目标端MongoDB，但数据源为MYSQL时只能同步到MYSQL类型的目标源。第三列为冷数据目标端文件与目标端S3，其只有数据源为MongoDB时才可以归档至ceph，只有源数据为MongoDB Gridfs数据时才可同步到目标S3处。 用户操作统计 ​ 用户操作统计滚动展示了某个用户在某时间做了什么事，一些登录操作及任务执行等都将在此进行展示。 表作业统计 ​ 表作业统计展示了此时间端内各类表作业数量的折线图，方便用户观察近期任务执行趋势。也可选择下拉框内的作业类型进行展示不同类型数据源的折线图。 业务接入（源个数） ​ 业务接入（源个数）指当前平台在此时间段内数据源接入的数量，将次绘制成折线图方便观察近期数据源的增长趋势。同样可选择数据源类型。 归档总量 ​ 归档总容量绘制了当前时间段内本平台总体归档了多大的数据量，使用折线图方便用户观察近期归档总量的增长趋势。 "},"whalealData/UserManual/ConfigurationManagement/DataSourceManagement.html":{"url":"whalealData/UserManual/ConfigurationManagement/DataSourceManagement.html","title":"DataSourceManagement","keywords":"","body":"数据源管理 新增数据源 ​ 数据源新增，点击配置管理下的数据源管理即可查看平台内所有数据源信息。点击第一张图中“新增”按钮弹出第二张图所示表单，即可新增数据源信息；数据源可选MongoDB、MYSQL、Oracle、DB2。连接数据库所用的用户名和密码需要自行输入，option为可选项填项配置相关数据库的某些连接方式等。点击“测试”按钮可验证用户信息是否能连接数据库。之后点击确认保存数据源。 修改数据源 ​ 点击右侧操作栏中蓝色按钮，出现编辑数据源表格与新增数据源表格类似修改过后点击测试，出现测试通过完成后点击确认即可修改完成。 删除数据源 ​ 点击右侧操作栏中红色按钮，出现删除提示，若需删除点击确定即，可若误点可点击取消按钮。 绑定数据源用户 ​ 点击系统管理下的用户管理即可显示所有用户信息，点击需要操作的用户后勾选右侧需要添加的数据源后进行保存即可将数据源绑定至用户。 "},"whalealData/UserManual/ConfigurationManagement/DestinationSourceManagement.html":{"url":"whalealData/UserManual/ConfigurationManagement/DestinationSourceManagement.html","title":"DestinationSourceManagement","keywords":"","body":"目标源管理 新增温/冷/S3数据目标源 ​ 目标源新增，点击配置管理下的目标源配置即可查看平台内所有目标源信息。若想添加温数据目标源点击上方的\"温数据目标源\"，若想添加冷数据目标源点击\"冷数据文件源\"，同理S3类型目标源添加需点击\"S3\"。之后点击新增按钮弹出新增页面冷数据与S3操作与数据源新增类似，测试完成后点击确认即可保存，冷数据文件源填写完成后点击确认即可保存。 修改温/冷/S3数据目标源 ​ 修改目标源点击蓝色按钮跳出编辑页面，温数据目标源与S3操作与数据源修改相同，冷数据文件源修改路径后点击确定即可。 删除温/冷/S3数据目标源 ​ 修改目标源点击红色按钮后弹出提示框，若确定删除点击确认即可，若不想删除点击取消即可。 绑定温/冷/S3数据目标源用户 ​ 绑定目标源操作与绑定数据源相同，若要绑定目标源点击目标源后勾选目标源，文件源与S3同理。之后点击保存后此用户已有此源的权限。 "},"whalealData/UserManual/ConfigurationManagement/TableJobConfiguration.html":{"url":"whalealData/UserManual/ConfigurationManagement/TableJobConfiguration.html","title":"TableJobConfiguration","keywords":"","body":"表作业配置 新增温/冷/S3作业 ​ 点击配置管理下的表作业配置,点击温数据表作业可查看平台内所有温数据表作业信息，点击冷数据表作业配置可查看平台内所有冷数据表作业信息，点击S3表作业配置可查看平台内所有S3表作业信息。同理新增哪种类型的表作业配置需在哪点击新增。之后跳出第二张图片表格，选择完数据源与目标源后可选择一致性校验、归档方式、同步完数据处理方式等。一致性校验选择是后可填写校验百分比。归档模式为“全量更新”的情况下，无须录入sql条件平台直接归档整表数据，归档模式为“增量更新”的情况下，窗口会多出录入sql条件的输入框及自定义sql配置按钮见第三张图；如想自定义配置sql可点击按钮进入第四张图表格进行数据表字段的可视化条件配置。当数据源与目标源同时为MongoDB时可选择Gridfs，若Gridfs为是则同步MongoDB的Gridfs数据类型。 编辑温/冷/S3作业 ​ 点击右侧蓝色按钮弹出编辑表格，修改表作业后点击保存即可。 删除温/冷/S3作业 ​ 点击右侧红色按钮弹出提示框，若确定删除点击确认即可，若不想删除可点击取消。 搜索温/冷/S3作业 ​ 点击上方搜索按钮并填写前面三个条件框，可过滤出当前平台所有符合条件的表作业配置。 查看温/冷/S3作业 ​ 点击右侧查看按钮，弹出白作业配置详情但不可操作。 "},"whalealData/UserManual/ConfigurationManagement/TaskConfiguration.html":{"url":"whalealData/UserManual/ConfigurationManagement/TaskConfiguration.html","title":"TaskConfiguration","keywords":"","body":"任务配置 新增温/冷/S3任务 ​ 点击配置管理下的任务配置，点击温数据任务配置可查看平台内所有温数据归档任务信息，点击冷数据任务配置可查看平台内所有冷数据归档任务信息，点击S3任务配置可查看平台内所有S3归档任务信息。之后在需添加的任务类型配置处点击新增按钮弹出第二张图所示表格。点击添加作业后弹出已配置完成的表作业配置可在任务配置处配置多个表作业在一个任务中如第三张图所示点击确定后将表作业关联至任务配置。任务可分为手工任务、循环任务、单次任务，单次任务可使用Cron表达式设置执行时间，循环任务则必须设置Cron表达式设置循环执行时间。由于一个任务可以有多个表作业，所以在任务配置处可配置执行模式是串行或并行。在任务配置处可配置任务超时时间，也可配置失败重试次数，及任务失败或成功后的提示信息发送邮件至邮箱。配置完成如第四张图后点击确认即可。配置完成后需管理用户进行审核。 编辑温/冷/S3任务 ​ 点击编辑按钮后弹出第一张图所示表格，在审核完成前此任务配置可编辑可删除，但管理用户审核过后不可编辑并不可删除。任务编辑后点击确认即可。 删除温/冷/S3任务 ​ 在管理用户审核完成前可编辑可删除，点击红色删除按钮后弹出提示框，若确认删除点击删除即可，若不想删除点击取消即可。 ​ 搜索温/冷/S3任务 ​ 在搜索按钮前有两个条件框，填写完成后点击搜索可过滤出符合条件的任务配置。 "},"whalealData/UserManual/TaskManagement/TaskScheduling.html":{"url":"whalealData/UserManual/TaskManagement/TaskScheduling.html","title":"TaskScheduling","keywords":"","body":"任务调度 ​ 点击任务管理下的任务调度，该页面展示了已通过审核的任务，搜索按钮前的条件框可根据所需填写条件点击搜索过滤出任务。针对单条任务可对其进行状态的修改，例如作业进行开启、禁用、下线、立即执行。 开启作业 ​ 作业被禁用后不可再执行任务，可点击任务右侧的作业开启将禁用的任务开启，之后可点击立即执行进行任务的执行，或到达定时时间后自动执行。 作业禁用 ​ 可点击任务右侧的灰色按钮将其禁用，禁用后此任务将无法执行，点击开启作业后任务才可恢复正常。 立即执行 ​ 任务右侧的第三个按钮立即执行，若全量任务点击后会将此任务立即开始执行同步任务，若为增量任务点击立即执行将执行未到时间的下次执行任务。 作业下线 ​ 最右侧按钮作业下线点击后将弹出提示框确认是否下线，因下线后不可恢复同时次任务将不可再用。若确认下线点击下线即可，若不下线点击取消。 "},"whalealData/UserManual/TaskManagement/WarmTaskMonitoring.html":{"url":"whalealData/UserManual/TaskManagement/WarmTaskMonitoring.html","title":"WarmTaskMonitoring","keywords":"","body":"任务监控（温） 作业状态 ​ 点击任务管理下的任务监控（温），该页面展示了针对温作业的任务执行状态信息，其中有已完成的任务、进行中的任务、异常任务，每个搜索按钮前都有条件框，可在任务较多不便观察某任务时进行过滤展示。 已完成任务 ​ 点击已完成的任务，此页面展示了正常完成的任务的一些信息，其中有对应任务的执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、源表数据状态、执行sql。并且在上方有四个按钮，搜索、修改源表数据状态、人工删除源表数据、刷新。 搜索 ​ 上方绿色按钮为搜索按钮，前方的条件框输出条件后点击搜索可展示过滤后的已完成任务。 修改原表数据状态 ​ 同步完成后若已手动删除源表数据，可点击黄色按钮修改源表数据为已处理。 人工删除原表数据 ​ 红色按钮为人工删除源表数据，若表作业配置中没有配置自动删除，若想在同步完成后删除源端表可手动去数据库删除，或选择完任务后点人工删除源表数据。 刷新 ​ 任务的进度百分比为3S更新一次，因此进度条展示可能不是实时的，点击刷新按钮可更新任务进度百分比的进度条及一些任务的状态。 进行中任务 ​ 点击进行中的任务，此页面展示了正在执行归档的任务信息，其任务信息有执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、执行sql，上方有三个按钮搜索、终止任务、任务状态校验。 搜索 ​ 绿色按钮为搜索按钮，左侧有条件框可按需填写，填写完成过滤条件后点击搜索按钮，将展示所有符合条件的进行中的任务。 终止任务 ​ 红色按钮为终止任务，选择完任务后点击终止任务可将任务直接终止，之后此任务将出现在异常任务中，若正常完成则出现在已完成的任务中。 任务状态校验 ​ 一个任务可包含多个表作业，当一个表作业完成后执行下个表作业，完成后若任务状态迟迟没有更新则可选择任务后点击任务状态校验更新任务状态。 异常任务 ​ 点击异常任务，此页面展示了异常任务信息，其异常任务信息包含执行策略、执行开始时间、执行结束时间、耗时、执行状态、异常报错、进度百分比、已归档数据条数、执行sql、回滚状态。此页面包含三个按钮即搜索、回滚、重新执行。 搜索 ​ 上方绿色按钮为搜索按钮，左侧有条件框填写条件后点击搜索可过滤出所需的异常任务。 回滚 ​ 异常任务页面中每个异常任务后方都有回滚按钮，可点击子任务的回滚按钮将其同步的异常数据回滚掉，若点击父任务的回滚按钮则将此父任务下的子任务全部回滚掉。 重新执行 ​ 异常任务的子任务后方有重新执行按钮，点击重新执行后将自动生成一个父任务，此异常任务与新生成的父任务所绑定，之后进行异常数据的回滚，当回滚完成后此任务与新生成的父任务将出现在正在执行的任务页面中重新执行此任务。 "},"whalealData/UserManual/TaskManagement/ColdTaskMonitoring.html":{"url":"whalealData/UserManual/TaskManagement/ColdTaskMonitoring.html","title":"ColdTaskMonitoring","keywords":"","body":"任务监控（冷） 作业状态 ​ 点击任务管理下的任务监控（冷），该页面展示了针对冷作业的任务执行状态信息，其中有已完成的任务、进行中的任务、异常任务，每个搜索按钮前都有条件框，可在任务较多不便观察某任务时进行过滤展示。 已完成任务 ​ 点击已完成的任务，此页面展示了正常完成的任务的一些信息，其中有对应任务的执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、归档路径、源表数据状态、执行sql。并且在上方有四个按钮，搜索、修改源表数据状态、人工删除源表数据、刷新。 搜索 ​ 上方绿色按钮为搜索按钮，前方的条件框输出条件后点击搜索可展示过滤后的已完成任务。 修改原表数据状态 ​ 同步完成后若已手动删除源表数据，可点击黄色按钮修改源表数据为已处理。 人工删除原表数据 ​ 红色按钮为人工删除源表数据，若表作业配置中没有配置自动删除，若想在同步完成后删除源端表可手动去数据库删除，或选择完任务后点人工删除源表数据。 刷新 ​ 任务的进度百分比为3s更新一次，因此进度条展示可能不是实时的，点击刷新按钮可更新任务进度百分比的进度条及一些任务的状态。 进行中任务 ​ 点击进行中的任务，此页面展示了正在执行归档的任务信息，其任务信息有执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、执行sql，上方有三个按钮搜索、终止任务、任务状态校验。 搜索 ​ 绿色按钮为搜索按钮，左侧有条件框可按需填写，填写完成过滤条件后点击搜索按钮，将展示所有符合条件的进行中的任务。 终止任务 ​ 红色按钮为终止任务，选择完任务后点击终止任务可将任务直接终止，之后此任务将出现在异常任务中，若正常完成则出现在已完成的任务中。 任务状态校验 ​ 一个任务可包含多个表作业，当一个表作业完成后执行下个表作业，完成后若任务状态迟迟没有更新则可选择任务后点击任务状态校验更新任务状态。 异常任务 ​ 点击异常任务，此页面展示了异常任务信息，其异常任务信息包含执行策略、执行开始时间、执行结束时间、耗时、执行状态、异常报错、进度百分比、已归档数据条数、归档路径、执行sql、回滚状态。此页面包含三个按钮即搜索、回滚、重新执行。 搜索 ​ 上方绿色按钮为搜索按钮，左侧有条件框填写条件后点击搜索可过滤出所需的异常任务。 回滚 ​ 异常任务页面中每个异常任务后方都有回滚按钮，可点击子任务的回滚按钮将其同步的异常数据回滚掉，若点击父任务的回滚按钮则将此父任务下的子任务全部回滚掉。 重新执行 ​ 异常任务的子任务后方有重新执行按钮，点击重新执行后将自动生成一个父任务，此异常任务与新生成的父任务所绑定，之后进行异常数据的回滚，当回滚完成后此任务与新生成的父任务将出现在正在执行的任务页面中重新执行此任务。 "},"whalealData/UserManual/TaskManagement/S3TaskMonitoring.html":{"url":"whalealData/UserManual/TaskManagement/S3TaskMonitoring.html","title":"S3TaskMonitoring","keywords":"","body":"任务监控（S3） ​ 点击任务管理下的任务监控（S3），该页面展示了针对S3作业的任务执行状态信息，其中有已完成的任务、进行中的任务、异常任务，每个搜索按钮前都有条件框，可在任务较多不便观察某任务时进行过滤展示。 作业状态 已完成任务 ​ 点击已完成的任务，此页面展示了正常完成的任务的一些信息，其中有对应任务的执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、源表数据状态、执行sql。并且在上方有四个按钮，搜索、修改源表数据状态、人工删除源表数据、刷新。 搜索 ​ 上方绿色按钮为搜索按钮，前方的条件框输出条件后点击搜索可展示过滤后的已完成任务。 修改原表数据状态 ​ 同步完成后若已手动删除源表数据，可点击黄色按钮修改源表数据为已处理。 人工删除源表数据 ​ 红色按钮为人工删除源表数据，若表作业配置中没有配置自动删除，若想在同步完成后删除源端表可手动去数据库删除，或选择完任务后点击人工删除源表数据按钮进行删除。 刷新 ​ 任务的进度百分比为3s更新一次，因此进度条展示可能不是实时的，点击刷新按钮可更新任务进度百分比的进度条及一些任务的状态。 进行中任务 ​ 点击进行中的任务，此页面展示了正在执行归档的任务信息，其任务信息有执行策略、执行开始时间、执行结束时间、耗时、执行状态、进度百分比、已归档条数、执行sql，上方有三个按钮搜索、终止任务、任务状态校验。 搜索 ​ 绿色按钮为搜索按钮，左侧有条件框可按需填写，填写完成过滤条件后点击搜索按钮，将展示所有符合条件的进行中的任务。 终止任务 ​ 红色按钮为终止任务，选择完任务后点击终止任务可将任务直接终止，之后此任务将出现在异常任务中，若正常完成则出现在已完成的任务中。 任务状态校验 ​ 一个任务可包含多个表作业，当一个表作业完成后执行下个表作业，完成后若任务状态迟迟没有更新则可选择任务后点击任务状态校验更新任务状态。 异常任务 ​ 点击异常任务，此页面展示了异常任务信息，其异常任务信息包含执行策略、执行开始时间、执行结束时间、耗时、执行状态、异常报错、进度百分比、已归档数据条数、执行sql、回滚状态。此页面包含三个按钮即搜索、回滚、重新执行。 搜索 ​ 上方绿色按钮为搜索按钮，左侧有条件框填写条件后点击搜索可过滤出所需的异常任务。 回滚 ​ 异常任务页面中每个异常任务后方都有回滚按钮，可点击子任务的回滚按钮将其同步的异常数据回滚掉，若点击父任务的回滚按钮则将此父任务下的子任务全部回滚掉。 重新执行 ​ 异常任务的子任务后方有重新执行按钮，点击重新执行后将自动生成一个父任务，此异常任务与新生成的父任务所绑定，之后进行异常数据的回滚，当回滚完成后此任务与新生成的父任务将出现在正在执行的任务页面中重新执行此任务。 "},"whalealData/UserManual/ArchiveManagement/ColdTaskLogQuery.html":{"url":"whalealData/UserManual/ArchiveManagement/ColdTaskLogQuery.html","title":"ColdTaskLogQuery","keywords":"","body":"日志查询（冷） ​ 点击归档管理菜单下的日志查询（冷），可查询出所有文件归档日志信息，此页面有搜索按钮及搜索的条件框和每个任务的回写按钮； 搜索 ​ 上方绿色按钮为搜索按钮，左侧条件框为搜索任务时的条件框，填写条件后点击搜索可过滤出所需的任务。 文件回写 ​ 点击任务后方黄色文件回写按钮，弹出页面点击创建会回写任务创建回写任务。 创建回写任务 ​ 点击创建回写任务按钮弹出以下表单，填写完成后点击确认即可。 删除临时表 ​ 创建回写任务完成后可任务开始回写，完成后点击删除临时表按钮弹出提示框，若确认删除点击执行即可，若不想删除点击取消。 "},"whalealData/UserManual/ArchiveManagement/FileInspectionManagement.html":{"url":"whalealData/UserManual/ArchiveManagement/FileInspectionManagement.html","title":"FileInspectionManagement","keywords":"","body":"文件巡检管理 ​ 点击归档管理菜单下的文件巡检管理，可查询出所有文件巡检日志信息，点击“创建巡检任务”按钮后可创建文件巡检任务，系统执行相应文件检查校验逻辑，针对异常的文件记录，可以手工更新文件路径或执行重新归档操作。 搜索 ​ 上方绿色按钮为搜索按钮，左侧有条件框可进行选填，填写条件后点击搜索按钮即可过滤出所需的巡检。 创建巡检任务 ​ 点击蓝色按钮创建巡检任务弹出以下表格，填写后点击确认即可生成对应温数据目标源的巡检数据，完成后点击查看详情即可查看对应巡检内容如第二张图所示。 "},"whalealData/UserManual/ArchiveManagement/FileFullTextSearch.html":{"url":"whalealData/UserManual/ArchiveManagement/FileFullTextSearch.html","title":"FileFullTextSearch","keywords":"","body":"文件全文检索 ​ 点击归档管理菜单下的文件全文检索，可查询出所有文件全文检索日志信息，点击“创建检索任务”按钮后可创建文件全文检索任务，系统执行相应文件全局搜索，针对找到符合的文件记录，可以进行文件回写操作。 搜索 ​ 上方绿色按钮为搜索按钮，左侧条件框可选填，填写完条件后点击搜索按钮即可过滤出所需检索内容。 创建检索任务 ​ 点击蓝色按钮创建检索任务弹出以下表单，填写后点击确认。 "},"whalealData/UserManual/SystemManagement/UserManagement.html":{"url":"whalealData/UserManual/SystemManagement/UserManagement.html","title":"UserManagement","keywords":"","body":"用户管理 ​ 点击系统管理菜单下的用户管理，此页面只有管理员用户可见，页面展示出平台所有的用户信息及数据库权限绑定等。 搜索 ​ 绿色按钮为搜索按钮，左侧两个条件框，填写完条件后点击搜索可过滤出所需的用户信息。 新增用户 ​ 第二个蓝色按钮为新增按钮，点击“新增”按钮弹出如图界面，填写用户名、邮箱、电话、密码即可新增用户，角色中可选择用户的系统权限及新增的用户状态是否可用。 导出用户 ​ 第三个黄色按钮为导出用户按钮，点击后将生成一份所有用户的xlsx文件，文件名称可自定义。 修改内容 ​ 点击用户右侧的铅笔按钮即修改用户信息，弹出以下编辑页面。除密码不可修改外其余信息可根据需求按要求修改，修改完成后点击确认即可。 修改密码 ​ 点击用户右侧第二个密码按钮，弹出以下图中表格。按需按要求修改完成后点击确认即可保存新密码。 删除用户 ​ 点击用户右侧第三个红色按钮弹出确认框，是否删除此用户。若确认删除点击确认即可，若不想删除点击取消即可。 数据库权限（数据源、目标源、文件源、S3） ​ 点击用户后右侧数据库权限所勾选的源为被点击用户所绑定的源，其中包括数据源、目标源、文件源、S3，勾选用户所需的源后点击保存即可。 "},"whalealData/UserManual/SystemManagement/RoleManagement.html":{"url":"whalealData/UserManual/SystemManagement/RoleManagement.html","title":"RoleManagement","keywords":"","body":"角色管理 ​ 点击系统管理菜单下的角色管理，此页面只有管理员用户可见，页面可以查看平台中所有角色权限分类信息。 搜索 ​ 上方绿色按钮为搜索按钮，左侧两个条件框填写后点击搜索可过滤出所需的角色列表。 新增 ​ 蓝色为新增按钮，点击“新增”按钮弹出如图界面，填写角色名称，角色权限即可新增角色信息。 修改 ​ 点击角色右侧的蓝色铅笔图案按钮，弹出编辑角色框，可自行修改角色的名称及权限或添加描述，完成后点击保存即可。 删除 ​ 右侧红色按钮为删除按钮，点击删除按钮后弹出提示是否确认删除，若确认删除点击确认即可，若不删除点击取消按钮。 菜单分配 ​ 点击用户后右侧出现该角色所绑定的菜单，根据角色实际可操作的权限及菜单进行勾选分配并保存数据即可绑定此角色所能操作的菜单。 "},"whalealData/UserManual/SystemManagement/MenuManagement.html":{"url":"whalealData/UserManual/SystemManagement/MenuManagement.html","title":"MenuManagement","keywords":"","body":"菜单管理 ​ 点击系统管理菜单下的菜单管理，此页面只有管理员用户可见，页面可以查看平台中所菜单的信息，可搜索、新增、修改、删除。 搜索 ​ 上方绿色按钮为搜索按钮，左侧两个条件框填写条件后点击搜索即可过滤出想要的菜单。 新增 ​ 蓝色按钮为新增按钮，弹出下图表单，可自定义菜单类型、菜单图标、外链菜单、菜单是否可见、菜单标题、路由地址、菜单排序、上级目录等。完成配置后点击确认即可保存。 修改 ​ 点击菜单名称右侧的蓝色铅笔按钮，弹出编辑表单可根据需求配置。完成后点击确认即可。 删除 ​ 菜单删除按钮不可用，以防误删可根据需求隐藏。 "},"whalealData/UserManual/SystemManagement/SystemSettings.html":{"url":"whalealData/UserManual/SystemManagement/SystemSettings.html","title":"SystemSettings","keywords":"","body":"SMTP邮件设置 ​ 点击系统管理菜单下的系统设置，此页面只有管理员用户可见，页面展示了SMTP的配置。填写完基本配置后点击测试连接，若测试通过接收到测试邮件后将出现保存按钮，SMTP配置保存后任务配置的告警都将由此配置的邮箱进行发送告警邮件。 "},"whalealData/UserManual/SystemManagement/OperationLog.html":{"url":"whalealData/UserManual/SystemManagement/OperationLog.html","title":"OperationLog","keywords":"","body":"操作日志 搜索 ​ 点击系统管理菜单下的系操作日志，此页面只有管理员用户可见，页面展示了平台用户的一些操作日志，绿色按钮为搜索按钮左侧条件框填写条件后点击搜索可过滤出所需的操作日志。 "},"whalealData/UserManual/SystemManagement/ErrorLog.html":{"url":"whalealData/UserManual/SystemManagement/ErrorLog.html","title":"ErrorLog","keywords":"","body":"错误日志 搜索 ​ 点击系统管理菜单下的系操作日志，此页面只有管理员用户可见，页面展示了平台用户的一些操作错误日志，绿色按钮为搜索按钮左侧条件框填写条件后点击搜索可过滤出所需的错误日志，点击右侧的查看详情按钮可查看错误原因。 "},"whalealData/UserManual/StatisticalReports/TableJobExecutionStatistics.html":{"url":"whalealData/UserManual/StatisticalReports/TableJobExecutionStatistics.html","title":"TableJobExecutionStatistics","keywords":"","body":"表作业执行统计 ​ 点击统计报表菜单下的表作业执行统计，可查询出所有表作业的归档信息，此页面有搜索按钮及搜索的条件框和清空条件框按钮与导出按钮； 搜索 ​ 上图绿色按钮为搜索按钮，左侧有两个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的表作业统计。 清空 ​ 黑色按钮为清空按钮，即情况条件框的时间。 导出 ​ 黄色按钮为导出按钮可将表作业统计信息导出为xlsx文件。 "},"whalealData/UserManual/StatisticalReports/AbnormalJobExecutionStatistics.html":{"url":"whalealData/UserManual/StatisticalReports/AbnormalJobExecutionStatistics.html","title":"AbnormalJobExecutionStatistics","keywords":"","body":"异常作业执行统计 ​ 点击统计报表菜单下的异常作业执行统计，可查询出所有异常表作业的归档信息，此页面有搜索按钮及搜索的条件框和清空条件框按钮与导出按钮； 搜索 ​ 上图绿色按钮为搜索按钮，左侧有一个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的异常表作业统计。 清空 ​ 黑色按钮为清空按钮，即情况条件框的时间。 导出 ​ 黄色按钮为导出按钮可将异常表作业统计信息导出为xlsx文件。 "},"whalealData/UserManual/StatisticalReports/SystemAccessStatistics.html":{"url":"whalealData/UserManual/StatisticalReports/SystemAccessStatistics.html","title":"SystemAccessStatistics","keywords":"","body":"系统接入统计 ​ 点击统计报表菜单下的系统接入统计，可查询出所有接入本平台的业务，此页面有搜索按钮及搜索的条件框和清空条件框按钮与导出按钮； 搜索 ​ 上图绿色按钮为搜索按钮，左侧有两个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的接入信息。 清空 ​ 黑色按钮为清空按钮，即情况条件框的时间。 导出 ​ 黄色按钮为导出按钮可将系统接入统计信息导出为xlsx文件。 详情 ​ 点击每条接入信息后面的详情，弹出此接入信息的详情。 "},"whalealData/UserManual/StatisticalReports/RollbackRecordsStatistics.html":{"url":"whalealData/UserManual/StatisticalReports/RollbackRecordsStatistics.html","title":"RollbackRecordsStatistics","keywords":"","body":"回滚记录统计 ​ 点击统计报表菜单下的回滚记录统计，可查询出所有回滚的任务，此页面有搜索按钮及搜索的条件框与导出按钮，每条回滚的任务都有其任务名、作业名、归档类型、执行开始结束时间、执行状态、异常报错、进度百分比、已归档的条数、归档路径、执行sql、回滚状态； 搜索 ​ 上图绿色按钮为搜索按钮，左侧有仨个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的回滚记录。 导出 ​ 黄色按钮为导出按钮可将回滚记录统计信息导出为xlsx文件。 "},"whalealData/UserManual/StatisticalReports/JobDetails.html":{"url":"whalealData/UserManual/StatisticalReports/JobDetails.html","title":"JobDetails","keywords":"","body":"作业明细 ​ 点击统计报表菜单下的作业明细，页面展示本平台的作业明细详情，此页面有搜索按钮及搜索的条件框与导出按钮。 搜索 ​ 上图绿色按钮为搜索按钮，左侧有仨个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的作业明细。 导出 ​ 黄色按钮为导出按钮可作业明细统计信息导出为xlsx文件 连接 ​ 每条作业明细后方都有其连接按钮，点击连接按钮后将跳转至此作业的任务监控处。 "},"whalealData/UserManual/StatisticalReports/DataHistoricalFlow.html":{"url":"whalealData/UserManual/StatisticalReports/DataHistoricalFlow.html","title":"DataHistoricalFlow","keywords":"","body":"数据历史流向 ​ 点击统计报表菜单下的数据历史流向，页面展示本平台的数据源流向，此页面有搜索按钮及搜索的条件框与清空按钮。 搜索 ​ 上图绿色按钮为搜索按钮，左侧有仨个条件框。填写完过滤条件后点击搜索即可过滤出符合条件的数据流向。 ​ "},"whalealData/use cases/UserRegistration.html":{"url":"whalealData/use cases/UserRegistration.html","title":"UserRegistration","keywords":"","body":"用户注册 ​ 进入首页后登录按钮右下方有立即注册按钮，点击立即注册按钮跳转至第二张图所示。填写完注册信息后点击注册即可。 "},"whalealData/use cases/UserLogin.html":{"url":"whalealData/use cases/UserLogin.html","title":"UserLogin","keywords":"","body":"用户登录 ​ 输入已注册的账号即可登录，管理员首次登录密码为123456，登录完成后会强制更改密码，其余注册用户权限都为用户级别，管理员用户可分配权限给新用户。 ​ "},"whalealData/use cases/AddDataSource.html":{"url":"whalealData/use cases/AddDataSource.html","title":"AddDataSource","keywords":"","body":"添加数据源 ​ 添加数据源点击配置管理菜单下的数据源管理，点击蓝色新增按钮弹出以下表单，填写所添加数据源的基本信息并点击测试，若上方弹出测试通过提示那么点击保存即可新增成功，若测试失败需确认所填信息是否正确。之后点击系统管理下的用户管理，点击所绑定的用户之后在数据源处选定需添加的源后，点击保存该用户即可使用所添加的数据源。 "},"whalealData/use cases/AddDestinationSource.html":{"url":"whalealData/use cases/AddDestinationSource.html","title":"AddDestinationSource","keywords":"","body":"添加目标源 ​ 添加目标源点击配置管理菜单下的目标源管理，点击蓝色新增按钮弹出以下表单并填写所添加目标源的基本信息并点击测试，若上方弹出测试通过提示那么点击保存即可新增成功，若测试失败需确认所填信息是否正确。之后点击系统管理下的用户管理，点击所绑定的用户之后在目标源处选定添加的源，点击保存后该用户即可使用所添加的目标源。 "},"whalealData/use cases/AddWarmDataFullLoadJob.html":{"url":"whalealData/use cases/AddWarmDataFullLoadJob.html","title":"AddWarmDataFullLoadJob","keywords":"","body":"添加温数据全量作业 ​ 点击配置管理菜单下的表作业配置，在温数据表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与目标源库表，归档模式选择全量更新。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。其中MYSQL相关的作业可选隔离级别，MongoDB同步至MongoDB时可选择是否同步Gridfs，若选择否平台将只同步普通文档。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 "},"whalealData/use cases/AddColdDataFullLoadJob.html":{"url":"whalealData/use cases/AddColdDataFullLoadJob.html","title":"AddColdDataFullLoadJob","keywords":"","body":"添加冷数据全量作业 ​ 点击配置管理菜单下的表作业配置，在冷数据表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与文件源，归档模式选择全量更新。需注意的是冷数据归档只可将MongoDB的数据归档。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行删除。 "},"whalealData/use cases/AddS3FullLoadJob.html":{"url":"whalealData/use cases/AddS3FullLoadJob.html","title":"AddS3FullLoadJob","keywords":"","body":"添加S3全量作业 ​ 点击配置管理菜单下的表作业配置，在S3表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与目标S3，同步S3时的源端需为MongoDB的Gridfs数据。之后归档模式选择全量更新。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验，由于S3特性相同文件名称上传将覆盖原有的文件所以同步模式可选择不处理直接替换、最新的文件替换、ID+文件名方式进行同步。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行删除。 "},"whalealData/use cases/AddWarmDataIncrementalJob.html":{"url":"whalealData/use cases/AddWarmDataIncrementalJob.html","title":"AddWarmDataIncrementalJob","keywords":"","body":"添加温数据增量作业 ​ 点击配置管理菜单下的表作业配置，在温数据表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与目标源库表，归档模式选择增量更新，当归档模式为增量更新时需填写sql配置，可点击蓝色自定义sql按钮弹出第二张图所示表格选择完成条件后点击保存即可生成sql。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。其中MYSQL相关的作业可选隔离级别，MongoDB同步至MongoDB时可选择是否同步Gridfs，若选择否平台将只同步普通文档。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 "},"whalealData/use cases/AddColdDataIncrementalJob.html":{"url":"whalealData/use cases/AddColdDataIncrementalJob.html","title":"AddColdDataIncrementalJob","keywords":"","body":"添加冷数据增量作业 ​ 点击配置管理菜单下的表作业配置，在冷数据表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与文件源，归档模式选择增量更新，需注意的是冷数据归档只可将MongoDB的数据归档。当归档模式为增量更新时需填写sql配置，可点击蓝色自定义sql按钮弹出第二张图所示表格选择完成条件后点击保存即可生成sql。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 "},"whalealData/use cases/AddS3IncrementalJob.html":{"url":"whalealData/use cases/AddS3IncrementalJob.html","title":"AddS3IncrementalJob","keywords":"","body":"添加S3增量作业 ​ 点击配置管理菜单下的表作业配置，在S3表作业页面点击蓝色新增按钮弹出以下表单，自行选择需同步的数据源库表与目标S3，同步S3时的源端需为MongoDB的Gridfs数据。之后归档模式选择增量更新。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验，由于S3特性相同文件名称上传将覆盖原有的文件所以同步模式可选择不处理直接替换、最新的文件替换、ID+文件名方式进行同步。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行删除。 "},"whalealData/use cases/CreateSingleTask.html":{"url":"whalealData/use cases/CreateSingleTask.html","title":"CreateSingleTask","keywords":"","body":"创建单次任务 ​ 点击任务配置菜单下的任务配置，此页面展示了所有任务点击蓝色新增按钮弹出第二张图片所示表单。任务模式选择单词任务，之后选择Cron表达式选择执行时间。若此任务表作业很多时可根据自身需求设置执行模式、任务超时时间、失败重试次数。提醒策略选择后添加报警邮箱地址，任务完成后将根据提醒策略发送邮件。点击添加作业弹出第三张图片所示数据配置，勾选作业后点击确定即可将此作业绑定至新建任务中，最后此任务需管理用户进行审核后才可以执行。 "},"whalealData/use cases/CreateManualTask.html":{"url":"whalealData/use cases/CreateManualTask.html","title":"CreateManualTask","keywords":"","body":"创建手工任务 ​ 手工任务与单次任务操作步骤一致，不同的是手工任务无需设置执行时间。若要执行此任务需通过管理员用户审核，之后在任务管理菜单下的任务调度页面找到该任务点击立即执行即可。 "},"whalealData/use cases/CreateLoopTask.html":{"url":"whalealData/use cases/CreateLoopTask.html","title":"CreateLoopTask","keywords":"","body":"创建循环任务 ​ 循环任务与单次任务操作步骤一致，循环任务也需设置执行时间此执行时间为下次循环执行的时间。若要执行此任务需通过管理员用户审核，之后在任务管理菜单下的任务调度页面找到该任务点击立即执行即可。 "},"whalealData/use cases/TaskExecutionMonitoring.html":{"url":"whalealData/use cases/TaskExecutionMonitoring.html","title":"TaskExecutionMonitoring","keywords":"","body":"任务执行监控 ​ 在任务调度页面点击立即执行或到达任务执行时间后，在任务管理菜单下不同的任务将出现在不同的任务监控处，如温数据将出现在任务监控（温）页面中，页面针对任务状态分为已完成、进行中、异常任务。温、冷、S3页面基本一致在其页面处查看任务的执行状态即可。 "},"whalealData/use cases/RetryAbnormalTask.html":{"url":"whalealData/use cases/RetryAbnormalTask.html","title":"RetryAbnormalTask","keywords":"","body":"异常任务重新执行 ​ 在任务管理菜单下有三个任务监控，每个任务监控中都有已完成、进行中、异常。针对异常任务可将此任务单独进行重新执行，点击重新执行后任务将先回滚之后重新执行此任务。 "},"whalealData/use cases/AbnormalTaskFeedback.html":{"url":"whalealData/use cases/AbnormalTaskFeedback.html","title":"AbnormalTaskFeedback","keywords":"","body":"异常任务回写 ​ 冷数据归档异常时点击归档管理（冷数据）菜单下的日志查询（冷），在此页面展示了归档冷数据任务，点击文件回写可将已归档的文件回写到数据库中。 "},"whalealData/use cases/SystemDeleteSourceData.html":{"url":"whalealData/use cases/SystemDeleteSourceData.html","title":"SystemDeleteSourceData","keywords":"","body":"系统删除源端数据 ​ 在配置管理菜单下的表作业配置处配置表作业时，表单中有数据处理方式的选择，选择系统删除后填写后方的批次值，在数据归档完成后系统将按批次删除源端数据。 ​ "},"whalealData/use cases/ManuallyDeleteSourceData.html":{"url":"whalealData/use cases/ManuallyDeleteSourceData.html","title":"ManuallyDeleteSourceData","keywords":"","body":"手动删除源端数据 ​ 在配置管理菜单下的表作业配置处配置表作业时，表单中有数据处理方式的选择，选择人工删除后跟随后面的批次值数据归档完成后源端数据不会被删除，若手动在数据库删除后可在任务监控（冷）处点击修改源表数据状态修改状态，或点击人工删除源表数据进行删除源表。 "},"whalealData/use cases/ColdDataWriteBack.html":{"url":"whalealData/use cases/ColdDataWriteBack.html","title":"ColdDataWriteBack","keywords":"","body":"冷数据回写 ​ 冷数据归档异常时点击归档管理（冷数据）菜单下的日志查询（冷），在此页面展示了归档冷数据任务，点击文件回写可将已归档的文件回写到数据库中。 点击任务后方黄色文件回写按钮，弹出页面点击创建回写任务按钮创建回写任务。 创建回写任务 ​ 点击创建回写任务按钮弹出以下表单，填写完成后点击确认即可。 "},"whalealData/use cases/ColdDataFullTextSearch.html":{"url":"whalealData/use cases/ColdDataFullTextSearch.html","title":"ColdDataFullTextSearch","keywords":"","body":"冷数据全文检索 ​ 点击归档管理菜单下的文件全文检索，可查询出所有文件全文检索日志信息，点击“创建检索任务”按钮后可创建文件全文检索任务，系统执行相应文件全局搜索，针对找到符合的文件记录，可以进行文件回写操作。 搜索 ​ 上方绿色按钮为搜索按钮，左侧条件框可选填，填写完条件后点击搜索按钮即可过滤出所需检索内容。 创建检索任务 ​ 点击蓝色按钮创建检索任务弹出以下表单，填写后点击确认。 "},"whalealData/use cases/SMTPConfig.html":{"url":"whalealData/use cases/SMTPConfig.html","title":"SMTPConfig","keywords":"","body":"SMTP邮件设置 ​ 点击系统管理菜单下的系统设置，此页面只有管理员用户可见，页面展示了SMTP的配置。填写完基本配置后点击测试连接，若测试通过接收到测试邮件后将出现保存按钮，SMTP配置保存后任务配置的告警都将由此配置的邮箱进行发送告警邮件。 "},"whalealData/use cases/WarmJobDemo.html":{"url":"whalealData/use cases/WarmJobDemo.html","title":"WarmJobDemo","keywords":"","body":"温作业Demo 1. 新增数据源及目标源 新增数据源 点击配置管理菜单下的数据源管理页面，在此页面点击蓝色新增按钮并填写数据源相关信息，测试通过后点击确认保存此数据源。 新增目标源 点击配置管理菜单下的目标源管理页面，在此页面点击蓝色新增按钮并填写目标源相关信息，测试通过后点击确认保存此目标源。 2. 权限分配 新增数据源与目标源后管理员用户在系统管理菜单下的用户管理页面进行数据库权限的分配。 3. 新建温作业 点击配置管理菜单下的表作业配置，在温数据表作业页面点击蓝色新增按钮弹出以下表单，选择需同步的数据源与目标源。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。其中MYSQL相关的作业可选隔离级别，MongoDB同步至MongoDB时可选择是否同步Gridfs，若选择否平台将只同步普通文档。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 4. 创建任务 新增任务配置 点击任务配置菜单下的任务配置，此页面展示了所有任务点击蓝色新增按钮弹出第二张图片所示表单，根据需求填写任务配置。若此任务表作业很多时可根据自身需求设置执行模式、任务超时时间、失败重试次数。提醒策略选择后添加报警邮箱地址，任务完成后将根据提醒策略发送邮件。 在任务中添加表作业 点击添加作业弹出以下图片所示数据配置，勾选作业后点击确定即可将此作业绑定至新建任务中，一个任务可绑定多个表作业。 管理员审核 任务配置完成后管理员用户在任务配置处可进行审核，审核通过后此任务即可进行执行。 5. 任务调度 点击任务管理菜单下的任务调度，在此页面进行此任务的状态。点击立即执行即可立即执行此任务。 6. 任务监控 在任务调度页面点击立即执行或到达任务执行时间后，在任务管理菜单下的任务监控(温)处查看此任务的执行状态。 "},"whalealData/use cases/ColdWorkDemo.html":{"url":"whalealData/use cases/ColdWorkDemo.html","title":"ColdWorkDemo","keywords":"","body":"冷作业Demo 1. 新增数据源及文件源 新增数据源 点击配置管理菜单下的数据源管理页面，在此页面点击蓝色新增按钮并填写数据源相关信息，测试通过后点击确认保存此数据源。 新增文件源 点击配置管理菜单下的目标源管理页面，在此页面点击冷数据文件源后点击蓝色新增按钮并填写冷数据归档相关信息，点击确认保存此文件源。 2. 权限分配 新增数据源与文件源后管理员用户在系统管理菜单下的用户管理页面进行数据库权限的分配。 3. 新建冷作业 点击配置管理菜单下的表作业配置，在冷数据表作业页面点击蓝色新增按钮弹出以下表单，选择需同步的数据源与文件源。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 4. 创建任务 新增任务配置 点击任务配置菜单下的任务配置，此页面展示了所有任务点击冷数据任务配置后，点击蓝色新增按钮弹出如图所示表单，根据需求填写任务配置。若此任务表作业很多时可根据自身需求设置执行模式、任务超时时间、失败重试次数。提醒策略选择后添加报警邮箱地址，任务完成后将根据提醒策略发送邮件。 在任务中添加表作业 点击添加作业弹出以下图片所示数据配置，勾选作业后点击确定即可将此作业绑定至新建任务中，一个任务可绑定多个表作业。 管理员审核 任务配置完成后管理员用户在任务配置处可进行审核，审核通过后此任务即可进行执行。 5. 任务调度 点击任务管理菜单下的任务调度，在此页面进行此任务的状态。点击立即执行即可立即执行此任务。 6. 任务监控 在任务调度页面点击立即执行或到达任务执行时间后，在任务管理菜单下的任务监控(冷)处查看此任务的执行状态。 "},"whalealData/use cases/S3JobDemo.html":{"url":"whalealData/use cases/S3JobDemo.html","title":"S3JobDemo","keywords":"","body":"S3作业Demo 1. 新增数据源及目标S3 新增数据源 点击配置管理菜单下的数据源管理页面，在此页面点击蓝色新增按钮并填写数据源相关信息，测试通过后点击确认保存此数据源。 新增目标S3 点击配置管理菜单下的目标源管理页面，点击S3页面后点击蓝色新增按钮并填写目标S3相关信息，测试通过后点击确认保存此目标S3。 2. 权限分配 新增数据源与目标S3后管理员用户在系统管理菜单下的用户管理页面进行数据库权限的分配。 3. 新建S3作业 点击配置管理菜单下的表作业配置，在S3表作业页面点击蓝色新增按钮弹出以下表单，选择需同步的数据源与目标S3。表作业具有一致性校验功能，选择是后可填写所需校验的百分比，同步后平台将对同步的数据进行一致性校验。数据处理方式可选人工删除或系统删除，此功能在同步完成后将源表进行按后方批次进行删除。 4. 创建任务 新增任务配置 点击任务配置菜单下的任务配置，此页面展示了所有任务点击蓝色新增按钮弹出第二张图片所示表单，根据需求填写任务配置。若此任务表作业很多时可根据自身需求设置执行模式、任务超时时间、失败重试次数。提醒策略选择后添加报警邮箱地址，任务完成后将根据提醒策略发送邮件。 在任务中添加表作业 点击添加作业弹出以下图片所示数据配置，勾选作业后点击确定即可将此作业绑定至新建任务中，一个任务可绑定多个表作业。 管理员审核 任务配置完成后管理员用户在任务配置处可进行审核，审核通过后此任务即可进行执行。 5. 任务调度 点击任务管理菜单下的任务调度，在此页面进行此任务的状态。点击立即执行即可立即执行此任务。 6. 任务监控 在任务调度页面点击立即执行或到达任务执行时间后，在任务管理菜单下的任务监控(S3)处查看此任务的执行状态。 "},"documentDataTransfer/":{"url":"documentDataTransfer/","title":"Document Data Transfer","keywords":"","body":"DDT(Document Data Transfer)简介 一 DDT介绍 DDT是由上海锦木信息技术有限公司(以下简称“锦木信息”)结合众多客户需求和锦木信息多年 MongoDB 一线服务及研发经验所推出新一代MongoDB数据库迁移同步工具。 DDT是一个以JAVA语言开发的通用的传输软件，具有高健壮性、高传输性、高可用性的特点，可以快速稳定的迁移数据，帮助用户进行实现数据备份，实时迁移，备份容灾等业务操作。用户也可自定义配置参数来实现场景不同高效传输。 由于目前MongoDB副本集内置的主从同步对于这种业务场景有较大的局限性，为此，我们开发了DDT同步工具，可以应用在实例，机房、跨数据中心复制，满足灾备和多活需求。 传统MongoDB数据同步仅支持相同架构的数据同步，DDT支持单节点，复制集，分片三种类型架构的数据相互传输。帮助用户实现类似于复制集点到分片 分片到单节点的数据同步方案 DDT的核心实时同步：我们利用对OPLOG日志的解析和应用，高效安全的实现实时同步。 源端MongoDB可以是单实例、副本集或分片，而目标可以是 mongod 或 mongos。如果源端是副本集，我们建议从次要/隐藏节点中获取数据以减轻主节点压力。如果源端是分片，每个分片都应该连接到 DDT。 二 功能介绍 DDT 具有简单、安全、适用性强、多功能 、高性能等特点。 功能模块及描述 功能模块 功能项 描述 同步模式 全量同步 全量同步表，仅同步程序启动前的源表数据 实时同步 实时同步源端产生的oplog 全量和增量同步 全量同步后，仅同步同步期间对源表进行的操作。实时同步的开始时间为全量同步的开始时间，实时同步的结束时间为全量同步的结束时间 全量和实时同步 全量同步后，开始进行实时同步。实时同步的开始时间为全量同步的开始时间 附加特性 延迟同步 在实时同步期间可以延迟设置读取oplog 同步DDL 在实时同步期间，用户可以自定义同步某些DDL操作 源表索引 在全量同步期间，用户可以设置是否在总数据同步60%以后，开始同步源表的索引列表 多表并行 在全量同步时，设置多源表同时同步还是单表依次同步 同步源表名单 使用正则表达式设置需要的同步表名单 时间区间实时同步 实时同步时，可以设置同步某时间区间内的oplog MongoDB版本 支持版本 DDT支持3.2，3.4，3.6，4.0，4.4，5.0，6.0版本的 2.1高性能 高效数据校验 确保数据总量一致 确保数据信息一致 确保数据索引一致 确保数据结构一致 多种同步方案 全量数据复制 实时数据同步 增量数据同步 自定义同步范围 复合数据同步方案 高速同步机制 100%传输带宽利用 可控CPU利用率 内存使用率可配置 支持多表并传 小巧稳定高效 体积小巧 断点续传 支持多版本MongoDB同步 2.2同步模式 同步模式：全量，实时，全量和增量，全量和实时。 其中增量是指有时间范围限制的Oplog实时同步。 全量同步：将源端MongoDB库表进行切分查询，查询到的数据多线程批写入到目标MongoDB库。在全量同步模式下，原则上来说提供资源数越多，QPS越高。 实时同步：将数据从源MongoDB复制到另一个MongoDB，以构建冗余复制。它从源 MongoDB数据库中获取 oplog，并在目标 mongo db数据库中重放日志。 2.3 断点续传 source端MongoDB意外宕机时重启，DDT依然能够正常 无丢失的同步数据。当DDT意外关闭时，下次启动DDT时，能自动追踪到断点处，且进行追加重传。 2.4 支持多版本 目前DDT支持3.2到6.0的MongoDB。新版本的时许表，桶表均 可靠支持传输同步。 2.5 DDL操作 在实时同步期间，用户可以自定义同步某些DDL操作。同时DDL操作也会被记录在日志中，方便审查操作。 2.6 Oplog延迟 延迟同步Oplog可以方便用户进行故障切换。 2.7 同步范围 实时同步时，可以设置同步Oplog的开始结束时间。 还有其他功能：同步库表名单过滤， 数据校验 等 三 公司简介 上海锦木信息技术有限公司是一家专业的IT数据咨询与服务提供商，我们致力于向用户提供优质的信息化产品、咨询及服务，锦木于2015年在上海成立，并于北京、深圳、广州设立分支机构。 锦木信息是MongoDB北亚区核心合作伙伴，Akamai、Vonage的中国区核心合作伙伴，为客户提供专业技术服务、咨询、应用开发。 作为以技术创新、客户为先驱动的IT服务提供商，锦木信息的产品及服务已被国内领先企业所认可，拥有 50+ 核心客户，在金融、保险、券商、游戏、电商等行业推出了优质服务和创新产品解决方案，销售业务涵盖中国大陆及中国香港。 锦木信息官网：www.jinmuinfo.com 咨询邮箱：support@jinmuinfo.com 联系电话：021-58870038,021-66696778 "},"documentDataTransfer/Introduction/Architecture.html":{"url":"documentDataTransfer/Introduction/Architecture.html","title":"Architecture","keywords":"","body":"DDT架构简介 背景 Mongodb数据库的全量迁移和实时同步。我司研究开发新型的数据迁移项目，由此DDT项目诞生。 项目介绍 名称：DDT 语言: 纯java开发 定位: Mongodb数据库的全量迁移和实时同步 功能介绍 DDT是Mongodb数据同步组件 迁移功能包括： DDT功能模块及描述 同步模式 全量同步： 全量同步表，仅同步程序启动前的源表数据。 实时同步： 实时同步源端产生的oplog（操作日志）。 全量和增量同步： 全量同步后，仅同步同步期间对源表进行的操作。实时同步的开始时间为全量同步的开始时间，实时同步的结束时间为全量同步的结束时间。 全量和实时同步： 全量同步后，开始进行实时同步，实时同步的开始时间为全量同步的开始时间。 附加特性 延迟同步： 在实时同步期间可以延迟设置读取oplog。 同步DDL： 在实时同步期间，用户可以自定义同步某些DDL操作。 源表索引： 在全量同步期间，用户可以设置是否在总数据同步60%以后，开始同步源表的索引列表。 多表并行： 在全量同步时，设置多源表同时同步还是单表依次同步。 同步源表名单： 使用正则表达式设置需要的同步表名单。 时间区间实时同步： 实时同步时，可以设置同步某时间区间内的oplog。 MongoDB版本 支持版本： DDT支持3.2，3.4，3.6，4.0，4.4，5.0，6.0版本的MongoDB。 架构 说明: 一个Jvm Container对应多个instance，每个instance对应于一个的迁移程序 instance分为三部分 a. source (从源数据库上提取数据，可分为全量/实时实现) b. cache (将源库上的数据按照目标库的需求进行缓存) c. target (将数据更新到目标库，可分为全量/实时/对比的实现) DDT流程图 实时迁移 注： 使用cas机制确保每个库表在同一时刻仅有一个线程对该库表进行分桶 使用cas机制确保每个库表桶在同一时刻仅有一个线程对该库表桶的数据进行写入 当进行库表分桶时发现DDL操作时，把该DDL之前的数据进行写入，然后再执行DDL操作 全量迁移 注： 使用cas机制确保每个区在同一时刻仅有一个线程对该区的桶队列进行写入/读取 一个source表的数据可以放在任意区，一个target可以从任意区取数据。但一个区同时最多有一个线程进行操作 "},"documentDataTransfer/Introduction/CustomerCase.html":{"url":"documentDataTransfer/Introduction/CustomerCase.html","title":"CustomerCase","keywords":"","body":"DDT应用案例 介绍一下用户使用我们DDT的案例，从业务场景、用时等介绍可 控、稳定对比性能图 案例一：某证券公司 容灾的好处：生产中心的业务除了在本地备份外，还可以在灾备中心进行备份，双活架构下支持双中心互备，提升业务韧性，实现业务的双保险。利用DDT同步工具，把远端数据实时写入目标端。 案例二：某航空公司 要进行MongoDB复制集集群跨大版本升级3.2至4.4版本。由于应用端需要快速升级变更，传统的MOngoDB复制集需要进行逐级版本升级，此过程比较耗时，且出现异常情况，不能及时切换原正确状态。 我司给航空公司的的解决方案是，搭建新4.4版本数据库，利用DDT实时迁移旧数据到新集群，当新旧集群无延迟时，修改应用端数据库地址。 在此案例中，原端数据为700GB，实时数据1w条每秒，中间穿插出现建表，删表等DDL操作。DDT一共用时6小时传输完成，其中全量用时5小时，实时用时1小时。 "},"documentDataTransfer/Install/Requirements.html":{"url":"documentDataTransfer/Install/Requirements.html","title":"Requirements","keywords":"","body":"DDT环境要求 硬件要求 操作系统：Linux 发行版（如Ubuntu、CentOS）。 配置：推荐 8C 16G 存储空间：至少 100GB 的可用磁盘空间。 网络适配器：支持有线或无线连接的网络适配器。 网络要求 网络访问要求 带宽千兆或百兆，并配置网络策略使其能够连接源端与目标端MongoDB。 端口要求 需要开放指定的端口（如 27017 端口用于 MongoDB 通信，程序启动所用端口或自定义的源端与目标端MongoDB端口）。 软件要求 操作系统要求 支持 linux centos 7 及以上版本。 "},"documentDataTransfer/Install/Installation.html":{"url":"documentDataTransfer/Install/Installation.html","title":"Installation","keywords":"","body":"安装部署 在CentOS部署DDT JDK 安装 下载 JDK11 版本的 tgz wget https://download.java.net/java/GA/jdk11/9/GPL/openjdk-11.0.9_linux-x64_bin.tar.gz 解压下载tar包 tar -zxvf jdk-11.0.9_linux-x64_bin.tar.gz 更换目录 mv jdk-11.0.9 /usr/local/jdk11 配置环境变量 vi /etc/profile export JAVA_HOME=/usr/lib/jvm/jdk11 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin 刷新生效 source /etc/profile 校验 Java --version 运行DDT 前提条件 需保证安装配置文件与java环境正常，才可启动DDT进程。 运行服务 进去bin目录 执行启动：start-DDT.sh 脚本。启动传输数据功能 执行启动：start-monitor.sh 脚本。启动web监控功能 关闭服务 进去bin目录 执行启动: stop-DDT.sh 脚本。关闭传输数据功能 执行启动：stop-monitor.sh 脚本。关闭web监控功能 DDT特性 1. DDT支持全量，实时，全量和增量，全量和实时同步模式。 其中增量是指有时间范围限制的Oplog实时同步。 2. 目前DDT支持3.2到6.0的MongoDB。新版本的时序表，桶表均可靠支持传输同步。 3. 在实时同步期间，用户可以自定义同步某些DDL操作。同时DDL操作也会被记录在日志中，方便审查操作。 目前同版本同步数据无影响，高版本向低版本同步时，高版本新增类型无法同步至低版本，低版本向高版本同步时，高版本移除低版本的某些类型等无法同步。例如3.2版本删除了某索引，5.0版本新增了时序表等。 "},"documentDataTransfer/Install/QuickStart.html":{"url":"documentDataTransfer/Install/QuickStart.html","title":"QuickStart","keywords":"","body":"QuickStart 启动步骤 1.下载DDT 访问 https://github.com/whaleal/DocumentDataTransfer/releases 下载最近版本的DDT.tar.gz 2.解压缩 mkdir DDT tar -zxvf DDT.tar.gz -C DDT 3.配置文件修改 配置介绍 cd DDT/config vi DDT.properties 4.准备启动 cd bin ./start-all.sh 5.查看运行情况 访问web监控页面 http://bind_ip:58000/DDT_WEB/#/home 6.查看目标端的数据量，对比数据一致性。 1 使用mongodb自带校验工具。（会锁库） use xxx db.runCommand({dbHash:1}) 2 手动校验数据 java -jar checkData.jar /配置文件路径/DDT.properties "},"documentDataTransfer/Install/Configuring.html":{"url":"documentDataTransfer/Install/Configuring.html","title":"Configuring","keywords":"","body":"功能操作说明 1.参数含义 当设置 MongoDB 数据同步任务时，以下是每个参数的详细含义： workName: 含义：任务名称 说明：用于标识数据同步任务的名称，如果未提供，则默认生成为 \"workNameDefault\"。 sourceDsUrl: 含义：源端 MongoDB 连接 URL 说明：指定源端 MongoDB 数据库的连接 URL，可以为单节点、复制集或分片。 targetDsUrl: 含义：目标端 MongoDB 连接 URL 说明：指定目标端 MongoDB 数据库的连接 URL，可以为单节点、复制集或分片。 syncMode: 含义：同步模式 说明：指定数据同步的模式，可以是以下几种选项： \"all\": 全量模式，同步所有表，不同步同步期间对源表进行的操作。 \"allAndRealTime\": 全量加实时模式，先进行全量同步，然后开始实时同步。 \"allAndIncrement\": 全量加增量模式，进行全量同步后，仅同步同步期间对源表进行的操作。 \"realTime\": 实时模式，根据配置的开始和结束时间进行实时同步。 realTimeType: 含义：实时任务类型 说明：选择实时任务使用的类型，可以是 \"oplog\" 或 \"changestream\"。 详细说明： \"oplog\": 使用 MongoDB 的 oplog 进行实时同步，适用于源端为复制集，支持 DDL 操作，速度较快。 \"changestream\": 使用 MongoDB 的 changestream 进行实时同步，适用于源端为复制集或 mongos，不支持 DDL 操作，速度一般。 fullType: 含义：全量任务类型 说明：选择全量任务使用的类型，可以是 \"sync\" 或 \"reactive\"。 详细说明： \"sync\": 使用稳定的传输方式进行全量同步。 \"reactive\": 使用更快的传输方式进行全量同步。 dbTableWhite: 含义：需要同步的表 说明：使用正则表达式指定需要同步的表，例如同步 mongodb 库下的所有表：mongodb\\..+，默认为同步全部表。 ddlFilterSet: 含义：需要同步的 DDL 操作 说明：指定需要同步的 DDL 操作，多个操作之间用英文逗号隔开，默认为 *，代表同步所有 DDL 操作。 sourceThreadNum: 含义：源端任务线程数（全量模式） 说明：指定全量同步情况下读取源端任务的线程数。 targetThreadNum: 含义：目标端任务线程数（全量模式） 说明：指定全量同步情况下写入目标端任务的线程数。 createIndexThreadNum: 含义：建立索引的并发线程数（全量模式） 说明：指定全量同步情况下建立索引的并发线程数。 batchSize: 含义：每批次数据大小 说明：指定每次传输的数据批次大小，默认为 128。 bucketNum: 含义：缓存桶个数 说明：指定内存中的缓存桶个数，默认为 20。 bucketSize: 含义：每个缓存桶缓存批次数量 说明：指定每个缓存桶缓存的数据批次数量，默认为 20。 startOplogTime: 含义：实时同步的开始时间 说明：在实时同步模式下，指定读取 oplog 的开始时间，默认为程序启动时刻的 10 位时间戳。 endOplogTime: 含义：实时同步的结束时间 说明：在实时同步模式下，指定读取 oplog 的结束时间，默认为 0，表示没有结束时间。 delayTime: 含义：实时同步的延迟时间 说明：在实时同步模式下，指定读取 oplog 的延迟时间，默认为 0，表示没有延迟时间。 nsBucketThreadNum: 含义：解析桶的线程数（实时同步） 说明：在实时同步中解析桶的线程数，默认为系统计算值。 writeThreadNum: 含义：写数据的线程数（实时同步） 说明：在实时同步中写数据的线程数，默认为系统计算值。 ddlWait: 含义：每个 DDL 操作最大耗时 说明：设置同步中每个 DDL 操作的最大耗时，单位为秒。 clusterInfoSet: 含义：全量同步时的预处理操作 说明：设置全量同步时的预处理操作，用逗号隔开，可组合多个操作，例如 \"0,1,2,3,4,5,6,7\"，默认为空。每个操作的含义如下： 0: 是否删除目标端已经存在的表 1: 打印输出集群全部用户信息 2: 同步库表结构 3: 同步库表索引信息 4: 全部库开启库分片 5: 同步库表 shard key 6: 同步 config.setting 表 7: 库 表预切分 chunk bind_ip: 含义：开启 monitor 监控时的本机 IP 地址 说明：在开启监控时，配置监控所绑定的本机 IP 地址。 通过配置这些参数，您可以根据您的需求，定制 MongoDB 数据同步任务的行为和特性。 2.参数使用范围 | 参数 | 实时任务 | 全量任务 | 全量加增量任务 | 全量加实时任务 | |----------------------|--------|--------|-------------|--------------| | workName | ✔️ | ✔️ | ✔️ | ✔️ | | sourceDsUrl | ✔️ | ✔️ | ✔️ | ✔️ | | targetDsUrl | ✔️ | ✔️ | ✔️ | ✔️ | | syncMode | ✔️ | ✔️ | ✔️ | ✔️ | | realTimeType | ✔️ | | ✔️ | ✔️ | | fullType | | ✔️ | ✔️ | ✔️ | | dbTableWhite | ✔️ | ✔️ | ✔️ | ✔️ | | ddlFilterSet | ✔️ | | ✔️ | ✔️ | | batchSize | ✔️ | ✔️ | ✔️ | ✔️ | | bucketNum | ✔️ | ✔️ | ✔️ | ✔️ | | bucketSize | ✔️ | ✔️ | ✔️ | ✔️ | | startOplogTime | ✔️ | | | | | endOplogTime | ✔️ | | ✔️ | ✔️ | | delayTime | ✔️ | | | | | nsBucketThreadNum | ✔️ | | | | | writeThreadNum | ✔️ | | | | | ddlWait | ✔️ | ✔️ | ✔️ | ✔️ | | clusterInfoSet | ✔️ | ✔️ | ✔️ | ✔️ | | bind_ip | ✔️ | ✔️ | ✔️ | ✔️ | 3.数据校验 #校验数据脚本 # 0:多线程进行校验:配置后1-8的校验方式,可以并发的进行处理 # 1:预估库表count校验,count库表数量可能不准确 # 2:精确库表count校验,count库表数量准确 # 3:库表dbHash校验(会锁库,谨慎操作), 利用mongodb自带统计工具，对库表的每一行数据进行计算，最终得到表hash值 # 4:库表随机取100条数据进行校验,源端随机抽取100条数据，校验100条数据是否存在于目标端 # 5:库表每种数据类型取100条进行校验数据, _id每种数据类型均抽取100条（_id排序前50条,后五十条）,校验100条数据是否存在于目标端 # 6:检查库表缺失索引信息 # 7:检查库表缺失索引信息且补充建立缺失索引 # 8:库dbHash校验(会锁库,谨慎操作) # 9:输出详细校验日志信息。不填写9时，日志仅记录异常校验信息 # 可以组合使用 例如 123456 123457 1237。若不填写，默认使用组合16 checkData=12456 "},"documentDataTransfer/Usecase/FunctionalTest.html":{"url":"documentDataTransfer/Usecase/FunctionalTest.html","title":"FunctionalTest","keywords":"","body":"全量 1.开始准备 use photon 创建十张表。每个表均无_id以为的索引 每张表插入5千万条数据左右 2.源端插入数据 单条记录 { \"_id\" : ObjectId(\"61bad4f68a27d20b123ed7e8\"), \"BsonTimestamp1\" : Timestamp(1639634166, 78), \"String\" : \"str\", \"Doc\" : { \"1\" : 1 }, \"javaInt\" : 71916, \"bytes\" : BinData(0,\"AQ==\"), \"Array\" : [ ], \"Binary data\" : BinData(0,\"AQID\"), \"ObjectId\" : ObjectId(\"61bad4f68a27d20b123ed7e6\"), \"Boolean\" : false, \"Date\" : ISODate(\"2021-12-16T05:56:06.688Z\"), \"Null\" : null, \"Regular Expression\" : /lhp.*/, \"DBPointer\" : DBPointer(\"1\", ObjectId(\"61bad4f68a27d20b123ed7e7\")), \"Undefined\" : undefined, \"JavaScript\" : { \"code\" : \"var i=0\" }, \"Symbol\" : \"var i=0\", \"BsonStr\" : \"var i=0\", \"BsonJavaScriptWithScope\" : { \"code\" : \"var i=0\", \"scope\" : { } }, \"32integer\" : 12, \"Timestamp\" : ISODate(\"2021-12-16T05:56:06.688Z\"), \"64int\" : NumberLong(123), \"Min key\" : { \"$minKey\" : 1 }, \"Max key\" : { \"$maxKey\" : 1 }, \"BsonTimestamp\" : Timestamp(1639634166, 457) } 3.源端数据量计算 show dbs; 源端占用磁盘量 photon 35.885GB db.stats() { \"db\" : \"photon\", \"collections\" : 10, \"views\" : 0, \"objects\" : 474281344, // 总条数（大致） \"avgObjSize\" : 132.06465577958498,// 每条数据大小 单位bytes \"dataSize\" : 57890360946, \"storageSize\" : 14807171072, \"freeStorageSize\" : 4571136, \"indexes\" : 20, \"indexSize\" : 23723704320, \"indexFreeStorageSize\" : 14454784, \"totalSize\" : 38530875392, \"totalFreeStorageSize\" : 19025920, \"scaleFactor\" : 1, \"fsUsedSize\" : 587772825600, \"fsTotalSize\" : 11939478503424, \"ok\" : 1, \"$clusterTime\" : { \"clusterTime\" : Timestamp(1640065750, 1), \"signature\" : { \"hash\" : BinData(0,\"v3ySiE7Zub+VPOJpQ/K3IaCJBxM=\"), \"keyId\" : NumberLong(\"7025843880893349893\") } }, \"operationTime\" : Timestamp(1640065750, 1) } 4.启动DDT 参考QuickStart 该测试环境使用如下参数 # DDT.properties 配置文件 #任务名。不写则默认生成workNameDefault。 workName=mongoTask #source端mongodb的url,必写。可以rul为单节点,复制集,分片 sourceDsUrl=mongodb://192.168.12.200:24578 #sourceDsUrl=mongodb://192.168.12.100:3999 #target端mongodb的url,必写。可以rul为单节点,复制集,分片 targetDsUrl=mongodb://192.168.12.100:24578 #同步模式 默认为all # all 全量,全量同步表,不同步同步期间对源表进行的操作 syncMode=all # 全量任务时，选择使用sync还是reactive # sync:传输稳定 # reactive:速度更快 fullType=reactive #需要同步的表，使用正则表达式书写。例如同步mongodb库下的所有表：mongodb\\\\..+ 默认同步全部表：.+ dbTableWhite=.+ #全量同步情况下读取源端任务线程数，最小为2，最大为100。默认值为系统计算值 sourceThreadNum=10 #全量同步情况下写入到目标端任务线程数，最小为4，最大为100 。默认值为系统计算值 建议targetThreadNum是sourceThreadNum的三倍 targetThreadNum=20 #全量同步情况下建立索引并发线程数，最小为1，最大为100 。默认值为系统计算值 createIndexThreadNum=15 ##下面三个参数bucketSize,bucketNum,batchSize共同决定全量情况下,内存中缓存的数据条数,注意内存溢出的情况。 ##均采用默认值则内存缓存20*20*128条数据,若每条数据100kb,则最大占用内存4.88G #每批次数据的大小 默认为128 batchSize=128 #缓存桶个数 默认为20 bucketNum=20 #每个缓存桶缓存批次数量 默认为20 bucketSize=20 #同步中 每个DDL操作最大耗时 单位s ddlWait=1200 # 全量同步时 # 数据传输前，预处理：同步集群中DDL信息 # 0:全量同步时 是否删除目标端已经存在的表 # 1:打印输出集群全部用户信息 # 2:同步库表表结构 # 3:同步库表索引信息 # 4:全部库开启库分片 # 5:同步库表shard key # 6:同步config.setting表 # 7:库表预切分chunk # 可以组合使用 例如 1,2,3,4,5,6 1,2,3,7 默认值为空 # 组合用逗号隔开 clusterInfoSet=0,1,2,3,4,5,6,7 # 开启monitor监控时,配置的本机ip地址 bind_ip=192.168.12.190 5.结论 在全量同步时，4线程读取源端数据，12线程进行写入数据。 总数据量474281344条，占用磁盘35.885GB。 用时6447秒传输完毕，平均每秒写入73672条数据，平均每秒写入5.708MB数据。 实时 1.启动DDT 参考QuickStart 该测试环境使用如下参数 # DDT.properties 配置文件 #任务名。不写则默认生成workNameDefault。 workName=mongoTask #source端mongodb的url,必写。可以rul为单节点,复制集,分片 sourceDsUrl=mongodb://192.168.12.200:24578 #sourceDsUrl=mongodb://192.168.12.100:3999 #target端mongodb的url,必写。可以rul为单节点,复制集,分片 targetDsUrl=mongodb://192.168.12.100:24578 #同步模式 默认为all # realTime 实时。开始时间和结束时间可以配置startOplogTime,endOplogTime syncMode=realTime # 实时或者增量任务时，选择使用oplog还是changestream # 选择oplog,特点:源端为复制集,可以同步DDL,速度更快 # 选择changestream,支持:源端为复制集或mongos,不支持DDL,速度一般 realTimeType=changestream #需要同步的表，使用正则表达式书写。例如同步mongodb库下的所有表：mongodb\\\\..+ 默认同步全部表：.+ dbTableWhite=.+ # 实时同步情况下可以同步drop,create,createIndexes,dropIndexes,renameCollection,convertToCapped,dropDatabase,modify,shardCollection # 默认值为 * ,代表同步所有DDL操作 # 需要同步的DDL，多个ddl中间使用英文逗号隔离 ddlFilterSet=* ##下面三个参数bucketSize,bucketNum,batchSize共同决定全量情况下,内存中缓存的数据条数,注意内存溢出的情况。 ##均采用默认值则内存缓存20*20*128条数据,若每条数据100kb,则最大占用内存4.88G #每批次数据的大小 默认为128 batchSize=128 #缓存桶个数 默认为20 bucketNum=20 #每个缓存桶缓存批次数量 默认为20 bucketSize=20 #在实时同步时,设置读取oplog的开始时间,默认值为程序启动时刻的10位时间戳 startOplogTime=1692843646 #在实时同步时,设置读取oplog的结束时间,默认值为0即没有结束时间，否则则书写10位时间戳 endOplogTime=1692847246 #在实时同步时,设置读取oplog的延迟时间,默认值为0即没有延迟时间 delayTime=0 #在实时同步中解析桶的线程数的线程数,最小为8，最大为100。默认值为系统计算值 nsBucketThreadNum=15 #在实时同步中写数据的线程数的线程数,最小为8，最大为100。默认值为系统计算值 writeThreadNum=15 #同步中 每个DDL操作最大耗时 单位s ddlWait=1200 # 开启monitor监控时,配置的本机ip地址 bind_ip=192.168.12.190 2.源端插入数据 源端启动脚本进行CRUD操作 脚本对10张表进行CRUD操作 单条插入数据模型 { \"_id\" : ObjectId(\"61bad4f68a27d20b123ed7e8\"), \"BsonTimestamp1\" : Timestamp(1639634166, 78), \"String\" : \"str\", \"Doc\" : { \"1\" : 1 }, \"javaInt\" : 71916, \"bytes\" : BinData(0,\"AQ==\"), \"Array\" : [ ], \"Binary data\" : BinData(0,\"AQID\"), \"ObjectId\" : ObjectId(\"61bad4f68a27d20b123ed7e6\"), \"Boolean\" : false, \"Date\" : ISODate(\"2021-12-16T05:56:06.688Z\"), \"Null\" : null, \"Regular Expression\" : /lhp.*/, \"DBPointer\" : DBPointer(\"1\", ObjectId(\"61bad4f68a27d20b123ed7e7\")), \"Undefined\" : undefined, \"JavaScript\" : { \"code\" : \"var i=0\" }, \"Symbol\" : \"var i=0\", \"BsonStr\" : \"var i=0\", \"BsonJavaScriptWithScope\" : { \"code\" : \"var i=0\", \"scope\" : { } }, \"32integer\" : 12, \"Timestamp\" : ISODate(\"2021-12-16T05:56:06.688Z\"), \"64int\" : NumberLong(123), \"Min key\" : { \"$minKey\" : 1 }, \"Max key\" : { \"$maxKey\" : 1 }, \"BsonTimestamp\" : Timestamp(1639634166, 457) } 源端CURD并发量共10w/s 3.结论 在实时同步时，源端CURD并发量共10w/s 目标端平均每秒执行58000条数据 源端CURD数据量过大时会造成DDT无法及时同步源表Oplog。及时观察'读取oplog延迟xxxs'数据，避免读取oplog时，错过滑动窗口时间。 "},"documentDataTransfer/Usecase/FullTesting.html":{"url":"documentDataTransfer/Usecase/FullTesting.html","title":"FullTesting","keywords":"","body":"DDT 全量测试 测试环境 硬件资源配置如下： CPU：40核，Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz 内存：4*32G 网卡：1Gbps 操作系统：Linux x86_64 MongoDB 版本：0.1 硬盘：SSD 测试条件 测试数据涵盖以下维度：时延、QPS、CPU使用率、内存使用率。所有值均由 10 秒的平均值给出。 QPS来自数据平台的日志输出信息，每秒统计OPLOG写入次数；我们还给出了 CPU 和内存使用情况。 测试结果 当cacheBucketSize=32 cacheBucketNum=32 dataBatchSize=128 时： 测试一 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize为30GB目标MongoDB：单节点副本集，cacheSize为30GB 数据量 一个db共10个集合，每个文档包含7列，每个oplog文档的总大小约为140字节。 源端读取线程数 5 目标端写入线程数 15 缓存区 cacheBucketSize=32cacheBucketNum=32dataBatchSize=128 测试结果： 测量 描述 QPS 145062 CPU使用率 400% 内存使用情况 13631MB 测试二 配置信息 参数 介绍 MongoDB类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 源端读取线程数 6 目标端写入线程数 20 缓存区 cacheBucketSize=32cacheBucketNum=32dataBatchSize=128 测试结果 测量 描述 QPS 160837 CPU使用率 440% 内存使用情况 16384MB 测试三 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 源端读取线程数 6 目标端写入线程数 24 缓存区 cacheBucketSize=32cacheBucketNum=32dataBatchSize=128 测试结果 描述 测量 QPS 155232 CPU使用率 440% 内存使用情况 15860MB 统计 缓存区 cacheSize 源端读取线程数 目标端写入线程数 QPS 内存使用情况 CPU使用率 cacheBucketSize=32 cacheBucketNum=32 dataBatchSize=128 30GB 5 15 145062 13631MB 400% 6 20 160837 16384MB 440% 6 24 155232 15860MB 440% 总结：当cacheBucketSize=32，cacheBucketNum=32，dataBatchSize=128时，可以看出当线程数增加的时： （1）不会提高QPS，原因是读取量小于写入量； （2）内存使用率不会提升，原因是cache缓存区有限制。 当cacheBucketSize=48 cacheBucketNum=48 dataBatchSize=128 时： 测试一 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB；目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 源端读取线程数 5 目标端写入线程数 15 缓存区 cacheBucketSize=48 cacheBucketNum=48 dataBatchSize=128 测试结果 测量 描述 QPS 315702 CPU使用率 400% 内存使用情况 31326MB 测试二 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 源端读取线程数 6 目标端写入线程数 20 缓存区 cacheBucketSize=48cacheBucketNum=48dataBatchSize=128 测试结果 测量 描述 QPS 340716 CPU使用率 800% 内存使用情况 24773MB 测试三 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 源端读取线程数 6 目标端写入线程数 24 缓存区 cacheBucketSize=48cacheBucketNum=48dataBatchSize=128 测试结果 测量 描述 QPS 367178 CPU使用率 880% 内存使用情况 23986MB 测试四 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 源端读取线程数 8 目标端写入线程数 24 缓存区 cacheBucketSize=48cacheBucketNum=48dataBatchSize=128 测试结果 测量 描述 QPS 371528 CPU使用率 1120% 内存使用情况 27132MB 统计 缓存区 cacheSize 源端读取线程数 目标端写入线程数 QPS 内存使用情况 CPU使用率 cacheBucketSize=48 cacheBucketNum=48 dataBatchSize=128 30GB 5 15 315702 31326MB 400% 6 20 340716 24773MB 800% 6 24 367178 23986MB 880% 8 24 371528 27132MB 1120% 总结：当cacheBucketSize=48，cacheBucketNum=48，dataBatchSize=128时，可以看出当线程数增加的时： （1）提高QPS。 当cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 时： 测试一 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 源端读取线程数 5 目标端写入线程数 15 缓存区 cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 测试结果 测量 描述 QPS 370042 CPU使用率 812% 内存使用情况 25159MB 测试二 配置信息 测量 描述 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 源端读取线程数 6 目标端写入线程数 20 缓存区 cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 测试结果 测量 描述 QPS 390000 CPU使用率 1080% 内存使用情况 26522MB 测试三 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 源端读取线程数 6 目标端写入线程数 24 缓存区 cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 测试结果 测量 描述 QPS 400138 CPU使用率 1160% 内存使用情况 26655MB 测试四 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 源端读取线程数 8 目标端写入线程数 24 缓存区 cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 测试结果 测量 描述 QPS 360209 CPU使用率 1120% 内存使用情况 25252MB 统计： 缓存区 cacheSize 源端读取线程数 目标端写入线程数 QPS 内存使用情况 CPU使用率 cacheBucketSize=64 cacheBucketNum=64 dataBatchSize=128 30GB 5 15 370042 25159MB 812% 6 20 390000 26522MB 1080% 6 24 400138 26655MB 1160% 8 24 360209 25252MB 1120% 总结：当cacheBucketSize=64，cacheBucketNum=64，dataBatchSize=128时，可以看出当线程数增加的时： （1）会提高QPS，但是效果不明显，同时当线程数较大增加时，CPU使用率也会略有下降。 总结： （1）CPU与QPS： （2）内存使用情况与QPS： "},"documentDataTransfer/Usecase/RealTimeTest.html":{"url":"documentDataTransfer/Usecase/RealTimeTest.html","title":"RealTimeTest","keywords":"","body":"DDT 实时测试 测试环境 硬件资源配置如下： CPU：40核，Intel(R) Xeon(R) CPU E5-2670 v2 @ 2.50GHz 内存：4*32G 网卡：1Gbps 操作系统：Linux x86_64 MongoDB 版本：0.1 硬盘：SSD 测试条件 测试数据涵盖以下维度：时延、QPS、CPU使用率、内存使用率。所有值均由 10 秒的平均值给出。 QPS来自数据平台的日志输出信息，每秒统计OPLOG写入次数；我们还给出了 CPU 和内存使用情况。 测试结果 当cacheBucketSize=16 cacheBucketNum=16 dataBatchSize=128 时： 测试一 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 实时同步线程数 {oplogNS=1, oplogWrite=6, oplogRead=1, oplogNsBucket=2} 缓存区 cacheBucketSize=16 cacheBucketNum=16 dataBatchSize=128 测试结果 测量 描述 QPS 72398 CPU使用率 280% 内存使用情况 8258MB 测试二 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB；目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 实时同步线程数 {oplogNS=1, oplogWrite=9, oplogRead=1, oplogNsBucket=3} 缓存区 cacheBucketSize=16; cacheBucketNum=16; dataBatchSize=128 测试结果 测量 描述 QPS 80385 CPU使用率 240% 内存使用情况 14418MB 测试三 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 实时同步线程数 {oplogNS=1, oplogWrite=12, oplogRead=1, oplogNsBucket=4} 缓存区 cacheBucketSize=16cacheBucketNum=16dataBatchSize=128 测试结果 测量 描述 QPS 79365 CPU使用率 280% 内存使用情况 15728MB 测试四 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB ，目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 实时同步线程数 {oplogNS=1, oplogWrite=15, oplogRead=1, oplogNsBucket=5} 缓存区 cacheBucketSize=16，cacheBucketNum=16，dataBatchSize=128 测试结果 测量 描述 QPS 75388 CPU使用率 280% 内存使用情况 14025MB 统计 缓存区 oplogNS oplogWrite oplogRead oplogNsBucket QPS CPU使用率 内存使用情况 cacheBucketSize=16 cacheBucketNum=16 dataBatchSize=128 1 6 1 2 72398 280% 8258MB 1 9 1 3 80385 240% 14418MB 1 12 1 4 79365 280% 15728MB 1 15 1 5 75388 280% 14025MB 总结：当cacheBucketSize=16，cacheBucketNum=16，dataBatchSize=128时，可以看出当线程数增加时： （1）当线程数增加时，并不会提高QPS，原因是受缓存区大小的限制。 当cacheBucketSize=32 cacheBucketNum=32 dataBatchSize=128 时： 测试一 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB ，目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 实时同步线程数 {oplogNS=1, oplogWrite=6, oplogRead=1, oplogNsBucket=2} 缓存区 cacheBucketSize=32 ，cacheBucketNum=32 ， dataBatchSize=128 测试结果 测量 描述 QPS 87719 CPU使用率 240% 内存使用情况 13107MB 测试二 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB ， 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 实时同步线程数 {oplogNS=1, oplogWrite=9, oplogRead=1, oplogNsBucket=3} 缓存区 cacheBucketSize=32 ， cacheBucketNum=32， dataBatchSize=128 测试结果 测量 描述 QPS 100000 CPU使用率 320% 内存使用情况 11534MB 测试三 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节。 实时同步线程数 {oplogNS=1, oplogWrite=12, oplogRead=1, oplogNsBucket=4} 缓存区 cacheBucketSize=32cacheBucketNum=32dataBatchSize=128 测试结果 测量 描述 QPS 11237 CPU使用率 320% 内存使用情况 11796MB 测试四 配置信息 参数 介绍 MongoDB 类型 源端MongoDB：单节点副本集，cacheSize30GB， 目标MongoDB：单节点副本集，cacheSize30GB 数据量 一个DataBase共10个集合，每个文档包含7列，每个文档的总大小约为140字节 实时同步线程数 {oplogNS=1, oplogWrite=15, oplogRead=1, oplogNsBucket=5} 缓存区 cacheBucketSize=32， cacheBucketNum=32 ， dataBatchSize=128 测试结果 测量 描述 QPS 12003 CPU使用率 360% 内存使用情况 12845MB 统计： 缓存区 oplogNS oplogWrite oplogRead oplogNsBucket QPS CPU使用率 内存使用情况 cacheBucketSize=32 cacheBucketNum=32 dataBatchSize=128 1 6 1 2 87719 240% 13107MB 1 9 1 3 100000 320% 11534MB 1 12 1 4 112370 320% 11796MB 1 15 1 5 120030 360% 12845MB 总结：当cacheBucketSize=32，cacheBucketNum=32，dataBatchSize=128时，可以看出当线程数增加时： （1）当线程数增加时，会提高QPS，原因是受每秒读取Oplog量的限制。 总结： （1）CPU与QPS： （2）内存使用情况与QPS： "},"whalealAccount/":{"url":"whalealAccount/","title":"Whaleal Account","keywords":"","body":"Whaleal Account 简介 Whaleal Account 是一个前后端分离的 OAuth2.0 授权中心与用户中心，适用于 微服务鉴权、单点登录、企业开放平台 等场景。 （访问地址） 功能模块 用户管理 应用管理 角色与权限管理 OAuth2 授权模式与授权作用域管理 （GrantType & Scope） 应用授权与鉴权 支持的授权模式 授权码模式 authorization_code 客户端凭据模式 client_credentials 隐式授权模式 implicit 令牌刷新 refresh_token 密码模式 password （出于安全考虑默认不启用，如需启用可以自行创建。） "},"whalealAccount/Oauth2/oauth2.html":{"url":"whalealAccount/Oauth2/oauth2.html","title":"Oauth2","keywords":"","body":"Oauth2接入 Whaleal Account 介绍 一、前置工作-注册应用 前往 whaleal Account 注册应用 （访问地址） 注册参数说明 参数 是否必须 说明 名称 是 应用的名称 描述 是 应用的描述 关联组织 是 选择用户创建的组织进行关联,只能选择顶级组织进行关联 是否对外开放 是 注册的应用是否对所关联组织的外部人员开放 应用回调地址 否 授权后重定向的回调链接地址 保存应用信息 应用注册完成后,请进入应用详情页面获取到clientId、clientSecret并自行保存 应用详情 获取应用密钥 获取应用密钥需要经过用户的邮箱接收验证码进行验证,验证成功后会在页面展示密钥,同时发送密钥到用户邮箱 二、前置工作-应用配置 应用详情页面 配置应用回调地址 如果在注册应用时没有填写回调地址或者回调地址需要修改,请在登陆后找到应用->点击您创建的那个应用进入详情->回调地址进行编辑 配置授权作用域 配置应用授权信息的范围 配置权限 应用拥有的权限,应用关联的组织的权限池包含此处的权限 配置授权模式 Oauth2的授权模式 根据需求去配置相应的授权模式 三. 授权码模式接入 前端发起授权请求 跳转到 WhalealAccount 的认证页面,认证成功后会进行授权 url: /authorize method: GET 参数说明 参数 是否必须 说明 client_id 是 应用ID response_type 是 授权码模式固定值为code,响应内容中会携带授权码 scope 是 授权作用域,规定应用授权信息的范围 redirect_uri 是 授权后重定向的回调链接地址 state 否 oauth授权给了一个state的参数,这个参数,授权服务器不会做任何处理,第三方网站在发送state之后,授权服务器在回复code的同时会原封不动的把state发送给第三方网站,由于这个state是第三方网站可知的,但是攻击者是不可知的,所以可以用这个判定使用者的身份,只有验证通过后,再进行相应的处理。用于预防伪造攻击 认证页面 授权页面 后端发起请求获取access_token 成功认证授权后,能够获取到授权码,携带授权码去请求获取access_token（访问令牌） 请求接口 url: /v1/oauth/token method: POST 设置请求头 请求此接口,请在请求头中携带: Authorization:Basic+空格+Base64(clientId:clientSecret) 参数说明 参数 是否必须 说明 grant_type 是 授权码模式下,值固定为authorization_code code 是 上一步获取的授权码 redirect_uri 是 授权后重定向的回调链接地址 postman调用响应结果 注:如果应用配置了refresh_token的授权模式响应结果中就会返回刷新令牌,不配置则不会携带 四、密码模式接入 请求授权接口 url: /v1/oauth/token Method: POST 设置请求头 请求此接口,请在请求头中携带: Authorization:Basic+空格+Base64(clientId:clientSecret) 请求参数 参数 是否必须 说明 grant_type 是 授权模式,密码模式下为password redirect_uri 是 授权后重定向的回调链接地址 username 是 用户名 password 是 用户密码 响应结果 "},"whalealAccount/UserManual/register.html":{"url":"whalealAccount/UserManual/register.html","title":"Register","keywords":"","body":"用户注册 点击跳转注册页 填写注册信息 完成信息填写点击下一步 邮箱接收验证码 输入验证码,点击验证并注册,验证成功后注册成功 "},"whalealAccount/UserManual/login.html":{"url":"whalealAccount/UserManual/login.html","title":"Login","keywords":"","body":"登录 用户认证 用户可使用用户名密码登录也可以选择下方的微信、谷歌或github的三方登录,如果下方没有三方登录的标志,标识三方登录的方式目前被禁用 "},"whalealAccount/UserManual/passwordReset.html":{"url":"whalealAccount/UserManual/passwordReset.html","title":"PasswordReset","keywords":"","body":"重置密码 修改密码 用户登录后通过个人信息页面更改现有密码 输入原密码,新密码进行更新 忘记密码 若用户忘记密码需要重置,可在登录页点击忘记密码 可通过两种方式重置密码:手机短信和邮箱验证码 "},"whalealAccount/UserManual/userInfo.html":{"url":"whalealAccount/UserManual/userInfo.html","title":"UserInfo","keywords":"","body":"个人信息 访问个人信息 用户可通过左侧菜单栏访问个人信息页,也可以点开右上角用户头像,点击设置进入个人信息页,用户可在此页面更新个人信息 绑定信息 用户可在个人信息页面中的联系方式中修改邮箱/微信/手机号信息 "},"whalealAccount/UserManual/organization.html":{"url":"whalealAccount/UserManual/organization.html","title":"Organization","keywords":"","body":"组织 组织页 用户可通过左侧菜单中组织进入组织页,并对拥有的组织进行管理 创建组织 点击组织页右侧创建组织,填写组织信息点击确定即可创建成功 组织详情页 点击创建完成的组织进入组织详情 基本信息 基本信息页面可修改组织的组织名、描述、首页地址、组织logo 成员 成员页可对成员删除及启用操作或邀请其他用户加入组织 邀请成员 点击添加成员 根据需求生成邀请链接,将连接发送给受邀用户 删除成员 左侧勾选成员点击批量删除或者点击右侧删除按钮都可删除成员 启用/禁用 点击编辑按钮 选择状态点击更新 修改成员角色 点击编辑按钮 选择对应角色点击更新 角色 点击右侧加号可添加组织角色,成员的角色池（除了admin角色）也是由这里决定的 分配角色权限/删除角色 创建角色成功后可以看到右侧的两个按钮,点击左边按钮可为角色分配权限,点击右侧可删除该角色 为角色分配权限,此处权限池由预制角色和应用权限组合而成 删除角色 管理页 在管理页用户可执行退出组织删除组织及创建下级组织的操作,刚加入的普通成员只拥有退出组织的权限 普通成员看到的页面 日志 组织内部的日志记录 "},"whalealAccount/UserManual/client.html":{"url":"whalealAccount/UserManual/client.html","title":"Client","keywords":"","body":"应用 应用页 用户可通过左侧应用菜单进入应用页 创建应用 点击右侧创建按钮 表格项 是否必须 说明 名称 是 应用的名称 描述 是 对应用的描述 关联组织 是 应用要关联的组织 是否对外开放 是 默认为否即不对外开放,此参数影响应用在授权时是否允许应用关联组织之外的用户授权 应用回调地址 否 应用接入时需要用到的参数,创建时不填,创建完成后也可进入应用详情修改 应用详情页 应用创建完成后,点击应用进入应用详情 获取应用密钥 获取应用密钥需要经过用户的邮箱接收验证码进行验证,验证成功后会在页面展示密钥,同时发送密钥到用户邮箱 配置应用回调地址 如果在注册应用时没有填写回调地址或者回调地址需要修改,请在登陆后找到应用->点击您创建的那个应用进入详情->回调地址进行编辑 配置授权作用域 配置应用授权信息的范围 配置权限 应用拥有的权限,应用关联的组织的权限池包含此处的权限 配置授权模式 Oauth2的授权模式 根据需求去配置相应的授权模式 "},"whalealSupport/":{"url":"whalealSupport/","title":"Whaleal Support","keywords":"","body":"Whaleal Support 简介 Whaleal Support（锦木工单管理平台）,基于锦木产品的工单管理系统,便捷、高效、集中式的为客户解决问题。 （访问地址） 功能模块 建立工单 工单处理 通讯录管理 日志查询 产品管理 注意事项 Whaleal Support平台本身不提供注册认证,由Whaleal Account进行注册认证,请先前往WhalealAccount平台注册账号 （访问地址) "},"whalealSupport/UserManual/login.html":{"url":"whalealSupport/UserManual/login.html","title":"Login","keywords":"","body":"登录 访问 support.whaleal.com 后处于未登录状态，用户在右上角可见登录按钮,点击登录即会跳转到认证平台 Whaleal Account,使用 Whaleal Account 中注册的用户进行认证登录 点击右上角登录 跳转认证 认证成功即登录成功 "},"whalealSupport/UserManual/createCaseAccordingToSLA.html":{"url":"whalealSupport/UserManual/createCaseAccordingToSLA.html","title":"Create Case According To SLA","keywords":"","body":"根据SLA创建工单 点击按钮创建工单 填写信息 工单的优先级,根据SLA会有所不同,信息填写完成后点击确定即可创建完成 "},"whalealSupport/UserManual/myCaseList.html":{"url":"whalealSupport/UserManual/myCaseList.html","title":"MyCaseList","keywords":"","body":"我的工单 创建工单 找到我的工单页面,点击创建工单按钮开始创建工单,填写完工单信息点击确定即可创建成功 或者点击右下方悬浮的工单按钮也可快速创建 表格说明 表格项 是否必须 说明 工单标题 是 工单标题 所属公司 是 提问者所属公司 注意:如果提示请先加入一个组织,请前往whalealAccount注册账号并创建或加入一个组织,同时需要将该组织登记为锦木的客户,非客户即使创建了组织也无法创建工单 所属产品 是 工单涉及的产品 产品版本 是 涉及产品的版本 工单类型 是 工单涉及产品的异常类型 优先级 是 工单紧急的程度 关联工单 否 关联已经处理或处理完毕的工单 联系邮箱 否 客户的联系邮箱,默认为客户账号注册时填写的邮箱 描述内容 是 工单问题的具体描述 选择文件 否 附件上传 保存为草稿 点击保存为草稿按钮,该工单将保存在客户的草稿箱中 草稿的正式发布 点击草稿右侧的编辑按钮点击提交草稿即可发布为正式工单 "},"whalealSupport/UserManual/caseDetails.html":{"url":"whalealSupport/UserManual/caseDetails.html","title":"CaseDetails","keywords":"","body":"工单详情 点击进入工单详情 工单详情页面 工单信息 刚创建的工单处于新建阶段,请耐心等待处理人员开启此工单进行处理,在未开启处理前工单没有负责人 关联工单 点击关联工单中的超链跳转到对应工单详情页面 工单处理人 包含您工单的负责人及协助处理人,若为新建未开启处理的工单则没有值 筛选沟通记录 客户可从上方勾选框选择性的显示自己想看到的人发送的消息 发消息及上传附件 客户可在下方富文本框内编辑消息,点击选择文件上传附件,最后点击下方提交即可发送沟通记录 关闭工单 客户也可选则自行关闭工单 "},"whalealSupport/UserManual/productionAndDocument.html":{"url":"whalealSupport/UserManual/productionAndDocument.html","title":"ProductionAndDocument","keywords":"","body":"产品与文档 点击访问产品文档 "},"whalealSupport/UserManual/notification.html":{"url":"whalealSupport/UserManual/notification.html","title":"Notification","keywords":"","body":"站内信 站内消息预览 站内消息随时更新关于您的工单的处理进度,请留意站内信消息 查看全部站内信 点击查看全部消息进入站内信列表 跳转到工单 点击消息记录的工单标题,可跳转到对应工单的详情页 "},"whalealSupport/UserManual/addressList.html":{"url":"whalealSupport/UserManual/addressList.html","title":"AddressList","keywords":"","body":"通讯录 联系锦木团队 若有紧急事项,客户可通过通讯录获得锦木团队成员的联系方式 "},"JMC_1.7/2.PlatformOverview.html":{"url":"JMC_1.7/2.PlatformOverview.html","title":"Whaleal JMC_1.7","keywords":"","body":"平台概述 锦木通信平台（以下称“JMC”）是由上海锦木信息技术有限公司（以下简称“锦木信息”）结合众多全球化业务客户需求和锦木信息多年一线服务经验研发的通信服务 SaaS 平台。 JMC 目前已全面支持国内外短信服务业务，该业务对接锦木信息核心合作伙伴 Vonage（Nexmo 及 TokBox 现已成为 Vonage 的旗下公司）全球云通讯信息渠道，可达到“国内短信验证秒级触达，99% 到达率；国际/港澳台短信覆盖全球 200+ 国家/地区”的标准，快速稳定可靠。后续逐步开放社交媒体、语音和视频等业务支持。 以下内容均特指 JMC 的短信服务操作指南。 JMC 短信服务业务支持营销类、交易类两种类型短信。其中营销类短信不仅支持平台发信，简便快捷，也支持 API 发信；交易类短信仅支持 API 发信。 JMC 平台支持单用户亿条短信并发，分钟级千万条日志导出。 JMC功能模块及描述 功能模块 功能项 描述 登录 / 首页 登录 支持邮箱/手机号（中国大陆及港澳台、新加坡）登录。 忘记密码 可通过验证码修改密码。 任务管理 国际 港澳台发信 国内发信 国内发信需提前申请短信签名和短信模板。 任务统计 仅统计 JMC 上创建的任务，不含 API 任务数据。 模板管理 国际 港澳台短信模板 Webhook URL 配置发信Webhook接收地址 日志管理 日志查询 支持查询营销类、交易类短信详细条目，自助导出 csv、xlsx 文件格式。 报告下载 统计型数据展示，支持按类型、时间区域、国家等多维度查询及导出。 七月前数据（2021） 支持七月（不含）前的数据进行日志查询，查看任务统计，报告下载及导出功能。 下载中心 导出任务后，统一下载中心。 个人中心 账号信息及密码重置。 黑名单 针对锦木Key配置目标号码黑名单校验 号码管理 查看管理用户拥有号码,和购买号码 应用管理 创建管理应用 Voice 查看语音日志信息 "},"JMC_1.7/1.HomePage.html":{"url":"JMC_1.7/1.HomePage.html","title":"Host Page","keywords":"","body":"锦木通信平台操作指南 修订记录 版本 摘要 时间 修订人 V1.0.0 第 1 版发布 2020/12/13 Curie V1.5.0 第 1.5 版发布 2021/07/01 Vena V1.7.0 部分数据库表升级为 MongoDB，支持亿条并发及查询新增下载中心，支持 xlsx、csv 格式批量导出 2022/02/21 熊倩 V1.7.1 更新 4.4 API 接入方式 2022/04/06 李勇智 V1.7.2 更新 API 接口，新增 Secret 2023/07/03 李勇智 V1.7.3 更新 API 接口，新增 Webhook，号码黑名单校验功能 2023/10/24 成家麒 V1.7.4 更新 API 接口，新增 应用发信api，应用发信功能介绍 2024/06/25 韩鹏帅 "},"JMC_1.7/3.PlatformLayoutIntroduction.html":{"url":"JMC_1.7/3.PlatformLayoutIntroduction.html","title":"Platform Layout Introduction","keywords":"","body":" 图例2-1 页面布局图 平台布局介绍 区域 描述 1 导航栏，默认点击某一级目录时会自动收缩其他目录，可通过“区域5-布局设置-菜单 UniqueOpened”调节；该导航栏可往左侧收缩，仅展示小图标。 2 Tags-Views 区域，默认开启，可通过“区域5-布局设置-开启 Tags-Views”调节。 3 操作区。 4 账户余额展示区，随发信任务/API调用更新。 5 登录账号、系统布局配置、个人中心。 6 跟随 Tags-Views调节，对 Tags执行操作：刷新、关闭、关闭其他、关闭所有。 "},"JMC_1.7/module/4.1.Module.html":{"url":"JMC_1.7/module/4.1.Module.html","title":"Module","keywords":"","body":"登录模块 登录地址: https://client.jinmuinfo.com 登录账号: 须由锦木服务团队注册，手机号暂仅支持中国大陆及港澳台、新加坡 登录密码: 账号注册时，自动发送至注册邮箱 验证码: 邮箱登录则发送至邮箱，手机号登录则发送短信，有效期 5 分钟 图例3-1 平台登录页 图例3-2 重置密码页 任务管理 用户可通过任务管理进行短信发送及任务统计查询。 国际|港澳台发信 任务名称: 用户自定义。 From: 部分地区需提前申请，详情请查询“接入信息表-表2”。 短信模板（可选）: 单选项，需先在模板管理中添加。选择短信模板时，系统自动填入模板内容。 模板内容: 可直接输入发信内容，根据不同的计费标准，长短信会拆分发送。 开启手机号校验: 针对上传的号码进行黑名单校验。用户可预先在平台页面菜单栏最下方的黑名单菜单页中针对发信KEY配置发信黑名单，若目标号码在黑名单中，将不会产生发信行为。注意，开启此功能可能会导致发信速度降低。如找不到黑名单菜单页请联系锦木通信服务团队协助处理。 号码上传: 需先下载标准模板填写收信手机号（须加区号）；若上传的数据异常则会提示检测到异常数据X条，并可下载《异常数据.xlsx》用于排错。JMC不检测收信号码真实及有效性。 发送时间: 立即发送将会立即创建任务并发送；定时发送将会在用户所定时间进行发送，定时任务未实际发送前，均可进行暂停再修改，但开始发送后无法停止。 图例3-3 国际|港澳台发信任务创建 图例3-4 上传模板下载 图例3-5 定时任务时间选择 国内发信 任务名称: 用户自定义。 From: 单选项，国内发信须提前申请From，由锦木通信服务团队后台绑定至用户账号。 短信签名: 单选项，国内发信须提前申请短信签名，由锦木通信服务团队后台绑定至用户账号。 短信模板: 单选项，国内发信须提前申请短信模板，由锦木通信服务团队后台绑定至用户账号。 模板内容: 选择短信模板后，系统会自动填入，此时用户可对模板内容进行微调。但若内容差别过大，则可能造成短信发送成功，却被当地方运营商拦截（即未实际到达收信方），此时仍旧计费。建议使用申请通过后的模板，若需调整内容，请联系锦木通信服务团队进行确认。 开启手机号校验: 针对上传的号码进行黑名单校验。用户可预先在平台页面菜单栏最下方的黑名单菜单页中针对发信KEY配置发信黑名单，在配置列表中的号码将不会产生发信行为。注意，开启此功能可能会导致发信速度降低。如找不到黑名单菜单页请联系锦木通信服务团队协助处理。 号码上传: 需先下载标准模板填写收信手机号（须加区号86）；此处，系统会自动比对所上传号码区号是否为“86”，若不一致则会提示检测异常数据X条，并可下载《异常数据.xlsx》用于排错。JMC不检测收信号码真实及有效性。 发送时间: 立即发送将会立即创建任务并发送；定时发送将会在用户所定时间进行发送，定时任务未实际发送前，均可进行暂停再修改，但开始发送后无法停止。 图例3-6 国内发信任务创建 图例3-7 号码检测异常提示 任务统计 以任务ID为维度进行相关任务的统计、查询。任务ID随机且唯一。 任务统计仅能查询通过JMC创建的发信任务，Api发信无任务统计，若需查询Api发信需至日志管理模块。 默认展示该账号下所有数据，可通过任务状态、任务ID、任务名称、国家名称和指定用户进行数据筛选和下载。下载的文件格式为.xlsx，表格内字段如下： 任务ID 发送用户 任务名称 创建时间 发送时间 任务状态 短信统计 已发送条数 成功条数 失败条数 费用统计 针对每条任务，均可在当前页面单独下载“费用统计”和“失败详情”。费用统计表格内字段如下： TaskID 手机号码 结果 发送时间 国家地区名称 国家地区代码 FROM 发送内容 费用 模板管理 用户可在模板管理模块对国际|港澳台短信模板进行增、删、改、查操作。该模板设置目的为减少用户重复工作，提高效率。已设置的国际|港澳台短信模板与国际|港澳台发信任务处自动关联。 暂不支持国内短信发信模板自定义，国内短信模板须由用户先发送至锦木短信服务团队，由技术支持人员提交审核通过后再添加。添加完成后将会与任务管理-国内发信任务自动关联。 用户如有需要接收发信的 Webhook，可联系锦木通信团队协助创建 Webhook URL。创建完毕后即可在模板管理中的 Webhook URL 菜单页进行编辑配置。 日志管理 日志查询 日志查询处可查询每一条短信的发信详情，并支持 xlsx、csv 文件格式的数据导出。 日志查询支持营销类和交易类查询。可根据接收方手机号码、任务名称、国家名称、Message Id、任务ID和具体时间周期进行筛选查询。 报告下载 选定短信类型和时间周期后，可以进行报告的下载。另可根据用户账户和国家进行数据搜索，国家支持多选。 导出任务创建后，可在下载中心下载格式为 xlsx 的报告，报告内容为统计型数据，表内字段如下： Country / Region, 国家/地区, 用户名, 成功率, 总计/条, 成功/条, 失败/条 七月前数据（2021） 在该模块内支持 2021 年七月（不含）前的数据进行日志查询、任务统计和报告下载。数据可在该页面直接导出。 下载中心 任务管理 - 任务统计中导出总览表，日志查询和报告下载中创建的下载任务，可在该模块内下载。根据导出类型和时间周期进行筛选查询下载。 图例3-8 下载中心 个人中心 用户可在个人中心处查看账号信息，并可对账号密码进行修改。 图例3-9 用户账号基础信息 图例3-10 修改密码 黑名单 用户可针对指定的锦木Key配置号码的黑名单，配置黑名单号码后，目标号码存在于黑名单列表中或黑名单国家中将被过滤，不产生发信操作。 根据手机号配置 选择页面上方的手机号标签，点击页面中的新增按钮，弹出配置框，根据提示配置。 图例3-11 根据号码配置 根据国家配置 选择页面上的国家配置标签，点击页面中的新增按钮进行配置。选择具体的锦木Key，选择指定的国家，点击确定即可。 图例3-12 根据国家配置 号码管理 号码管理可以管理已有的号码,以及能够购买号码等操作 您的号码 此页面能够看到你所有的号码 图例3-13 号码管理 购买号码 此页面可以进行查找购买号码 图例3-14 购买号码 应用管理 创建应用,选择应用发信可以通过应用管理添加应用 图例3-15 应用管理 创建应用 点击添加 填写应用名称 图例3-16 创建应用 点击确认创建成功 图例3-17 应用管理 为应用配置渠道 创建应用完成后,点击渠道-点击添加 图例3-18 为应用添加渠道 点击确认 配置完成 图例3-19 渠道配置 Voice 此页面查看语音的信息日志 图例3-20 Voice日志查询 业务流程/场景 首次接入流程 JMC对用户端接入流程进行了精简，用户仅需提供相关信息，后续审核、申请、维护等均由锦木通信服务团队负责。 图例4-1 接入流程 新增发信国家/地区流程 因政策不同，部分国家/地区发信须提前进行申请。相关国家已记录在“接入信息表-表2”中。为保证发信任务正常，建议用户有新增发信国家/地区情况时，提前联系锦木通信服务团队进行确认。 账户充值流程 JMC暂不支持平台自助充值，需用户通过汇款/转账形式进行，具体方式可咨询所对接的锦木销售。 图例4-2 充值流程 名词解释 短信服务: 锦木通信平台提供的覆盖全球200+国家/地区的通信业务服务，支持从中国境内向港澳台及其他境外手机号码发送短信、以及在境外地区向境外手机号发送短信。 From: 发信方号码。不同国家/地区要求不同（国内发信必须提前申请），锦木通信服务团队会协助From号码开通。 Sender ID: 部分国家可将From数字号码替换为字母型Sender ID，需提前申请。（国内及美国发信必须申请，但发送时仍为数字From）。锦木通信服务团队会协助进行申请、设置。 短信签名: 短信签名是位于短信正文前【】中的署名，用于标识公司或业务，例如【Jinmu】。不同国家/地区要求不同（国内发信必须提前申请），锦木通信服务团队会协助进行申请、设置。 短信模板: 短信模板即具体发送的短信正文内容。 长短信: 短信长度大于一定字符时，会对短信进行拆分，分多条计费。部分国家在最终用户手机号上，短信会合并成一条展示；部分国家展示为多条。 营销类短信: 营销类短信一般指在经营公司促销、会员活动时，向网站、公司注册会员下发的，内容带有明显营销推广类意图的短信。营销短信常用于发送会员关怀、新品上线提醒、活动通知等营销推广类信息。 交易类短信: 交易类短信包含验证码短信（如注册登录验证、支付确认、身份核实等）、通知类短信（如付款回执、物流通知、状态提醒等）。 "},"JMC_1.7/module/4.2.API.html":{"url":"JMC_1.7/module/4.2.API.html","title":"API","keywords":"","body":"API 接入方式（API发信） 接口说明(建议使用) 接口同时支持GET和POST，推荐使用POST请求。此接口会校验号码黑名单。 接口地址: https://sms.jinmuinfo.com/send/v2/check请求方式: GET/POST接口描述: 短信API接口 请求参数 参数名称 参数说明 请求类型 是否必须 数据类型 说明 baseKey 加密后的 KEY，用于校验请求是否合法 query true string 由锦木服务团队提供 secret 与 baseKey 唯一对应的密钥 query true string 由锦木服务团队提供 from 发送方内容 query true string XX 数字中心 msg 发送的消息内容 query true string 您的 XX 服务到期 to 接收用户的手机号码 query true string 86136XXXXXXXX type 发信类型，默认参数为 text，非英文内容时设为 unicode query false string unicode/text 响应状态 Status Code Description Schema 200 OK Result 401 Unauthorized 403 Forbidden 404 Not Found 响应参数 Parameter Name Description Type Schema code Status code int32 integer data Response data object msg Response message string 响应示例 成功示例: { \"msg\": \"发送成功!\", \"code\": 0, \"data\": true } 失败示例: { \"msg\": \"baseKey不存在或已禁用\", \"code\": 35, \"data\": false } 失败示例: { \"msg\": \"此手机号在黑名单中，无法发送\", \"code\": 3333, \"data\": null } 失败示例: { \"msg\": \"此手机号在国家黑名单中，无法发送\", \"code\": 3333, \"data\": { \"country_code\": \"86\", \"country_prefix\": \"CN\", \"country_name\": \"China (PRC)\" } } Postman 示例 Header设置: Content-Type: application/json 图例4-3 Header 设置 GET请求设置: GET https://sms.jinmuinfo.com/send/v2/check?baseKey={baseKey}&secret={secret}&from={from}&msg={msg}&to={to}&type={type} 图例4-4 GET 请求设置 POST请求设置: POST https://sms.jinmuinfo.com/send/v2/check Body (raw JSON): { \"baseKey\": \"{baseKey}\", \"secret\": \"{secret}\", \"from\": \"{from}\", \"msg\": \"{msg}\", \"to\": \"{to}\", \"type\": \"{type}\" } 图例4-5 POST 请求设置 Java 示例 public static void main(String[] args) throws Exception { String baseKey = \"XXXXXX\"; String secret = \"XXXX\"; String type = \"unicode\"; String from = \"jinmu\"; String msg = \"发送演示\"; String to = \"861XXXXXXXXXX\"; JSONObject object = send(baseKey, secret, type, from, msg, to); System.out.println(object.toJSONString()); } private static JSONObject send(String baseKey, String secret, String type, String from, String msg, String to) throws Exception { String url = \"https://sms.jinmuinfo.com/send/v2/check\"; Connection connection = Jsoup.connect(url).ignoreContentType(true); Map data = new HashMap<>(); data.put(\"baseKey\", baseKey); data.put(\"secret\", secret); data.put(\"type\", type); data.put(\"from\", from); data.put(\"msg\", msg); data.put(\"to\", to); connection.data(data); Document doc = connection.post(); String bodyStr = doc.body().ownText(); return JSON.parseObject(bodyStr); } API发信（指定webhook回调地址） 接口说明 接口同时支持 GET 和 POST，推荐使用 POST 请求。 接口地址: https://sms.jinmuinfo.com/sendCallback 请求方式: GET/POST 接口描述: 短信 API 接口（附带callback） 请求参数 参数名称 参数说明 请求类型 是否必须 数据类型 说明 baseKey 加密后的 KEY，该参数用于校验是否避免非法请求 query true string 锦木服务团队提供 from 发送的 from 内容 query true string XX数字中心 msg 发送的消息内容 query true string 您的XX服务到期 to 接收用户的手机号码 query true string 86136XXXXXXXX type JMC 发信，默认参数为 text，当内容为非英文时，参数设置为 unicode query false string unicode/text callback 指定本次发信的Webhook回调地址，只支持http和https协议 query true string http://ip+port/xxx https://ip+port/xxx 响应状态 状态码 说明 schema 200 OK Result 401 Unauthorized 403 Forbidden 404 Not Found 23 callback地址无效 null 35 baseKey不存在或已禁用 null 响应参数 参数名称 参数说明 类型 schema code 状态码 integer(int32) integer(int32) data 数据 object msg 消息 string messageID 消息ID string 响应示例 成功示例 { \"msg\": \"发送成功!\", \"code\": 0, \"data\": true, \"messageID\": \"xxx-xxx-xxx-xxx\" } 失败示例 { \"msg\": \"baseKey不存在或已禁用\", \"code\": 35, \"data\": false, \"messageID\": null } Postman示例 Header 图例4-6 POST Header 设置 GET 图例4-7 GET 请求设置 POST 图例4-8 POST 请求设置 Java示例 java public static void main(String[] args) throws Exception { String baseKey = \"XXXXXX\"; String type = \"unicode\"; String from = \"jinmu\"; String msg = \"发送演示\"; String to = \"861XXXXXXXXXX\"; String callback = \"http://ip+port\"; JSONObject object = send(baseKey, type, from, msg, to, callback); System.out.println(object.toJSONString()); } /** * API短信接口 * * @param from 来源 * @param msg 内容 * @param to 接受用户 * @param baseKey KEY * @param type 非英文的内容传入参数为unicode英文默认text * @param callback 指定webhook回调地址 * @return com.alibaba.fastjson.JSONObject 发送结果 json * @date 2022/6/13 */ private static JSONObject send(String baseKey, String type, String from, String msg, String to, String callback) throws Exception { String url = \"https://sms.jinmuinfo.com/sendCallback\"; Connection connection = Jsoup.connect(url).ignoreContentType(true); Map data = new HashMap<>(); data.put(\"baseKey\", baseKey); data.put(\"type\", type); data.put(\"from\", from); data.put(\"msg\", msg); data.put(\"to\", to); data.put(\"callback\", callback); connection.data(data); Document doc = connection.post(); String bodyStr = doc.body().ownText(); return JSON.parseObject(bodyStr); } 应用发信API 接口说明 推荐使用POST请求。 接口地址: https://sms.jinmuinfo.com/beta/send 请求方式: POST 接口描述: 应用发信接口 请求参数 参数名称 参数说明 请求类型 是否必须 数据类型 说明 appKey 加密后的 KEY，用于校验请求是否合法 query true string 由锦木服务团队提供 appSecret 与 appKey 唯一对应的密钥 query true string 由锦木服务团队提供 from 发送的 from 内容 query true string XX 数字中心 to 接收用户的手机号码 query true string 86136XXXXXXXX type 发信类型，默认参数为 text，非英文内容时设为 unicode query false string unicode/text content 发信内容 query false string 发信内容 应用发信请求设置: curl --location 'https://sms.jinmuinfo.com/beta/send' \\ --header 'Content-Type: application/json' \\ --data '{ \"appKey\" : \"{appKey}\", \"appSecret\" : \"{appSecret}\", \"from\" : \"{from}\", \"to\" : \"{to}\", \"type\" : \"{type}\", \"content\" : \"{content}\" }' 图例4-9 应用发信 注意事项 callback地址的协议要是http或https协议，暂时不支持其他协议。 响应码为23，说明callback参数格式有误，请检查url是否有误。 如果响应码正常，但是未接收到webhook，可能是callback参数地址无法访问，请检查：ip是否可以访问，端口是否开放；接收Webhook的应用是否启动。 "},"JMC_1.7/module/4.3.JMCInfomation.html":{"url":"JMC_1.7/module/4.3.JMCInfomation.html","title":"Basic Concept","keywords":"","body":"JMC 基础概念介绍 1. 名词说明 1.1 签名（中国大陆特有） 图例6-1 短信实例 展示在短信内容里。如：图例 6-1 中的小优科技。 1.2 模板 短信正文，部分国家需要提前申请，才能发送。 1.3 Sender ID 用户短信界面显示的主叫标识叫做 Sender ID，如图例 6-1 中的 106909921031100 1.3.1 Sender ID 要求 Sender ID 在不同的国家有具体要求（跟使用的发信通道也有关系）： 有些国家支持字母型，有些国家支持数字型 有些国家/地区支持透传（如中国香港） 有些国家/地区需要预注册 中国大陆的短信规定 A2P (Application-to-Person) 的短信一定会以1065/1069开头。 1.3.2 Sender ID 的种类 Sender ID 的命名字符：最长15位数字(0-9)或者11个字符(A-Za-z) 全动态 Sender ID： 支持自定义数字字符混合（不支持空格） 动态字符型： 4-11 位字符透传型，如“Jinmu”（注：此种情况支持单向发送短信不支持接收） 动态数字型： 最长15位数字透传型，如“12345678” 随机数字型： 多数情况下，是国际线路商为符合当地法规设置的数字 Sender ID 号码池之一。 固定 Sender ID： 部分国家要求只有国际线路商唯一的固定 ID（此类情况下送达率可以得到保证） 1.4 1.5 锦木 baseKey 应用场景：使用锦木 API 发信。此 Key 为 API 方式发信的验证凭证，注意保密，不要泄露。 1.6 长短信 短信长度大于一定字符时，会对短信进行拆分，分多条计费。部分国家在最终用户手机号上，短信会合并成一条展示；部分国家展示为多条。 计费标准： 纯英文短信长度不超过 160 字时，按照 1 条短信计费；超过 160 字即为长短信时，按 153 字/条分隔成多条计费。 非纯英文（如中文，阿拉伯文，泰文）短信长度不超过 70 字时，按照 1 条短信计费；超过 70 字即为长短信时，按 67 字/条分隔成多条计费。 某些运营商有特殊的计费方式，具体计费标准以实际运营商扣费为准。 预估短信字符及条数： 方式一（需登录）：JMC - 任务管理 - 国内发信 or 国际|港澳台发信 - 新增 - 模板内容。 1.7 调用率 客户服务器调用 JMC API 的成功率。使用 JMC API 发信，JMC 无法记录数据提交情况，此数据需由客户运维人员自行记录。仅针对使用 JMC API 发信的场景。 1.8 发送率 成功下发给 SMS 通道的数据（公式：通道接收数 / JMC 接收数）。 1.9 送达率 通过 SMS 通道成功发送到当地运营商后，由运营商下发给最终用户的数据（公式：成功收信用户数 / 下发到 SMS 通道个数）。 1.10 Webhook 当运营商将短信发信给用户后，用户会给运营商返回一个接收短信的状态。 1.11 Inbound Inbound 指用户的回复短信。 2. 流程 2.1 JMC API 发信数据流 单个 baseKey 可支持的调用 API 的频率默认为 30 次/秒，向 Vonage 申请调高频率，一般可调到≤50 次/秒。 2.2 JMC 平台发信数据流 默认 JMC 平台发信频率是 130 次/秒，可联系技术支持调整。 3. 各国/地区发信规则 3.1 全部 查看详细规则 3.2 中国大陆 必须提前注册 SenderID，签名，模板，否则基本会发信失败。Sender ID 会被改成 1065/1069 开头的随机数字号码。 为防止骚扰信息，24 小时内最多约可以发 3 条内容相同的短信或 15 条不同内容的短信往同一个号码。超过以上限制的短信有可能会被网络运营商（针对签名）拦截。 注：从2023年6月下旬开始，中国运营商将加强内容控制。因此，某些品牌/公司的英文内容或英文签名的短讯可能会在没有营办商事先通知的情况下被屏蔽。这将影响已注册和未注册的流量。 3.3 中国香港 运营商 45407（ChinaUnicomHK）和 45412（ChinaMobileHK）： 默认不支持字母型 Sender ID 透传，需要申请。不申请的话，所有 Sender ID 会被替换成香港本地手机号去确保送达。 运营商 CSL（45400）、Hutchison（45404）、SmarTone（45406）和 PCCW（45416）： 默认支持 3-11 字符长度的字母型 Sender ID 透传，非字母型 Sender ID 会被替换成香港本地号码或“SMS”。 3.4 中国台湾 Sender ID 会被换成随机的台湾号码。也可以申请字母型 Sender ID，走直连线路，收费会高一些。GSM 7 位（英文内容 的短信）默认表中的扩展字符集 | ^€{}[~]\\ 将更改为三角形符号 △ 。支持符号 <>。 注：在实际中发现，台湾用户习惯在手机号前加 0，注意发信时，国家/地区代码和手机号中间不能有 0。 如果内容不进行注册： 如果营销内容中带有 URL，需要提前注册，否则可能会被限制。 如果不带 URL，在规定限制之内可以正常发送。 3.5 中国澳门 运营商 SmarTone（45500）、CTM（45501）和 Hutchison（45503）支持动态字母型 Sender ID，不需要申请；运营商 China Telecom 会被换成随机的香港号码。 3.6 美国 比较复杂，发不同类型的短信会有区别。普遍需要购买美国号码做 Sender ID，可能还需要付费注册 10DLC（Brand 和 Campaign）。 如发营销短信：需要在前一个月注册 10DLC（包含 Brand、Campaign 和外部审查）。 如发交易类短信：需要购买 Toll-free 号码，这个号码购买后需要申请验证。 3.7 菲律宾 需要注册 Sender ID。如果不注册 Sender ID 的话，会被转换成随机的通用 Sender ID（nxsms）或者号码，且低于注册了 Sender ID 的送达率。注册 Sender ID 需要客户签署授权书（在授权书上填写信息签字盖章，并扫描发给我们。涉及 2 个运营商：Smart 和 Globe）。 3.8 韩国 仅允许数字型 Sender ID（可能会在前边加前缀，比如 007，008，009），不支持字母型 SenderID，可能会被替换成全球的数字 Sender ID。可能会自动在内容上加前缀：\"[Web 발신]\" -表示短信来自 web；\"[국제발 신]\" -表示短信来自国外。前缀会算在短信内容字符数中，GSM-7 编码超出 140 个字符后开始分隔短信。 对于长短信合并，KTF 和 LGU+ 运营商不支持短信合并，收信人会收到 2 条短信；SK 电信运营商支持短信合并，收信人会收到 1 条完整的短信。 根据 KISA，促销信息必须包含标题广告（例如，“(광고)”，韩语广告）和带有 STOP 信息的页脚（例如，韩语“수신거부”和选择退出号码）。 "},"JMC_1.7/9.QA.html":{"url":"JMC_1.7/9.QA.html","title":"QA","keywords":"","body":"常见问题及解答 JMC 计费币种是什么？ 答：欧元。 JMC 付费方式是什么？ 答：预充值。 JMC 业务一般是对接甲方什么职位的？ 答：市场、运维。 首次登陆 JMC 的登陆密码在哪里看？ 答：可在登录账号的邮箱中查看。账号创建完成后，JMC 会向账号邮箱中发送初始密码和登录地址。为保障客户登录账号的安全性，首次登录成功后，系统会强制用户修改初始密码。 JMC账号是否可以用多个邮箱登录？ 答：一个 JMC 账号最多只能用一个邮箱登录，但可以用多个号码登录。 "}}